import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, parseBoolean as __parseBoolean, parseRfc3339DateTime as __parseRfc3339DateTime, serializeFloat as __serializeFloat, strictParseFloat as __strictParseFloat, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, throwDefaultError, } from "@aws-sdk/smithy-client";
import { XMLParser } from "fast-xml-parser";
import { AuthorizationAlreadyExistsFault, AuthorizationNotFoundFault, AuthorizationQuotaExceededFault, BackupPolicyNotFoundFault, BlueGreenDeploymentAlreadyExistsFault, BlueGreenDeploymentNotFoundFault, CertificateNotFoundFault, CustomAvailabilityZoneNotFoundFault, CustomDBEngineVersionAlreadyExistsFault, CustomDBEngineVersionNotFoundFault, CustomDBEngineVersionQuotaExceededFault, DBClusterAlreadyExistsFault, DBClusterBacktrackNotFoundFault, DBClusterEndpointAlreadyExistsFault, DBClusterEndpointNotFoundFault, DBClusterEndpointQuotaExceededFault, DBClusterNotFoundFault, DBClusterParameterGroupNotFoundFault, DBClusterQuotaExceededFault, DBClusterRoleAlreadyExistsFault, DBClusterRoleQuotaExceededFault, DBClusterSnapshotAlreadyExistsFault, DBClusterSnapshotNotFoundFault, DBInstanceAlreadyExistsFault, DBInstanceAutomatedBackupNotFoundFault, DBInstanceAutomatedBackupQuotaExceededFault, DBInstanceNotFoundFault, DBInstanceRoleAlreadyExistsFault, DBInstanceRoleQuotaExceededFault, DBParameterGroupAlreadyExistsFault, DBParameterGroupNotFoundFault, DBParameterGroupQuotaExceededFault, DBProxyAlreadyExistsFault, DBProxyEndpointAlreadyExistsFault, DBProxyEndpointNotFoundFault, DBProxyEndpointQuotaExceededFault, DBProxyNotFoundFault, DBProxyQuotaExceededFault, DBProxyTargetGroupNotFoundFault, DBProxyTargetNotFoundFault, DBSecurityGroupAlreadyExistsFault, DBSecurityGroupNotFoundFault, DBSecurityGroupNotSupportedFault, DBSecurityGroupQuotaExceededFault, DBSnapshotAlreadyExistsFault, DBSnapshotNotFoundFault, DBSubnetGroupAlreadyExistsFault, DBSubnetGroupDoesNotCoverEnoughAZs, DBSubnetGroupNotAllowedFault, DBSubnetGroupNotFoundFault, DBSubnetGroupQuotaExceededFault, DBSubnetQuotaExceededFault, DomainNotFoundFault, EventSubscriptionQuotaExceededFault, ExportTaskNotFoundFault, GlobalClusterAlreadyExistsFault, GlobalClusterNotFoundFault, GlobalClusterQuotaExceededFault, InstanceQuotaExceededFault, InsufficientDBInstanceCapacityFault, InsufficientStorageClusterCapacityFault, InvalidBlueGreenDeploymentStateFault, InvalidCustomDBEngineVersionStateFault, InvalidDBClusterEndpointStateFault, InvalidDBClusterSnapshotStateFault, InvalidDBClusterStateFault, InvalidDBInstanceAutomatedBackupStateFault, InvalidDBInstanceStateFault, InvalidDBParameterGroupStateFault, InvalidDBProxyEndpointStateFault, InvalidDBProxyStateFault, InvalidDBSecurityGroupStateFault, InvalidDBSnapshotStateFault, InvalidDBSubnetGroupFault, InvalidDBSubnetGroupStateFault, InvalidDBSubnetStateFault, InvalidEventSubscriptionStateFault, InvalidExportTaskStateFault, InvalidGlobalClusterStateFault, InvalidOptionGroupStateFault, InvalidSubnet, InvalidVPCNetworkStateFault, KMSKeyNotAccessibleFault, NetworkTypeNotSupported, OptionGroupAlreadyExistsFault, OptionGroupNotFoundFault, OptionGroupQuotaExceededFault, ProvisionedIopsNotAvailableInAZFault, ResourceNotFoundFault, SnapshotQuotaExceededFault, SNSInvalidTopicFault, SNSNoAuthorizationFault, SNSTopicArnNotFoundFault, SourceClusterNotSupportedFault, SourceDatabaseNotSupportedFault, SourceNotFoundFault, StorageQuotaExceededFault, StorageTypeNotSupportedFault, SubscriptionAlreadyExistFault, SubscriptionCategoryNotFoundFault, SubscriptionNotFoundFault, } from "../models/models_0";
import { DBClusterRoleNotFoundFault, DBInstanceRoleNotFoundFault, DBLogFileNotFoundFault, DBProxyTargetAlreadyRegisteredFault, DBUpgradeDependencyFailureFault, ExportTaskAlreadyExistsFault, IamRoleMissingPermissionsFault, IamRoleNotFoundFault, InsufficientAvailableIPsInSubnetFault, InsufficientDBClusterCapacityFault, InvalidDBClusterCapacityFault, InvalidExportOnlyFault, InvalidExportSourceStateFault, InvalidRestoreFault, InvalidS3BucketFault, PointInTimeRestoreNotEnabledFault, ReservedDBInstanceAlreadyExistsFault, ReservedDBInstanceNotFoundFault, ReservedDBInstanceQuotaExceededFault, ReservedDBInstancesOfferingNotFoundFault, SharedSnapshotQuotaExceededFault, SubnetAlreadyInUse, } from "../models/models_1";
import { RDSServiceException as __BaseException } from "../models/RDSServiceException";
export const serializeAws_queryAddRoleToDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAddRoleToDBClusterMessage(input, context),
        Action: "AddRoleToDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryAddRoleToDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAddRoleToDBInstanceMessage(input, context),
        Action: "AddRoleToDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryAddSourceIdentifierToSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAddSourceIdentifierToSubscriptionMessage(input, context),
        Action: "AddSourceIdentifierToSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryAddTagsToResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAddTagsToResourceMessage(input, context),
        Action: "AddTagsToResource",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryApplyPendingMaintenanceActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryApplyPendingMaintenanceActionMessage(input, context),
        Action: "ApplyPendingMaintenanceAction",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryAuthorizeDBSecurityGroupIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAuthorizeDBSecurityGroupIngressMessage(input, context),
        Action: "AuthorizeDBSecurityGroupIngress",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryBacktrackDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryBacktrackDBClusterMessage(input, context),
        Action: "BacktrackDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCancelExportTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCancelExportTaskMessage(input, context),
        Action: "CancelExportTask",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCopyDBClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCopyDBClusterParameterGroupMessage(input, context),
        Action: "CopyDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCopyDBClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCopyDBClusterSnapshotMessage(input, context),
        Action: "CopyDBClusterSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCopyDBParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCopyDBParameterGroupMessage(input, context),
        Action: "CopyDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCopyDBSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCopyDBSnapshotMessage(input, context),
        Action: "CopyDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCopyOptionGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCopyOptionGroupMessage(input, context),
        Action: "CopyOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateBlueGreenDeploymentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateBlueGreenDeploymentRequest(input, context),
        Action: "CreateBlueGreenDeployment",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateCustomDBEngineVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateCustomDBEngineVersionMessage(input, context),
        Action: "CreateCustomDBEngineVersion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBClusterMessage(input, context),
        Action: "CreateDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBClusterEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBClusterEndpointMessage(input, context),
        Action: "CreateDBClusterEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBClusterParameterGroupMessage(input, context),
        Action: "CreateDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBClusterSnapshotMessage(input, context),
        Action: "CreateDBClusterSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBInstanceMessage(input, context),
        Action: "CreateDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBInstanceReadReplicaCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBInstanceReadReplicaMessage(input, context),
        Action: "CreateDBInstanceReadReplica",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBParameterGroupMessage(input, context),
        Action: "CreateDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBProxyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBProxyRequest(input, context),
        Action: "CreateDBProxy",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBProxyEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBProxyEndpointRequest(input, context),
        Action: "CreateDBProxyEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBSecurityGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBSecurityGroupMessage(input, context),
        Action: "CreateDBSecurityGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBSnapshotMessage(input, context),
        Action: "CreateDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateDBSubnetGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateDBSubnetGroupMessage(input, context),
        Action: "CreateDBSubnetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateEventSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateEventSubscriptionMessage(input, context),
        Action: "CreateEventSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateGlobalClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateGlobalClusterMessage(input, context),
        Action: "CreateGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateOptionGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateOptionGroupMessage(input, context),
        Action: "CreateOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteBlueGreenDeploymentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteBlueGreenDeploymentRequest(input, context),
        Action: "DeleteBlueGreenDeployment",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteCustomDBEngineVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteCustomDBEngineVersionMessage(input, context),
        Action: "DeleteCustomDBEngineVersion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBClusterMessage(input, context),
        Action: "DeleteDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBClusterEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBClusterEndpointMessage(input, context),
        Action: "DeleteDBClusterEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBClusterParameterGroupMessage(input, context),
        Action: "DeleteDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBClusterSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBClusterSnapshotMessage(input, context),
        Action: "DeleteDBClusterSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBInstanceMessage(input, context),
        Action: "DeleteDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBInstanceAutomatedBackupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBInstanceAutomatedBackupMessage(input, context),
        Action: "DeleteDBInstanceAutomatedBackup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBParameterGroupMessage(input, context),
        Action: "DeleteDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBProxyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBProxyRequest(input, context),
        Action: "DeleteDBProxy",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBProxyEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBProxyEndpointRequest(input, context),
        Action: "DeleteDBProxyEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBSecurityGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBSecurityGroupMessage(input, context),
        Action: "DeleteDBSecurityGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBSnapshotMessage(input, context),
        Action: "DeleteDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteDBSubnetGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteDBSubnetGroupMessage(input, context),
        Action: "DeleteDBSubnetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteEventSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteEventSubscriptionMessage(input, context),
        Action: "DeleteEventSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteGlobalClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteGlobalClusterMessage(input, context),
        Action: "DeleteGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteOptionGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteOptionGroupMessage(input, context),
        Action: "DeleteOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeregisterDBProxyTargetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeregisterDBProxyTargetsRequest(input, context),
        Action: "DeregisterDBProxyTargets",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeAccountAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeAccountAttributesMessage(input, context),
        Action: "DescribeAccountAttributes",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeBlueGreenDeploymentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeBlueGreenDeploymentsRequest(input, context),
        Action: "DescribeBlueGreenDeployments",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeCertificatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeCertificatesMessage(input, context),
        Action: "DescribeCertificates",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBClusterBacktracksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBClusterBacktracksMessage(input, context),
        Action: "DescribeDBClusterBacktracks",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBClusterEndpointsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBClusterEndpointsMessage(input, context),
        Action: "DescribeDBClusterEndpoints",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBClusterParameterGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBClusterParameterGroupsMessage(input, context),
        Action: "DescribeDBClusterParameterGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBClusterParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBClusterParametersMessage(input, context),
        Action: "DescribeDBClusterParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBClustersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBClustersMessage(input, context),
        Action: "DescribeDBClusters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBClusterSnapshotAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBClusterSnapshotAttributesMessage(input, context),
        Action: "DescribeDBClusterSnapshotAttributes",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBClusterSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBClusterSnapshotsMessage(input, context),
        Action: "DescribeDBClusterSnapshots",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBEngineVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBEngineVersionsMessage(input, context),
        Action: "DescribeDBEngineVersions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBInstanceAutomatedBackupsMessage(input, context),
        Action: "DescribeDBInstanceAutomatedBackups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBInstancesMessage(input, context),
        Action: "DescribeDBInstances",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBLogFilesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBLogFilesMessage(input, context),
        Action: "DescribeDBLogFiles",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBParameterGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBParameterGroupsMessage(input, context),
        Action: "DescribeDBParameterGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBParametersMessage(input, context),
        Action: "DescribeDBParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBProxiesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBProxiesRequest(input, context),
        Action: "DescribeDBProxies",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBProxyEndpointsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBProxyEndpointsRequest(input, context),
        Action: "DescribeDBProxyEndpoints",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBProxyTargetGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBProxyTargetGroupsRequest(input, context),
        Action: "DescribeDBProxyTargetGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBProxyTargetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBProxyTargetsRequest(input, context),
        Action: "DescribeDBProxyTargets",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBSecurityGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBSecurityGroupsMessage(input, context),
        Action: "DescribeDBSecurityGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBSnapshotAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBSnapshotAttributesMessage(input, context),
        Action: "DescribeDBSnapshotAttributes",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBSnapshotsMessage(input, context),
        Action: "DescribeDBSnapshots",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeDBSubnetGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeDBSubnetGroupsMessage(input, context),
        Action: "DescribeDBSubnetGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeEngineDefaultClusterParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEngineDefaultClusterParametersMessage(input, context),
        Action: "DescribeEngineDefaultClusterParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeEngineDefaultParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEngineDefaultParametersMessage(input, context),
        Action: "DescribeEngineDefaultParameters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeEventCategoriesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEventCategoriesMessage(input, context),
        Action: "DescribeEventCategories",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeEventsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEventsMessage(input, context),
        Action: "DescribeEvents",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeEventSubscriptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEventSubscriptionsMessage(input, context),
        Action: "DescribeEventSubscriptions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeExportTasksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeExportTasksMessage(input, context),
        Action: "DescribeExportTasks",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeGlobalClustersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeGlobalClustersMessage(input, context),
        Action: "DescribeGlobalClusters",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeOptionGroupOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeOptionGroupOptionsMessage(input, context),
        Action: "DescribeOptionGroupOptions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeOptionGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeOptionGroupsMessage(input, context),
        Action: "DescribeOptionGroups",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeOrderableDBInstanceOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeOrderableDBInstanceOptionsMessage(input, context),
        Action: "DescribeOrderableDBInstanceOptions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribePendingMaintenanceActionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribePendingMaintenanceActionsMessage(input, context),
        Action: "DescribePendingMaintenanceActions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeReservedDBInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeReservedDBInstancesMessage(input, context),
        Action: "DescribeReservedDBInstances",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeReservedDBInstancesOfferingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeReservedDBInstancesOfferingsMessage(input, context),
        Action: "DescribeReservedDBInstancesOfferings",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeSourceRegionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeSourceRegionsMessage(input, context),
        Action: "DescribeSourceRegions",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeValidDBInstanceModificationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeValidDBInstanceModificationsMessage(input, context),
        Action: "DescribeValidDBInstanceModifications",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDownloadDBLogFilePortionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDownloadDBLogFilePortionMessage(input, context),
        Action: "DownloadDBLogFilePortion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryFailoverDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryFailoverDBClusterMessage(input, context),
        Action: "FailoverDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryFailoverGlobalClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryFailoverGlobalClusterMessage(input, context),
        Action: "FailoverGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListTagsForResourceMessage(input, context),
        Action: "ListTagsForResource",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyActivityStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyActivityStreamRequest(input, context),
        Action: "ModifyActivityStream",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyCertificatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyCertificatesMessage(input, context),
        Action: "ModifyCertificates",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyCurrentDBClusterCapacityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyCurrentDBClusterCapacityMessage(input, context),
        Action: "ModifyCurrentDBClusterCapacity",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyCustomDBEngineVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyCustomDBEngineVersionMessage(input, context),
        Action: "ModifyCustomDBEngineVersion",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBClusterMessage(input, context),
        Action: "ModifyDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBClusterEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBClusterEndpointMessage(input, context),
        Action: "ModifyDBClusterEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBClusterParameterGroupMessage(input, context),
        Action: "ModifyDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBClusterSnapshotAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBClusterSnapshotAttributeMessage(input, context),
        Action: "ModifyDBClusterSnapshotAttribute",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBInstanceMessage(input, context),
        Action: "ModifyDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBParameterGroupMessage(input, context),
        Action: "ModifyDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBProxyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBProxyRequest(input, context),
        Action: "ModifyDBProxy",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBProxyEndpointCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBProxyEndpointRequest(input, context),
        Action: "ModifyDBProxyEndpoint",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBProxyTargetGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBProxyTargetGroupRequest(input, context),
        Action: "ModifyDBProxyTargetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBSnapshotMessage(input, context),
        Action: "ModifyDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBSnapshotAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBSnapshotAttributeMessage(input, context),
        Action: "ModifyDBSnapshotAttribute",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyDBSubnetGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyDBSubnetGroupMessage(input, context),
        Action: "ModifyDBSubnetGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyEventSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyEventSubscriptionMessage(input, context),
        Action: "ModifyEventSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyGlobalClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyGlobalClusterMessage(input, context),
        Action: "ModifyGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryModifyOptionGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryModifyOptionGroupMessage(input, context),
        Action: "ModifyOptionGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryPromoteReadReplicaCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPromoteReadReplicaMessage(input, context),
        Action: "PromoteReadReplica",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryPromoteReadReplicaDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPromoteReadReplicaDBClusterMessage(input, context),
        Action: "PromoteReadReplicaDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryPurchaseReservedDBInstancesOfferingCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPurchaseReservedDBInstancesOfferingMessage(input, context),
        Action: "PurchaseReservedDBInstancesOffering",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRebootDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRebootDBClusterMessage(input, context),
        Action: "RebootDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRebootDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRebootDBInstanceMessage(input, context),
        Action: "RebootDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRegisterDBProxyTargetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRegisterDBProxyTargetsRequest(input, context),
        Action: "RegisterDBProxyTargets",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRemoveFromGlobalClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveFromGlobalClusterMessage(input, context),
        Action: "RemoveFromGlobalCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRemoveRoleFromDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveRoleFromDBClusterMessage(input, context),
        Action: "RemoveRoleFromDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRemoveRoleFromDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveRoleFromDBInstanceMessage(input, context),
        Action: "RemoveRoleFromDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveSourceIdentifierFromSubscriptionMessage(input, context),
        Action: "RemoveSourceIdentifierFromSubscription",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRemoveTagsFromResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRemoveTagsFromResourceMessage(input, context),
        Action: "RemoveTagsFromResource",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryResetDBClusterParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryResetDBClusterParameterGroupMessage(input, context),
        Action: "ResetDBClusterParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryResetDBParameterGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryResetDBParameterGroupMessage(input, context),
        Action: "ResetDBParameterGroup",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRestoreDBClusterFromS3Command = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreDBClusterFromS3Message(input, context),
        Action: "RestoreDBClusterFromS3",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRestoreDBClusterFromSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreDBClusterFromSnapshotMessage(input, context),
        Action: "RestoreDBClusterFromSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRestoreDBClusterToPointInTimeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreDBClusterToPointInTimeMessage(input, context),
        Action: "RestoreDBClusterToPointInTime",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreDBInstanceFromDBSnapshotMessage(input, context),
        Action: "RestoreDBInstanceFromDBSnapshot",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRestoreDBInstanceFromS3Command = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreDBInstanceFromS3Message(input, context),
        Action: "RestoreDBInstanceFromS3",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRestoreDBInstanceToPointInTimeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestoreDBInstanceToPointInTimeMessage(input, context),
        Action: "RestoreDBInstanceToPointInTime",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRevokeDBSecurityGroupIngressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRevokeDBSecurityGroupIngressMessage(input, context),
        Action: "RevokeDBSecurityGroupIngress",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStartActivityStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStartActivityStreamRequest(input, context),
        Action: "StartActivityStream",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStartDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStartDBClusterMessage(input, context),
        Action: "StartDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStartDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStartDBInstanceMessage(input, context),
        Action: "StartDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStartDBInstanceAutomatedBackupsReplicationMessage(input, context),
        Action: "StartDBInstanceAutomatedBackupsReplication",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStartExportTaskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStartExportTaskMessage(input, context),
        Action: "StartExportTask",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStopActivityStreamCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStopActivityStreamRequest(input, context),
        Action: "StopActivityStream",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStopDBClusterCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStopDBClusterMessage(input, context),
        Action: "StopDBCluster",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStopDBInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStopDBInstanceMessage(input, context),
        Action: "StopDBInstance",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStopDBInstanceAutomatedBackupsReplicationMessage(input, context),
        Action: "StopDBInstanceAutomatedBackupsReplication",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySwitchoverBlueGreenDeploymentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySwitchoverBlueGreenDeploymentRequest(input, context),
        Action: "SwitchoverBlueGreenDeployment",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySwitchoverReadReplicaCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySwitchoverReadReplicaMessage(input, context),
        Action: "SwitchoverReadReplica",
        Version: "2014-10-31",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_queryAddRoleToDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAddRoleToDBClusterCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryAddRoleToDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterRoleAlreadyExists":
        case "com.amazonaws.rds#DBClusterRoleAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterRoleAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterRoleQuotaExceeded":
        case "com.amazonaws.rds#DBClusterRoleQuotaExceededFault":
            throw await deserializeAws_queryDBClusterRoleQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryAddRoleToDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAddRoleToDBInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryAddRoleToDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceRoleAlreadyExists":
        case "com.amazonaws.rds#DBInstanceRoleAlreadyExistsFault":
            throw await deserializeAws_queryDBInstanceRoleAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceRoleQuotaExceeded":
        case "com.amazonaws.rds#DBInstanceRoleQuotaExceededFault":
            throw await deserializeAws_queryDBInstanceRoleQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryAddSourceIdentifierToSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAddSourceIdentifierToSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAddSourceIdentifierToSubscriptionResult(data.AddSourceIdentifierToSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryAddSourceIdentifierToSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "SourceNotFound":
        case "com.amazonaws.rds#SourceNotFoundFault":
            throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryAddTagsToResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAddTagsToResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryAddTagsToResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await deserializeAws_queryBlueGreenDeploymentNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryApplyPendingMaintenanceActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryApplyPendingMaintenanceActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplyPendingMaintenanceActionResult(data.ApplyPendingMaintenanceActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryApplyPendingMaintenanceActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryAuthorizeDBSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAuthorizeDBSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAuthorizeDBSecurityGroupIngressResult(data.AuthorizeDBSecurityGroupIngressResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryAuthorizeDBSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationAlreadyExists":
        case "com.amazonaws.rds#AuthorizationAlreadyExistsFault":
            throw await deserializeAws_queryAuthorizationAlreadyExistsFaultResponse(parsedOutput, context);
        case "AuthorizationQuotaExceeded":
        case "com.amazonaws.rds#AuthorizationQuotaExceededFault":
            throw await deserializeAws_queryAuthorizationQuotaExceededFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryBacktrackDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryBacktrackDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterBacktrack(data.BacktrackDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryBacktrackDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCancelExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCancelExportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryExportTask(data.CancelExportTaskResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCancelExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExportTaskNotFound":
        case "com.amazonaws.rds#ExportTaskNotFoundFault":
            throw await deserializeAws_queryExportTaskNotFoundFaultResponse(parsedOutput, context);
        case "InvalidExportTaskStateFault":
        case "com.amazonaws.rds#InvalidExportTaskStateFault":
            throw await deserializeAws_queryInvalidExportTaskStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCopyDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCopyDBClusterParameterGroupResult(data.CopyDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCopyDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCopyDBClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCopyDBClusterSnapshotResult(data.CopyDBClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCopyDBClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCopyDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCopyDBParameterGroupResult(data.CopyDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCopyDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCopyDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCopyDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCopyDBSnapshotResult(data.CopyDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCopyDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomAvailabilityZoneNotFound":
        case "com.amazonaws.rds#CustomAvailabilityZoneNotFoundFault":
            throw await deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCopyOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCopyOptionGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCopyOptionGroupResult(data.CopyOptionGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCopyOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OptionGroupAlreadyExistsFault":
        case "com.amazonaws.rds#OptionGroupAlreadyExistsFault":
            throw await deserializeAws_queryOptionGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "OptionGroupQuotaExceededFault":
        case "com.amazonaws.rds#OptionGroupQuotaExceededFault":
            throw await deserializeAws_queryOptionGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateBlueGreenDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateBlueGreenDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateBlueGreenDeploymentResponse(data.CreateBlueGreenDeploymentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateBlueGreenDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentAlreadyExistsFault":
        case "com.amazonaws.rds#BlueGreenDeploymentAlreadyExistsFault":
            throw await deserializeAws_queryBlueGreenDeploymentAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "SourceClusterNotSupportedFault":
        case "com.amazonaws.rds#SourceClusterNotSupportedFault":
            throw await deserializeAws_querySourceClusterNotSupportedFaultResponse(parsedOutput, context);
        case "SourceDatabaseNotSupportedFault":
        case "com.amazonaws.rds#SourceDatabaseNotSupportedFault":
            throw await deserializeAws_querySourceDatabaseNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateCustomDBEngineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateCustomDBEngineVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBEngineVersion(data.CreateCustomDBEngineVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateCustomDBEngineVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomDBEngineVersionAlreadyExistsFault":
        case "com.amazonaws.rds#CustomDBEngineVersionAlreadyExistsFault":
            throw await deserializeAws_queryCustomDBEngineVersionAlreadyExistsFaultResponse(parsedOutput, context);
        case "CustomDBEngineVersionQuotaExceededFault":
        case "com.amazonaws.rds#CustomDBEngineVersionQuotaExceededFault":
            throw await deserializeAws_queryCustomDBEngineVersionQuotaExceededFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBClusterResult(data.CreateDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBClusterEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterEndpoint(data.CreateDBClusterEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBClusterEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterEndpointAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterEndpointAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterEndpointQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterEndpointQuotaExceededFault":
            throw await deserializeAws_queryDBClusterEndpointQuotaExceededFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBClusterParameterGroupResult(data.CreateDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBClusterSnapshotResult(data.CreateDBClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBInstanceResult(data.CreateDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBInstanceReadReplicaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBInstanceReadReplicaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBInstanceReadReplicaResult(data.CreateDBInstanceReadReplicaResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBInstanceReadReplicaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotAllowedFault":
        case "com.amazonaws.rds#DBSubnetGroupNotAllowedFault":
            throw await deserializeAws_queryDBSubnetGroupNotAllowedFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupFault":
            throw await deserializeAws_queryInvalidDBSubnetGroupFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBParameterGroupResult(data.CreateDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupAlreadyExists":
        case "com.amazonaws.rds#DBParameterGroupAlreadyExistsFault":
            throw await deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupQuotaExceeded":
        case "com.amazonaws.rds#DBParameterGroupQuotaExceededFault":
            throw await deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBProxyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBProxyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBProxyResponse(data.CreateDBProxyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBProxyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyAlreadyExistsFault":
            throw await deserializeAws_queryDBProxyAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyQuotaExceededFault":
        case "com.amazonaws.rds#DBProxyQuotaExceededFault":
            throw await deserializeAws_queryDBProxyQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBProxyEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBProxyEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBProxyEndpointResponse(data.CreateDBProxyEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBProxyEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault":
            throw await deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyEndpointQuotaExceededFault":
        case "com.amazonaws.rds#DBProxyEndpointQuotaExceededFault":
            throw await deserializeAws_queryDBProxyEndpointQuotaExceededFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBSecurityGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBSecurityGroupResult(data.CreateDBSecurityGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSecurityGroupAlreadyExists":
        case "com.amazonaws.rds#DBSecurityGroupAlreadyExistsFault":
            throw await deserializeAws_queryDBSecurityGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotSupported":
        case "com.amazonaws.rds#DBSecurityGroupNotSupportedFault":
            throw await deserializeAws_queryDBSecurityGroupNotSupportedFaultResponse(parsedOutput, context);
        case "QuotaExceeded.DBSecurityGroup":
        case "com.amazonaws.rds#DBSecurityGroupQuotaExceededFault":
            throw await deserializeAws_queryDBSecurityGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBSnapshotResult(data.CreateDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateDBSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateDBSubnetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateDBSubnetGroupResult(data.CreateDBSubnetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateDBSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupAlreadyExists":
        case "com.amazonaws.rds#DBSubnetGroupAlreadyExistsFault":
            throw await deserializeAws_queryDBSubnetGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupQuotaExceeded":
        case "com.amazonaws.rds#DBSubnetGroupQuotaExceededFault":
            throw await deserializeAws_queryDBSubnetGroupQuotaExceededFaultResponse(parsedOutput, context);
        case "DBSubnetQuotaExceededFault":
        case "com.amazonaws.rds#DBSubnetQuotaExceededFault":
            throw await deserializeAws_queryDBSubnetQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateEventSubscriptionResult(data.CreateEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EventSubscriptionQuotaExceeded":
        case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault":
            throw await deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse(parsedOutput, context);
        case "SNSInvalidTopic":
        case "com.amazonaws.rds#SNSInvalidTopicFault":
            throw await deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context);
        case "SNSNoAuthorization":
        case "com.amazonaws.rds#SNSNoAuthorizationFault":
            throw await deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context);
        case "SNSTopicArnNotFound":
        case "com.amazonaws.rds#SNSTopicArnNotFoundFault":
            throw await deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context);
        case "SourceNotFound":
        case "com.amazonaws.rds#SourceNotFoundFault":
            throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionAlreadyExist":
        case "com.amazonaws.rds#SubscriptionAlreadyExistFault":
            throw await deserializeAws_querySubscriptionAlreadyExistFaultResponse(parsedOutput, context);
        case "SubscriptionCategoryNotFound":
        case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault":
            throw await deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateGlobalClusterResult(data.CreateGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterAlreadyExistsFault":
        case "com.amazonaws.rds#GlobalClusterAlreadyExistsFault":
            throw await deserializeAws_queryGlobalClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "GlobalClusterQuotaExceededFault":
        case "com.amazonaws.rds#GlobalClusterQuotaExceededFault":
            throw await deserializeAws_queryGlobalClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateOptionGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateOptionGroupResult(data.CreateOptionGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OptionGroupAlreadyExistsFault":
        case "com.amazonaws.rds#OptionGroupAlreadyExistsFault":
            throw await deserializeAws_queryOptionGroupAlreadyExistsFaultResponse(parsedOutput, context);
        case "OptionGroupQuotaExceededFault":
        case "com.amazonaws.rds#OptionGroupQuotaExceededFault":
            throw await deserializeAws_queryOptionGroupQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteBlueGreenDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteBlueGreenDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteBlueGreenDeploymentResponse(data.DeleteBlueGreenDeploymentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteBlueGreenDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await deserializeAws_queryBlueGreenDeploymentNotFoundFaultResponse(parsedOutput, context);
        case "InvalidBlueGreenDeploymentStateFault":
        case "com.amazonaws.rds#InvalidBlueGreenDeploymentStateFault":
            throw await deserializeAws_queryInvalidBlueGreenDeploymentStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteCustomDBEngineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteCustomDBEngineVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBEngineVersion(data.DeleteCustomDBEngineVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteCustomDBEngineVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomDBEngineVersionNotFoundFault":
        case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault":
            throw await deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse(parsedOutput, context);
        case "InvalidCustomDBEngineVersionStateFault":
        case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault":
            throw await deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteDBClusterResult(data.DeleteDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBClusterEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterEndpoint(data.DeleteDBClusterEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBClusterEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterEndpointNotFoundFault":
        case "com.amazonaws.rds#DBClusterEndpointNotFoundFault":
            throw await deserializeAws_queryDBClusterEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault":
            throw await deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterParameterGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBClusterSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBClusterSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteDBClusterSnapshotResult(data.DeleteDBClusterSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBClusterSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteDBInstanceResult(data.DeleteDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupQuotaExceeded":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault":
            throw await deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBInstanceAutomatedBackupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBInstanceAutomatedBackupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteDBInstanceAutomatedBackupResult(data.DeleteDBInstanceAutomatedBackupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBInstanceAutomatedBackupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupNotFound":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
            throw await deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceAutomatedBackupState":
        case "com.amazonaws.rds#InvalidDBInstanceAutomatedBackupStateFault":
            throw await deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBParameterGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBProxyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBProxyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteDBProxyResponse(data.DeleteDBProxyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBProxyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBProxyEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBProxyEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteDBProxyEndpointResponse(data.DeleteDBProxyEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBProxyEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
            throw await deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault":
            throw await deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBSecurityGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBSecurityGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteDBSnapshotResult(data.DeleteDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteDBSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteDBSubnetGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteDBSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetStateFault":
            throw await deserializeAws_queryInvalidDBSubnetStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteEventSubscriptionResult(data.DeleteEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidEventSubscriptionState":
        case "com.amazonaws.rds#InvalidEventSubscriptionStateFault":
            throw await deserializeAws_queryInvalidEventSubscriptionStateFaultResponse(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteGlobalClusterResult(data.DeleteGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteOptionGroupCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOptionGroupStateFault":
        case "com.amazonaws.rds#InvalidOptionGroupStateFault":
            throw await deserializeAws_queryInvalidOptionGroupStateFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeregisterDBProxyTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeregisterDBProxyTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeregisterDBProxyTargetsResponse(data.DeregisterDBProxyTargetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeregisterDBProxyTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAccountAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryAccountAttributesMessage(data.DescribeAccountAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeAccountAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeBlueGreenDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeBlueGreenDeploymentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeBlueGreenDeploymentsResponse(data.DescribeBlueGreenDeploymentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeBlueGreenDeploymentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await deserializeAws_queryBlueGreenDeploymentNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCertificateMessage(data.DescribeCertificatesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CertificateNotFound":
        case "com.amazonaws.rds#CertificateNotFoundFault":
            throw await deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBClusterBacktracksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterBacktracksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterBacktrackMessage(data.DescribeDBClusterBacktracksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBClusterBacktracksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterBacktrackNotFoundFault":
        case "com.amazonaws.rds#DBClusterBacktrackNotFoundFault":
            throw await deserializeAws_queryDBClusterBacktrackNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBClusterEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterEndpointMessage(data.DescribeDBClusterEndpointsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBClusterEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBClusterParameterGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterParameterGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterParameterGroupsMessage(data.DescribeDBClusterParameterGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBClusterParameterGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBClusterParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterParameterGroupDetails(data.DescribeDBClusterParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBClusterParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClustersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterMessage(data.DescribeDBClustersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBClustersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBClusterSnapshotAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterSnapshotAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDBClusterSnapshotAttributesResult(data.DescribeDBClusterSnapshotAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBClusterSnapshotAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBClusterSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBClusterSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterSnapshotMessage(data.DescribeDBClusterSnapshotsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBClusterSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBEngineVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBEngineVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBEngineVersionMessage(data.DescribeDBEngineVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBEngineVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBInstanceAutomatedBackupMessage(data.DescribeDBInstanceAutomatedBackupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBInstanceAutomatedBackupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupNotFound":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
            throw await deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBInstanceMessage(data.DescribeDBInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBLogFilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBLogFilesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDBLogFilesResponse(data.DescribeDBLogFilesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBLogFilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBParameterGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBParameterGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBParameterGroupsMessage(data.DescribeDBParameterGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBParameterGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBParameterGroupDetails(data.DescribeDBParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBProxiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxiesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDBProxiesResponse(data.DescribeDBProxiesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBProxiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBProxyEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxyEndpointsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDBProxyEndpointsResponse(data.DescribeDBProxyEndpointsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBProxyEndpointsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
            throw await deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBProxyTargetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxyTargetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDBProxyTargetGroupsResponse(data.DescribeDBProxyTargetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBProxyTargetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBProxyTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBProxyTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDBProxyTargetsResponse(data.DescribeDBProxyTargetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBProxyTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSecurityGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBSecurityGroupMessage(data.DescribeDBSecurityGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBSecurityGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBSnapshotAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSnapshotAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeDBSnapshotAttributesResult(data.DescribeDBSnapshotAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBSnapshotAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBSnapshotMessage(data.DescribeDBSnapshotsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeDBSubnetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeDBSubnetGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBSubnetGroupMessage(data.DescribeDBSubnetGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeDBSubnetGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeEngineDefaultClusterParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEngineDefaultClusterParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeEngineDefaultClusterParametersResult(data.DescribeEngineDefaultClusterParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeEngineDefaultClusterParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeEngineDefaultParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEngineDefaultParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeEngineDefaultParametersResult(data.DescribeEngineDefaultParametersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeEngineDefaultParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeEventCategoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventCategoriesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEventCategoriesMessage(data.DescribeEventCategoriesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeEventCategoriesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEventsMessage(data.DescribeEventsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeEventSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventSubscriptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEventSubscriptionsMessage(data.DescribeEventSubscriptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeEventSubscriptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeExportTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeExportTasksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryExportTasksMessage(data.DescribeExportTasksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeExportTasksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExportTaskNotFound":
        case "com.amazonaws.rds#ExportTaskNotFoundFault":
            throw await deserializeAws_queryExportTaskNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeGlobalClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeGlobalClustersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGlobalClustersMessage(data.DescribeGlobalClustersResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeGlobalClustersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeOptionGroupOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeOptionGroupOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryOptionGroupOptionsMessage(data.DescribeOptionGroupOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeOptionGroupOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeOptionGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeOptionGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryOptionGroups(data.DescribeOptionGroupsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeOptionGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeOrderableDBInstanceOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeOrderableDBInstanceOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryOrderableDBInstanceOptionsMessage(data.DescribeOrderableDBInstanceOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeOrderableDBInstanceOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribePendingMaintenanceActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribePendingMaintenanceActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPendingMaintenanceActionsMessage(data.DescribePendingMaintenanceActionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribePendingMaintenanceActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeReservedDBInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReservedDBInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryReservedDBInstanceMessage(data.DescribeReservedDBInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeReservedDBInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedDBInstanceNotFound":
        case "com.amazonaws.rds#ReservedDBInstanceNotFoundFault":
            throw await deserializeAws_queryReservedDBInstanceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeReservedDBInstancesOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeReservedDBInstancesOfferingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryReservedDBInstancesOfferingMessage(data.DescribeReservedDBInstancesOfferingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeReservedDBInstancesOfferingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedDBInstancesOfferingNotFound":
        case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault":
            throw await deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeSourceRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeSourceRegionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySourceRegionMessage(data.DescribeSourceRegionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeSourceRegionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeValidDBInstanceModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeValidDBInstanceModificationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeValidDBInstanceModificationsResult(data.DescribeValidDBInstanceModificationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeValidDBInstanceModificationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDownloadDBLogFilePortionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDownloadDBLogFilePortionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDownloadDBLogFilePortionDetails(data.DownloadDBLogFilePortionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDownloadDBLogFilePortionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBLogFileNotFoundFault":
        case "com.amazonaws.rds#DBLogFileNotFoundFault":
            throw await deserializeAws_queryDBLogFileNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryFailoverDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryFailoverDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryFailoverDBClusterResult(data.FailoverDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryFailoverDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryFailoverGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryFailoverGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryFailoverGlobalClusterResult(data.FailoverGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryFailoverGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryTagListMessage(data.ListTagsForResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await deserializeAws_queryBlueGreenDeploymentNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyActivityStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyActivityStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyActivityStreamResponse(data.ModifyActivityStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyActivityStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyCertificatesResult(data.ModifyCertificatesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CertificateNotFound":
        case "com.amazonaws.rds#CertificateNotFoundFault":
            throw await deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyCurrentDBClusterCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyCurrentDBClusterCapacityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterCapacityInfo(data.ModifyCurrentDBClusterCapacityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyCurrentDBClusterCapacityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterCapacityFault":
        case "com.amazonaws.rds#InvalidDBClusterCapacityFault":
            throw await deserializeAws_queryInvalidDBClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyCustomDBEngineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyCustomDBEngineVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBEngineVersion(data.ModifyCustomDBEngineVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyCustomDBEngineVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CustomDBEngineVersionNotFoundFault":
        case "com.amazonaws.rds#CustomDBEngineVersionNotFoundFault":
            throw await deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse(parsedOutput, context);
        case "InvalidCustomDBEngineVersionStateFault":
        case "com.amazonaws.rds#InvalidCustomDBEngineVersionStateFault":
            throw await deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBClusterResult(data.ModifyDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBClusterEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterEndpoint(data.ModifyDBClusterEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBClusterEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterEndpointNotFoundFault":
        case "com.amazonaws.rds#DBClusterEndpointNotFoundFault":
            throw await deserializeAws_queryDBClusterEndpointNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBClusterEndpointStateFault":
            throw await deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterParameterGroupNameMessage(data.ModifyDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBClusterSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBClusterSnapshotAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBClusterSnapshotAttributeResult(data.ModifyDBClusterSnapshotAttributeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBClusterSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "SharedSnapshotQuotaExceeded":
        case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault":
            throw await deserializeAws_querySharedSnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBInstanceResult(data.ModifyDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "CertificateNotFound":
        case "com.amazonaws.rds#CertificateNotFoundFault":
            throw await deserializeAws_queryCertificateNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBUpgradeDependencyFailure":
        case "com.amazonaws.rds#DBUpgradeDependencyFailureFault":
            throw await deserializeAws_queryDBUpgradeDependencyFailureFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBParameterGroupNameMessage(data.ModifyDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBProxyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBProxyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBProxyResponse(data.ModifyDBProxyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBProxyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyAlreadyExistsFault":
            throw await deserializeAws_queryDBProxyAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBProxyEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBProxyEndpointCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBProxyEndpointResponse(data.ModifyDBProxyEndpointResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBProxyEndpointCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyEndpointAlreadyExistsFault":
        case "com.amazonaws.rds#DBProxyEndpointAlreadyExistsFault":
            throw await deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBProxyEndpointNotFoundFault":
        case "com.amazonaws.rds#DBProxyEndpointNotFoundFault":
            throw await deserializeAws_queryDBProxyEndpointNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyEndpointStateFault":
        case "com.amazonaws.rds#InvalidDBProxyEndpointStateFault":
            throw await deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBProxyTargetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBProxyTargetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBProxyTargetGroupResponse(data.ModifyDBProxyTargetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBProxyTargetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBSnapshotResult(data.ModifyDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBSnapshotAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBSnapshotAttributeResult(data.ModifyDBSnapshotAttributeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBSnapshotAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "SharedSnapshotQuotaExceeded":
        case "com.amazonaws.rds#SharedSnapshotQuotaExceededFault":
            throw await deserializeAws_querySharedSnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyDBSubnetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyDBSubnetGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyDBSubnetGroupResult(data.ModifyDBSubnetGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyDBSubnetGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetQuotaExceededFault":
        case "com.amazonaws.rds#DBSubnetQuotaExceededFault":
            throw await deserializeAws_queryDBSubnetQuotaExceededFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "SubnetAlreadyInUse":
        case "com.amazonaws.rds#SubnetAlreadyInUse":
            throw await deserializeAws_querySubnetAlreadyInUseResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyEventSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyEventSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyEventSubscriptionResult(data.ModifyEventSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyEventSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EventSubscriptionQuotaExceeded":
        case "com.amazonaws.rds#EventSubscriptionQuotaExceededFault":
            throw await deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse(parsedOutput, context);
        case "SNSInvalidTopic":
        case "com.amazonaws.rds#SNSInvalidTopicFault":
            throw await deserializeAws_querySNSInvalidTopicFaultResponse(parsedOutput, context);
        case "SNSNoAuthorization":
        case "com.amazonaws.rds#SNSNoAuthorizationFault":
            throw await deserializeAws_querySNSNoAuthorizationFaultResponse(parsedOutput, context);
        case "SNSTopicArnNotFound":
        case "com.amazonaws.rds#SNSTopicArnNotFoundFault":
            throw await deserializeAws_querySNSTopicArnNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionCategoryNotFound":
        case "com.amazonaws.rds#SubscriptionCategoryNotFoundFault":
            throw await deserializeAws_querySubscriptionCategoryNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyGlobalClusterResult(data.ModifyGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryModifyOptionGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryModifyOptionGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryModifyOptionGroupResult(data.ModifyOptionGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryModifyOptionGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOptionGroupStateFault":
        case "com.amazonaws.rds#InvalidOptionGroupStateFault":
            throw await deserializeAws_queryInvalidOptionGroupStateFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryPromoteReadReplicaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPromoteReadReplicaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPromoteReadReplicaResult(data.PromoteReadReplicaResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryPromoteReadReplicaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryPromoteReadReplicaDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPromoteReadReplicaDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPromoteReadReplicaDBClusterResult(data.PromoteReadReplicaDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryPromoteReadReplicaDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryPurchaseReservedDBInstancesOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPurchaseReservedDBInstancesOfferingCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPurchaseReservedDBInstancesOfferingResult(data.PurchaseReservedDBInstancesOfferingResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryPurchaseReservedDBInstancesOfferingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ReservedDBInstanceAlreadyExists":
        case "com.amazonaws.rds#ReservedDBInstanceAlreadyExistsFault":
            throw await deserializeAws_queryReservedDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "ReservedDBInstanceQuotaExceeded":
        case "com.amazonaws.rds#ReservedDBInstanceQuotaExceededFault":
            throw await deserializeAws_queryReservedDBInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "ReservedDBInstancesOfferingNotFound":
        case "com.amazonaws.rds#ReservedDBInstancesOfferingNotFoundFault":
            throw await deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRebootDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRebootDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRebootDBClusterResult(data.RebootDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRebootDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRebootDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRebootDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRebootDBInstanceResult(data.RebootDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRebootDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRegisterDBProxyTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRegisterDBProxyTargetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRegisterDBProxyTargetsResponse(data.RegisterDBProxyTargetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRegisterDBProxyTargetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetAlreadyRegisteredFault":
        case "com.amazonaws.rds#DBProxyTargetAlreadyRegisteredFault":
            throw await deserializeAws_queryDBProxyTargetAlreadyRegisteredFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientAvailableIPsInSubnetFault":
        case "com.amazonaws.rds#InsufficientAvailableIPsInSubnetFault":
            throw await deserializeAws_queryInsufficientAvailableIPsInSubnetFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBProxyStateFault":
        case "com.amazonaws.rds#InvalidDBProxyStateFault":
            throw await deserializeAws_queryInvalidDBProxyStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRemoveFromGlobalClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveFromGlobalClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRemoveFromGlobalClusterResult(data.RemoveFromGlobalClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRemoveFromGlobalClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "GlobalClusterNotFoundFault":
        case "com.amazonaws.rds#GlobalClusterNotFoundFault":
            throw await deserializeAws_queryGlobalClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidGlobalClusterStateFault":
        case "com.amazonaws.rds#InvalidGlobalClusterStateFault":
            throw await deserializeAws_queryInvalidGlobalClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRemoveRoleFromDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveRoleFromDBClusterCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRemoveRoleFromDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterRoleNotFound":
        case "com.amazonaws.rds#DBClusterRoleNotFoundFault":
            throw await deserializeAws_queryDBClusterRoleNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRemoveRoleFromDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveRoleFromDBInstanceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRemoveRoleFromDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceRoleNotFound":
        case "com.amazonaws.rds#DBInstanceRoleNotFoundFault":
            throw await deserializeAws_queryDBInstanceRoleNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRemoveSourceIdentifierFromSubscriptionResult(data.RemoveSourceIdentifierFromSubscriptionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRemoveSourceIdentifierFromSubscriptionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "SourceNotFound":
        case "com.amazonaws.rds#SourceNotFoundFault":
            throw await deserializeAws_querySourceNotFoundFaultResponse(parsedOutput, context);
        case "SubscriptionNotFound":
        case "com.amazonaws.rds#SubscriptionNotFoundFault":
            throw await deserializeAws_querySubscriptionNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRemoveTagsFromResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRemoveTagsFromResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRemoveTagsFromResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await deserializeAws_queryBlueGreenDeploymentNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyNotFoundFault":
        case "com.amazonaws.rds#DBProxyNotFoundFault":
            throw await deserializeAws_queryDBProxyNotFoundFaultResponse(parsedOutput, context);
        case "DBProxyTargetGroupNotFoundFault":
        case "com.amazonaws.rds#DBProxyTargetGroupNotFoundFault":
            throw await deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryResetDBClusterParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryResetDBClusterParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBClusterParameterGroupNameMessage(data.ResetDBClusterParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryResetDBClusterParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryResetDBParameterGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryResetDBParameterGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDBParameterGroupNameMessage(data.ResetDBParameterGroupResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryResetDBParameterGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBParameterGroupState":
        case "com.amazonaws.rds#InvalidDBParameterGroupStateFault":
            throw await deserializeAws_queryInvalidDBParameterGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRestoreDBClusterFromS3Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBClusterFromS3CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreDBClusterFromS3Result(data.RestoreDBClusterFromS3Result, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRestoreDBClusterFromS3CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBSubnetGroupStateFault":
        case "com.amazonaws.rds#InvalidDBSubnetGroupStateFault":
            throw await deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
            throw await deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRestoreDBClusterFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBClusterFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreDBClusterFromSnapshotResult(data.RestoreDBClusterFromSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRestoreDBClusterFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientDBClusterCapacityFault":
            throw await deserializeAws_queryInsufficientDBClusterCapacityFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRestoreDBClusterToPointInTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBClusterToPointInTimeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreDBClusterToPointInTimeResult(data.RestoreDBClusterToPointInTimeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRestoreDBClusterToPointInTimeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterAlreadyExistsFault":
        case "com.amazonaws.rds#DBClusterAlreadyExistsFault":
            throw await deserializeAws_queryDBClusterAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterParameterGroupNotFound":
        case "com.amazonaws.rds#DBClusterParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterQuotaExceededFault":
        case "com.amazonaws.rds#DBClusterQuotaExceededFault":
            throw await deserializeAws_queryDBClusterQuotaExceededFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBClusterCapacityFault":
        case "com.amazonaws.rds#InsufficientDBClusterCapacityFault":
            throw await deserializeAws_queryInsufficientDBClusterCapacityFaultResponse(parsedOutput, context);
        case "InsufficientStorageClusterCapacity":
        case "com.amazonaws.rds#InsufficientStorageClusterCapacityFault":
            throw await deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterSnapshotStateFault":
        case "com.amazonaws.rds#InvalidDBClusterSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreDBInstanceFromDBSnapshotResult(data.RestoreDBInstanceFromDBSnapshotResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRestoreDBInstanceFromDBSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBSnapshotState":
        case "com.amazonaws.rds#InvalidDBSnapshotStateFault":
            throw await deserializeAws_queryInvalidDBSnapshotStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRestoreDBInstanceFromS3Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBInstanceFromS3CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreDBInstanceFromS3Result(data.RestoreDBInstanceFromS3Result, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRestoreDBInstanceFromS3CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
            throw await deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRestoreDBInstanceToPointInTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestoreDBInstanceToPointInTimeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRestoreDBInstanceToPointInTimeResult(data.RestoreDBInstanceToPointInTimeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRestoreDBInstanceToPointInTimeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "BackupPolicyNotFoundFault":
        case "com.amazonaws.rds#BackupPolicyNotFoundFault":
            throw await deserializeAws_queryBackupPolicyNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceAlreadyExists":
        case "com.amazonaws.rds#DBInstanceAlreadyExistsFault":
            throw await deserializeAws_queryDBInstanceAlreadyExistsFaultResponse(parsedOutput, context);
        case "DBInstanceAutomatedBackupNotFound":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupNotFoundFault":
            throw await deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBParameterGroupNotFound":
        case "com.amazonaws.rds#DBParameterGroupNotFoundFault":
            throw await deserializeAws_queryDBParameterGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "DomainNotFoundFault":
        case "com.amazonaws.rds#DomainNotFoundFault":
            throw await deserializeAws_queryDomainNotFoundFaultResponse(parsedOutput, context);
        case "InstanceQuotaExceeded":
        case "com.amazonaws.rds#InstanceQuotaExceededFault":
            throw await deserializeAws_queryInstanceQuotaExceededFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidRestoreFault":
        case "com.amazonaws.rds#InvalidRestoreFault":
            throw await deserializeAws_queryInvalidRestoreFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "NetworkTypeNotSupported":
        case "com.amazonaws.rds#NetworkTypeNotSupported":
            throw await deserializeAws_queryNetworkTypeNotSupportedResponse(parsedOutput, context);
        case "OptionGroupNotFoundFault":
        case "com.amazonaws.rds#OptionGroupNotFoundFault":
            throw await deserializeAws_queryOptionGroupNotFoundFaultResponse(parsedOutput, context);
        case "PointInTimeRestoreNotEnabled":
        case "com.amazonaws.rds#PointInTimeRestoreNotEnabledFault":
            throw await deserializeAws_queryPointInTimeRestoreNotEnabledFaultResponse(parsedOutput, context);
        case "ProvisionedIopsNotAvailableInAZFault":
        case "com.amazonaws.rds#ProvisionedIopsNotAvailableInAZFault":
            throw await deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse(parsedOutput, context);
        case "StorageQuotaExceeded":
        case "com.amazonaws.rds#StorageQuotaExceededFault":
            throw await deserializeAws_queryStorageQuotaExceededFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRevokeDBSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRevokeDBSecurityGroupIngressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRevokeDBSecurityGroupIngressResult(data.RevokeDBSecurityGroupIngressResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRevokeDBSecurityGroupIngressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "DBSecurityGroupNotFound":
        case "com.amazonaws.rds#DBSecurityGroupNotFoundFault":
            throw await deserializeAws_queryDBSecurityGroupNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBSecurityGroupState":
        case "com.amazonaws.rds#InvalidDBSecurityGroupStateFault":
            throw await deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStartActivityStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStartActivityStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStartActivityStreamResponse(data.StartActivityStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStartActivityStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStartDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStartDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStartDBClusterResult(data.StartDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStartDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStartDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStartDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStartDBInstanceResult(data.StartDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStartDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthorizationNotFound":
        case "com.amazonaws.rds#AuthorizationNotFoundFault":
            throw await deserializeAws_queryAuthorizationNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSubnetGroupDoesNotCoverEnoughAZs":
        case "com.amazonaws.rds#DBSubnetGroupDoesNotCoverEnoughAZs":
            throw await deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse(parsedOutput, context);
        case "DBSubnetGroupNotFoundFault":
        case "com.amazonaws.rds#DBSubnetGroupNotFoundFault":
            throw await deserializeAws_queryDBSubnetGroupNotFoundFaultResponse(parsedOutput, context);
        case "InsufficientDBInstanceCapacity":
        case "com.amazonaws.rds#InsufficientDBInstanceCapacityFault":
            throw await deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "InvalidSubnet":
        case "com.amazonaws.rds#InvalidSubnet":
            throw await deserializeAws_queryInvalidSubnetResponse(parsedOutput, context);
        case "InvalidVPCNetworkStateFault":
        case "com.amazonaws.rds#InvalidVPCNetworkStateFault":
            throw await deserializeAws_queryInvalidVPCNetworkStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationResult(data.StartDBInstanceAutomatedBackupsReplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceAutomatedBackupQuotaExceeded":
        case "com.amazonaws.rds#DBInstanceAutomatedBackupQuotaExceededFault":
            throw await deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        case "StorageTypeNotSupported":
        case "com.amazonaws.rds#StorageTypeNotSupportedFault":
            throw await deserializeAws_queryStorageTypeNotSupportedFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStartExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStartExportTaskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryExportTask(data.StartExportTaskResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStartExportTaskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBClusterSnapshotNotFoundFault":
        case "com.amazonaws.rds#DBClusterSnapshotNotFoundFault":
            throw await deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotNotFound":
        case "com.amazonaws.rds#DBSnapshotNotFoundFault":
            throw await deserializeAws_queryDBSnapshotNotFoundFaultResponse(parsedOutput, context);
        case "ExportTaskAlreadyExists":
        case "com.amazonaws.rds#ExportTaskAlreadyExistsFault":
            throw await deserializeAws_queryExportTaskAlreadyExistsFaultResponse(parsedOutput, context);
        case "IamRoleMissingPermissions":
        case "com.amazonaws.rds#IamRoleMissingPermissionsFault":
            throw await deserializeAws_queryIamRoleMissingPermissionsFaultResponse(parsedOutput, context);
        case "IamRoleNotFound":
        case "com.amazonaws.rds#IamRoleNotFoundFault":
            throw await deserializeAws_queryIamRoleNotFoundFaultResponse(parsedOutput, context);
        case "InvalidExportOnly":
        case "com.amazonaws.rds#InvalidExportOnlyFault":
            throw await deserializeAws_queryInvalidExportOnlyFaultResponse(parsedOutput, context);
        case "InvalidExportSourceState":
        case "com.amazonaws.rds#InvalidExportSourceStateFault":
            throw await deserializeAws_queryInvalidExportSourceStateFaultResponse(parsedOutput, context);
        case "InvalidS3BucketFault":
        case "com.amazonaws.rds#InvalidS3BucketFault":
            throw await deserializeAws_queryInvalidS3BucketFaultResponse(parsedOutput, context);
        case "KMSKeyNotAccessibleFault":
        case "com.amazonaws.rds#KMSKeyNotAccessibleFault":
            throw await deserializeAws_queryKMSKeyNotAccessibleFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStopActivityStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStopActivityStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStopActivityStreamResponse(data.StopActivityStreamResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStopActivityStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "ResourceNotFoundFault":
        case "com.amazonaws.rds#ResourceNotFoundFault":
            throw await deserializeAws_queryResourceNotFoundFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStopDBClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStopDBClusterCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStopDBClusterResult(data.StopDBClusterResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStopDBClusterCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBClusterNotFoundFault":
        case "com.amazonaws.rds#DBClusterNotFoundFault":
            throw await deserializeAws_queryDBClusterNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStopDBInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStopDBInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStopDBInstanceResult(data.StopDBInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStopDBInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "DBSnapshotAlreadyExists":
        case "com.amazonaws.rds#DBSnapshotAlreadyExistsFault":
            throw await deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse(parsedOutput, context);
        case "InvalidDBClusterStateFault":
        case "com.amazonaws.rds#InvalidDBClusterStateFault":
            throw await deserializeAws_queryInvalidDBClusterStateFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        case "SnapshotQuotaExceeded":
        case "com.amazonaws.rds#SnapshotQuotaExceededFault":
            throw await deserializeAws_querySnapshotQuotaExceededFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationResult(data.StopDBInstanceAutomatedBackupsReplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySwitchoverBlueGreenDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySwitchoverBlueGreenDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySwitchoverBlueGreenDeploymentResponse(data.SwitchoverBlueGreenDeploymentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySwitchoverBlueGreenDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BlueGreenDeploymentNotFoundFault":
        case "com.amazonaws.rds#BlueGreenDeploymentNotFoundFault":
            throw await deserializeAws_queryBlueGreenDeploymentNotFoundFaultResponse(parsedOutput, context);
        case "InvalidBlueGreenDeploymentStateFault":
        case "com.amazonaws.rds#InvalidBlueGreenDeploymentStateFault":
            throw await deserializeAws_queryInvalidBlueGreenDeploymentStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySwitchoverReadReplicaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySwitchoverReadReplicaCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySwitchoverReadReplicaResult(data.SwitchoverReadReplicaResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySwitchoverReadReplicaCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DBInstanceNotFound":
        case "com.amazonaws.rds#DBInstanceNotFoundFault":
            throw await deserializeAws_queryDBInstanceNotFoundFaultResponse(parsedOutput, context);
        case "InvalidDBInstanceState":
        case "com.amazonaws.rds#InvalidDBInstanceStateFault":
            throw await deserializeAws_queryInvalidDBInstanceStateFaultResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const deserializeAws_queryAuthorizationAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthorizationAlreadyExistsFault(body.Error, context);
    const exception = new AuthorizationAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryAuthorizationNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthorizationNotFoundFault(body.Error, context);
    const exception = new AuthorizationNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryAuthorizationQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAuthorizationQuotaExceededFault(body.Error, context);
    const exception = new AuthorizationQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryBackupPolicyNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryBackupPolicyNotFoundFault(body.Error, context);
    const exception = new BackupPolicyNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryBlueGreenDeploymentAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryBlueGreenDeploymentAlreadyExistsFault(body.Error, context);
    const exception = new BlueGreenDeploymentAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryBlueGreenDeploymentNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryBlueGreenDeploymentNotFoundFault(body.Error, context);
    const exception = new BlueGreenDeploymentNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCertificateNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCertificateNotFoundFault(body.Error, context);
    const exception = new CertificateNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCustomAvailabilityZoneNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCustomAvailabilityZoneNotFoundFault(body.Error, context);
    const exception = new CustomAvailabilityZoneNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCustomDBEngineVersionAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCustomDBEngineVersionAlreadyExistsFault(body.Error, context);
    const exception = new CustomDBEngineVersionAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCustomDBEngineVersionNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCustomDBEngineVersionNotFoundFault(body.Error, context);
    const exception = new CustomDBEngineVersionNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCustomDBEngineVersionQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCustomDBEngineVersionQuotaExceededFault(body.Error, context);
    const exception = new CustomDBEngineVersionQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterAlreadyExistsFault(body.Error, context);
    const exception = new DBClusterAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterBacktrackNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterBacktrackNotFoundFault(body.Error, context);
    const exception = new DBClusterBacktrackNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterEndpointAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterEndpointAlreadyExistsFault(body.Error, context);
    const exception = new DBClusterEndpointAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterEndpointNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterEndpointNotFoundFault(body.Error, context);
    const exception = new DBClusterEndpointNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterEndpointQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterEndpointQuotaExceededFault(body.Error, context);
    const exception = new DBClusterEndpointQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterNotFoundFault(body.Error, context);
    const exception = new DBClusterNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterParameterGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterParameterGroupNotFoundFault(body.Error, context);
    const exception = new DBClusterParameterGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterQuotaExceededFault(body.Error, context);
    const exception = new DBClusterQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterRoleAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterRoleAlreadyExistsFault(body.Error, context);
    const exception = new DBClusterRoleAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterRoleNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterRoleNotFoundFault(body.Error, context);
    const exception = new DBClusterRoleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterRoleQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterRoleQuotaExceededFault(body.Error, context);
    const exception = new DBClusterRoleQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterSnapshotAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterSnapshotAlreadyExistsFault(body.Error, context);
    const exception = new DBClusterSnapshotAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBClusterSnapshotNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBClusterSnapshotNotFoundFault(body.Error, context);
    const exception = new DBClusterSnapshotNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBInstanceAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBInstanceAlreadyExistsFault(body.Error, context);
    const exception = new DBInstanceAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBInstanceAutomatedBackupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBInstanceAutomatedBackupNotFoundFault(body.Error, context);
    const exception = new DBInstanceAutomatedBackupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFault(body.Error, context);
    const exception = new DBInstanceAutomatedBackupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBInstanceNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBInstanceNotFoundFault(body.Error, context);
    const exception = new DBInstanceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBInstanceRoleAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBInstanceRoleAlreadyExistsFault(body.Error, context);
    const exception = new DBInstanceRoleAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBInstanceRoleNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBInstanceRoleNotFoundFault(body.Error, context);
    const exception = new DBInstanceRoleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBInstanceRoleQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBInstanceRoleQuotaExceededFault(body.Error, context);
    const exception = new DBInstanceRoleQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBLogFileNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBLogFileNotFoundFault(body.Error, context);
    const exception = new DBLogFileNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBParameterGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBParameterGroupAlreadyExistsFault(body.Error, context);
    const exception = new DBParameterGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBParameterGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBParameterGroupNotFoundFault(body.Error, context);
    const exception = new DBParameterGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBParameterGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBParameterGroupQuotaExceededFault(body.Error, context);
    const exception = new DBParameterGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyAlreadyExistsFault(body.Error, context);
    const exception = new DBProxyAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyEndpointAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyEndpointAlreadyExistsFault(body.Error, context);
    const exception = new DBProxyEndpointAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyEndpointNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyEndpointNotFoundFault(body.Error, context);
    const exception = new DBProxyEndpointNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyEndpointQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyEndpointQuotaExceededFault(body.Error, context);
    const exception = new DBProxyEndpointQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyNotFoundFault(body.Error, context);
    const exception = new DBProxyNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyQuotaExceededFault(body.Error, context);
    const exception = new DBProxyQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyTargetAlreadyRegisteredFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyTargetAlreadyRegisteredFault(body.Error, context);
    const exception = new DBProxyTargetAlreadyRegisteredFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyTargetGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyTargetGroupNotFoundFault(body.Error, context);
    const exception = new DBProxyTargetGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBProxyTargetNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBProxyTargetNotFoundFault(body.Error, context);
    const exception = new DBProxyTargetNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSecurityGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSecurityGroupAlreadyExistsFault(body.Error, context);
    const exception = new DBSecurityGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSecurityGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSecurityGroupNotFoundFault(body.Error, context);
    const exception = new DBSecurityGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSecurityGroupNotSupportedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSecurityGroupNotSupportedFault(body.Error, context);
    const exception = new DBSecurityGroupNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSecurityGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSecurityGroupQuotaExceededFault(body.Error, context);
    const exception = new DBSecurityGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSnapshotAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSnapshotAlreadyExistsFault(body.Error, context);
    const exception = new DBSnapshotAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSnapshotNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSnapshotNotFoundFault(body.Error, context);
    const exception = new DBSnapshotNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSubnetGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSubnetGroupAlreadyExistsFault(body.Error, context);
    const exception = new DBSubnetGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZsResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZs(body.Error, context);
    const exception = new DBSubnetGroupDoesNotCoverEnoughAZs({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSubnetGroupNotAllowedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSubnetGroupNotAllowedFault(body.Error, context);
    const exception = new DBSubnetGroupNotAllowedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSubnetGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSubnetGroupNotFoundFault(body.Error, context);
    const exception = new DBSubnetGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSubnetGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSubnetGroupQuotaExceededFault(body.Error, context);
    const exception = new DBSubnetGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBSubnetQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBSubnetQuotaExceededFault(body.Error, context);
    const exception = new DBSubnetQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDBUpgradeDependencyFailureFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDBUpgradeDependencyFailureFault(body.Error, context);
    const exception = new DBUpgradeDependencyFailureFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryDomainNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryDomainNotFoundFault(body.Error, context);
    const exception = new DomainNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryEventSubscriptionQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryEventSubscriptionQuotaExceededFault(body.Error, context);
    const exception = new EventSubscriptionQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryExportTaskAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryExportTaskAlreadyExistsFault(body.Error, context);
    const exception = new ExportTaskAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryExportTaskNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryExportTaskNotFoundFault(body.Error, context);
    const exception = new ExportTaskNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryGlobalClusterAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryGlobalClusterAlreadyExistsFault(body.Error, context);
    const exception = new GlobalClusterAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryGlobalClusterNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryGlobalClusterNotFoundFault(body.Error, context);
    const exception = new GlobalClusterNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryGlobalClusterQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryGlobalClusterQuotaExceededFault(body.Error, context);
    const exception = new GlobalClusterQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryIamRoleMissingPermissionsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryIamRoleMissingPermissionsFault(body.Error, context);
    const exception = new IamRoleMissingPermissionsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryIamRoleNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryIamRoleNotFoundFault(body.Error, context);
    const exception = new IamRoleNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInstanceQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInstanceQuotaExceededFault(body.Error, context);
    const exception = new InstanceQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInsufficientAvailableIPsInSubnetFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientAvailableIPsInSubnetFault(body.Error, context);
    const exception = new InsufficientAvailableIPsInSubnetFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInsufficientDBClusterCapacityFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientDBClusterCapacityFault(body.Error, context);
    const exception = new InsufficientDBClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInsufficientDBInstanceCapacityFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientDBInstanceCapacityFault(body.Error, context);
    const exception = new InsufficientDBInstanceCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInsufficientStorageClusterCapacityFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientStorageClusterCapacityFault(body.Error, context);
    const exception = new InsufficientStorageClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidBlueGreenDeploymentStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidBlueGreenDeploymentStateFault(body.Error, context);
    const exception = new InvalidBlueGreenDeploymentStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidCustomDBEngineVersionStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidCustomDBEngineVersionStateFault(body.Error, context);
    const exception = new InvalidCustomDBEngineVersionStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBClusterCapacityFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBClusterCapacityFault(body.Error, context);
    const exception = new InvalidDBClusterCapacityFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBClusterEndpointStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBClusterEndpointStateFault(body.Error, context);
    const exception = new InvalidDBClusterEndpointStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBClusterSnapshotStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBClusterSnapshotStateFault(body.Error, context);
    const exception = new InvalidDBClusterSnapshotStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBClusterStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBClusterStateFault(body.Error, context);
    const exception = new InvalidDBClusterStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFault(body.Error, context);
    const exception = new InvalidDBInstanceAutomatedBackupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBInstanceStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBInstanceStateFault(body.Error, context);
    const exception = new InvalidDBInstanceStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBParameterGroupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBParameterGroupStateFault(body.Error, context);
    const exception = new InvalidDBParameterGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBProxyEndpointStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBProxyEndpointStateFault(body.Error, context);
    const exception = new InvalidDBProxyEndpointStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBProxyStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBProxyStateFault(body.Error, context);
    const exception = new InvalidDBProxyStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBSecurityGroupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBSecurityGroupStateFault(body.Error, context);
    const exception = new InvalidDBSecurityGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBSnapshotStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBSnapshotStateFault(body.Error, context);
    const exception = new InvalidDBSnapshotStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBSubnetGroupFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBSubnetGroupFault(body.Error, context);
    const exception = new InvalidDBSubnetGroupFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBSubnetGroupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBSubnetGroupStateFault(body.Error, context);
    const exception = new InvalidDBSubnetGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidDBSubnetStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidDBSubnetStateFault(body.Error, context);
    const exception = new InvalidDBSubnetStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidEventSubscriptionStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidEventSubscriptionStateFault(body.Error, context);
    const exception = new InvalidEventSubscriptionStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidExportOnlyFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidExportOnlyFault(body.Error, context);
    const exception = new InvalidExportOnlyFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidExportSourceStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidExportSourceStateFault(body.Error, context);
    const exception = new InvalidExportSourceStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidExportTaskStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidExportTaskStateFault(body.Error, context);
    const exception = new InvalidExportTaskStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidGlobalClusterStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidGlobalClusterStateFault(body.Error, context);
    const exception = new InvalidGlobalClusterStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidOptionGroupStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidOptionGroupStateFault(body.Error, context);
    const exception = new InvalidOptionGroupStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidRestoreFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidRestoreFault(body.Error, context);
    const exception = new InvalidRestoreFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidS3BucketFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidS3BucketFault(body.Error, context);
    const exception = new InvalidS3BucketFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidSubnetResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidSubnet(body.Error, context);
    const exception = new InvalidSubnet({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidVPCNetworkStateFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidVPCNetworkStateFault(body.Error, context);
    const exception = new InvalidVPCNetworkStateFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryKMSKeyNotAccessibleFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryKMSKeyNotAccessibleFault(body.Error, context);
    const exception = new KMSKeyNotAccessibleFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryNetworkTypeNotSupportedResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryNetworkTypeNotSupported(body.Error, context);
    const exception = new NetworkTypeNotSupported({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryOptionGroupAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOptionGroupAlreadyExistsFault(body.Error, context);
    const exception = new OptionGroupAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryOptionGroupNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOptionGroupNotFoundFault(body.Error, context);
    const exception = new OptionGroupNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryOptionGroupQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOptionGroupQuotaExceededFault(body.Error, context);
    const exception = new OptionGroupQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryPointInTimeRestoreNotEnabledFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryPointInTimeRestoreNotEnabledFault(body.Error, context);
    const exception = new PointInTimeRestoreNotEnabledFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryProvisionedIopsNotAvailableInAZFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryProvisionedIopsNotAvailableInAZFault(body.Error, context);
    const exception = new ProvisionedIopsNotAvailableInAZFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryReservedDBInstanceAlreadyExistsFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedDBInstanceAlreadyExistsFault(body.Error, context);
    const exception = new ReservedDBInstanceAlreadyExistsFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryReservedDBInstanceNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedDBInstanceNotFoundFault(body.Error, context);
    const exception = new ReservedDBInstanceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryReservedDBInstanceQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedDBInstanceQuotaExceededFault(body.Error, context);
    const exception = new ReservedDBInstanceQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryReservedDBInstancesOfferingNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryReservedDBInstancesOfferingNotFoundFault(body.Error, context);
    const exception = new ReservedDBInstancesOfferingNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryResourceNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryResourceNotFoundFault(body.Error, context);
    const exception = new ResourceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySharedSnapshotQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySharedSnapshotQuotaExceededFault(body.Error, context);
    const exception = new SharedSnapshotQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySnapshotQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySnapshotQuotaExceededFault(body.Error, context);
    const exception = new SnapshotQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySNSInvalidTopicFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySNSInvalidTopicFault(body.Error, context);
    const exception = new SNSInvalidTopicFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySNSNoAuthorizationFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySNSNoAuthorizationFault(body.Error, context);
    const exception = new SNSNoAuthorizationFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySNSTopicArnNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySNSTopicArnNotFoundFault(body.Error, context);
    const exception = new SNSTopicArnNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySourceClusterNotSupportedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySourceClusterNotSupportedFault(body.Error, context);
    const exception = new SourceClusterNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySourceDatabaseNotSupportedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySourceDatabaseNotSupportedFault(body.Error, context);
    const exception = new SourceDatabaseNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySourceNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySourceNotFoundFault(body.Error, context);
    const exception = new SourceNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryStorageQuotaExceededFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryStorageQuotaExceededFault(body.Error, context);
    const exception = new StorageQuotaExceededFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryStorageTypeNotSupportedFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryStorageTypeNotSupportedFault(body.Error, context);
    const exception = new StorageTypeNotSupportedFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySubnetAlreadyInUseResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubnetAlreadyInUse(body.Error, context);
    const exception = new SubnetAlreadyInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySubscriptionAlreadyExistFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionAlreadyExistFault(body.Error, context);
    const exception = new SubscriptionAlreadyExistFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySubscriptionCategoryNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionCategoryNotFoundFault(body.Error, context);
    const exception = new SubscriptionCategoryNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_querySubscriptionNotFoundFaultResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySubscriptionNotFoundFault(body.Error, context);
    const exception = new SubscriptionNotFoundFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_queryAddRoleToDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const serializeAws_queryAddRoleToDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const serializeAws_queryAddSourceIdentifierToSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    return entries;
};
const serializeAws_queryAddTagsToResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryApplyPendingMaintenanceActionMessage = (input, context) => {
    const entries = {};
    if (input.ResourceIdentifier != null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
    }
    if (input.ApplyAction != null) {
        entries["ApplyAction"] = input.ApplyAction;
    }
    if (input.OptInType != null) {
        entries["OptInType"] = input.OptInType;
    }
    return entries;
};
const serializeAws_queryAttributeValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AttributeValue.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryAuthorizeDBSecurityGroupIngressMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.CIDRIP != null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupId != null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
    }
    if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
const serializeAws_queryAvailabilityZones = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AvailabilityZone.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryBacktrackDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.BacktrackTo != null) {
        entries["BacktrackTo"] = input.BacktrackTo.toISOString().split(".")[0] + "Z";
    }
    if (input.Force != null) {
        entries["Force"] = input.Force;
    }
    if (input.UseEarliestTimeOnPointInTimeUnavailable != null) {
        entries["UseEarliestTimeOnPointInTimeUnavailable"] = input.UseEarliestTimeOnPointInTimeUnavailable;
    }
    return entries;
};
const serializeAws_queryCancelExportTaskMessage = (input, context) => {
    const entries = {};
    if (input.ExportTaskIdentifier != null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    return entries;
};
const serializeAws_queryCloudwatchLogsExportConfiguration = (input, context) => {
    const entries = {};
    if (input.EnableLogTypes != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableLogTypes, context);
        if (input.EnableLogTypes?.length === 0) {
            entries.EnableLogTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableLogTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableLogTypes != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.DisableLogTypes, context);
        if (input.DisableLogTypes?.length === 0) {
            entries.DisableLogTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableLogTypes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryConnectionPoolConfiguration = (input, context) => {
    const entries = {};
    if (input.MaxConnectionsPercent != null) {
        entries["MaxConnectionsPercent"] = input.MaxConnectionsPercent;
    }
    if (input.MaxIdleConnectionsPercent != null) {
        entries["MaxIdleConnectionsPercent"] = input.MaxIdleConnectionsPercent;
    }
    if (input.ConnectionBorrowTimeout != null) {
        entries["ConnectionBorrowTimeout"] = input.ConnectionBorrowTimeout;
    }
    if (input.SessionPinningFilters != null) {
        const memberEntries = serializeAws_queryStringList(input.SessionPinningFilters, context);
        if (input.SessionPinningFilters?.length === 0) {
            entries.SessionPinningFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SessionPinningFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.InitQuery != null) {
        entries["InitQuery"] = input.InitQuery;
    }
    return entries;
};
const serializeAws_queryCopyDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBClusterParameterGroupIdentifier != null) {
        entries["SourceDBClusterParameterGroupIdentifier"] = input.SourceDBClusterParameterGroupIdentifier;
    }
    if (input.TargetDBClusterParameterGroupIdentifier != null) {
        entries["TargetDBClusterParameterGroupIdentifier"] = input.TargetDBClusterParameterGroupIdentifier;
    }
    if (input.TargetDBClusterParameterGroupDescription != null) {
        entries["TargetDBClusterParameterGroupDescription"] = input.TargetDBClusterParameterGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCopyDBClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBClusterSnapshotIdentifier != null) {
        entries["SourceDBClusterSnapshotIdentifier"] = input.SourceDBClusterSnapshotIdentifier;
    }
    if (input.TargetDBClusterSnapshotIdentifier != null) {
        entries["TargetDBClusterSnapshotIdentifier"] = input.TargetDBClusterSnapshotIdentifier;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.CopyTags != null) {
        entries["CopyTags"] = input.CopyTags;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCopyDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBParameterGroupIdentifier != null) {
        entries["SourceDBParameterGroupIdentifier"] = input.SourceDBParameterGroupIdentifier;
    }
    if (input.TargetDBParameterGroupIdentifier != null) {
        entries["TargetDBParameterGroupIdentifier"] = input.TargetDBParameterGroupIdentifier;
    }
    if (input.TargetDBParameterGroupDescription != null) {
        entries["TargetDBParameterGroupDescription"] = input.TargetDBParameterGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCopyDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBSnapshotIdentifier != null) {
        entries["SourceDBSnapshotIdentifier"] = input.SourceDBSnapshotIdentifier;
    }
    if (input.TargetDBSnapshotIdentifier != null) {
        entries["TargetDBSnapshotIdentifier"] = input.TargetDBSnapshotIdentifier;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CopyTags != null) {
        entries["CopyTags"] = input.CopyTags;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.TargetCustomAvailabilityZone != null) {
        entries["TargetCustomAvailabilityZone"] = input.TargetCustomAvailabilityZone;
    }
    if (input.CopyOptionGroup != null) {
        entries["CopyOptionGroup"] = input.CopyOptionGroup;
    }
    return entries;
};
const serializeAws_queryCopyOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.SourceOptionGroupIdentifier != null) {
        entries["SourceOptionGroupIdentifier"] = input.SourceOptionGroupIdentifier;
    }
    if (input.TargetOptionGroupIdentifier != null) {
        entries["TargetOptionGroupIdentifier"] = input.TargetOptionGroupIdentifier;
    }
    if (input.TargetOptionGroupDescription != null) {
        entries["TargetOptionGroupDescription"] = input.TargetOptionGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateBlueGreenDeploymentRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentName != null) {
        entries["BlueGreenDeploymentName"] = input.BlueGreenDeploymentName;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.TargetEngineVersion != null) {
        entries["TargetEngineVersion"] = input.TargetEngineVersion;
    }
    if (input.TargetDBParameterGroupName != null) {
        entries["TargetDBParameterGroupName"] = input.TargetDBParameterGroupName;
    }
    if (input.TargetDBClusterParameterGroupName != null) {
        entries["TargetDBClusterParameterGroupName"] = input.TargetDBClusterParameterGroupName;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateCustomDBEngineVersionMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DatabaseInstallationFilesS3BucketName != null) {
        entries["DatabaseInstallationFilesS3BucketName"] = input.DatabaseInstallationFilesS3BucketName;
    }
    if (input.DatabaseInstallationFilesS3Prefix != null) {
        entries["DatabaseInstallationFilesS3Prefix"] = input.DatabaseInstallationFilesS3Prefix;
    }
    if (input.KMSKeyId != null) {
        entries["KMSKeyId"] = input.KMSKeyId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Manifest != null) {
        entries["Manifest"] = input.Manifest;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBClusterEndpointMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.EndpointType != null) {
        entries["EndpointType"] = input.EndpointType;
    }
    if (input.StaticMembers != null) {
        const memberEntries = serializeAws_queryStringList(input.StaticMembers, context);
        if (input.StaticMembers?.length === 0) {
            entries.StaticMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StaticMembers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedMembers != null) {
        const memberEntries = serializeAws_queryStringList(input.ExcludedMembers, context);
        if (input.ExcludedMembers?.length === 0) {
            entries.ExcludedMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedMembers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.CharacterSetName != null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.ReplicationSourceIdentifier != null) {
        entries["ReplicationSourceIdentifier"] = input.ReplicationSourceIdentifier;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineMode != null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.EnableHttpEndpoint != null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableGlobalWriteForwarding != null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.DBSystemId != null) {
        entries["DBSystemId"] = input.DBSystemId;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const serializeAws_queryCreateDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBSecurityGroups != null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        if (input.DBSecurityGroups?.length === 0) {
            entries.DBSecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.CharacterSetName != null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.NcharCharacterSetName != null) {
        entries["NcharCharacterSetName"] = input.NcharCharacterSetName;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.PromotionTier != null) {
        entries["PromotionTier"] = input.PromotionTier;
    }
    if (input.Timezone != null) {
        entries["Timezone"] = input.Timezone;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget != null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const serializeAws_queryCreateDBInstanceReadReplicaMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.SourceDBInstanceIdentifier != null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ReplicaMode != null) {
        entries["ReplicaMode"] = input.ReplicaMode;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    return entries;
};
const serializeAws_queryCreateDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBProxyEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.VpcSubnetIds != null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSubnetIds, context);
        if (input.VpcSubnetIds?.length === 0) {
            entries.VpcSubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TargetRole != null) {
        entries["TargetRole"] = input.TargetRole;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBProxyRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.EngineFamily != null) {
        entries["EngineFamily"] = input.EngineFamily;
    }
    if (input.Auth != null) {
        const memberEntries = serializeAws_queryUserAuthConfigList(input.Auth, context);
        if (input.Auth?.length === 0) {
            entries.Auth = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Auth.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.VpcSubnetIds != null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSubnetIds, context);
        if (input.VpcSubnetIds?.length === 0) {
            entries.VpcSubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RequireTLS != null) {
        entries["RequireTLS"] = input.RequireTLS;
    }
    if (input.IdleClientTimeout != null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
    }
    if (input.DebugLogging != null) {
        entries["DebugLogging"] = input.DebugLogging;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBSecurityGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.DBSecurityGroupDescription != null) {
        entries["DBSecurityGroupDescription"] = input.DBSecurityGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateDBSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSubnetGroupDescription != null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
    }
    if (input.SubnetIds != null) {
        const memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn != null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.EventCategories != null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        if (input.EventCategories?.length === 0) {
            entries.EventCategories = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourceIds != null) {
        const memberEntries = serializeAws_querySourceIdsList(input.SourceIds, context);
        if (input.SourceIds?.length === 0) {
            entries.SourceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.SourceDBClusterIdentifier != null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    return entries;
};
const serializeAws_queryCreateOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.EngineName != null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion != null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    if (input.OptionGroupDescription != null) {
        entries["OptionGroupDescription"] = input.OptionGroupDescription;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDBSecurityGroupNameList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`DBSecurityGroupName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryDeleteBlueGreenDeploymentRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentIdentifier != null) {
        entries["BlueGreenDeploymentIdentifier"] = input.BlueGreenDeploymentIdentifier;
    }
    if (input.DeleteTarget != null) {
        entries["DeleteTarget"] = input.DeleteTarget;
    }
    return entries;
};
const serializeAws_queryDeleteCustomDBEngineVersionMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    return entries;
};
const serializeAws_queryDeleteDBClusterEndpointMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.SkipFinalSnapshot != null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
    }
    if (input.FinalDBSnapshotIdentifier != null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteDBClusterSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteDBInstanceAutomatedBackupMessage = (input, context) => {
    const entries = {};
    if (input.DbiResourceId != null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    if (input.DBInstanceAutomatedBackupsArn != null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
    }
    return entries;
};
const serializeAws_queryDeleteDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.SkipFinalSnapshot != null) {
        entries["SkipFinalSnapshot"] = input.SkipFinalSnapshot;
    }
    if (input.FinalDBSnapshotIdentifier != null) {
        entries["FinalDBSnapshotIdentifier"] = input.FinalDBSnapshotIdentifier;
    }
    if (input.DeleteAutomatedBackups != null) {
        entries["DeleteAutomatedBackups"] = input.DeleteAutomatedBackups;
    }
    return entries;
};
const serializeAws_queryDeleteDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteDBProxyEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    return entries;
};
const serializeAws_queryDeleteDBProxyRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    return entries;
};
const serializeAws_queryDeleteDBSecurityGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteDBSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    return entries;
};
const serializeAws_queryDeleteEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    return entries;
};
const serializeAws_queryDeleteGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryDeleteOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    return entries;
};
const serializeAws_queryDeregisterDBProxyTargetsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBInstanceIdentifiers != null) {
        const memberEntries = serializeAws_queryStringList(input.DBInstanceIdentifiers, context);
        if (input.DBInstanceIdentifiers?.length === 0) {
            entries.DBInstanceIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBInstanceIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifiers != null) {
        const memberEntries = serializeAws_queryStringList(input.DBClusterIdentifiers, context);
        if (input.DBClusterIdentifiers?.length === 0) {
            entries.DBClusterIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBClusterIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeAccountAttributesMessage = (input, context) => {
    const entries = {};
    return entries;
};
const serializeAws_queryDescribeBlueGreenDeploymentsRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentIdentifier != null) {
        entries["BlueGreenDeploymentIdentifier"] = input.BlueGreenDeploymentIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeCertificatesMessage = (input, context) => {
    const entries = {};
    if (input.CertificateIdentifier != null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBClusterBacktracksMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.BacktrackIdentifier != null) {
        entries["BacktrackIdentifier"] = input.BacktrackIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBClusterEndpointsMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBClusterParameterGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBClusterParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBClustersMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared != null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    return entries;
};
const serializeAws_queryDescribeDBClusterSnapshotAttributesMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    return entries;
};
const serializeAws_queryDescribeDBClusterSnapshotsMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.SnapshotType != null) {
        entries["SnapshotType"] = input.SnapshotType;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared != null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    if (input.IncludePublic != null) {
        entries["IncludePublic"] = input.IncludePublic;
    }
    return entries;
};
const serializeAws_queryDescribeDBEngineVersionsMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.DefaultOnly != null) {
        entries["DefaultOnly"] = input.DefaultOnly;
    }
    if (input.ListSupportedCharacterSets != null) {
        entries["ListSupportedCharacterSets"] = input.ListSupportedCharacterSets;
    }
    if (input.ListSupportedTimezones != null) {
        entries["ListSupportedTimezones"] = input.ListSupportedTimezones;
    }
    if (input.IncludeAll != null) {
        entries["IncludeAll"] = input.IncludeAll;
    }
    return entries;
};
const serializeAws_queryDescribeDBInstanceAutomatedBackupsMessage = (input, context) => {
    const entries = {};
    if (input.DbiResourceId != null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.DBInstanceAutomatedBackupsArn != null) {
        entries["DBInstanceAutomatedBackupsArn"] = input.DBInstanceAutomatedBackupsArn;
    }
    return entries;
};
const serializeAws_queryDescribeDBInstancesMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBLogFilesMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.FilenameContains != null) {
        entries["FilenameContains"] = input.FilenameContains;
    }
    if (input.FileLastWritten != null) {
        entries["FileLastWritten"] = input.FileLastWritten;
    }
    if (input.FileSize != null) {
        entries["FileSize"] = input.FileSize;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBParameterGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBProxiesRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeDBProxyEndpointsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeDBProxyTargetGroupsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeDBProxyTargetsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeDBSecurityGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeDBSnapshotAttributesMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
const serializeAws_queryDescribeDBSnapshotsMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.SnapshotType != null) {
        entries["SnapshotType"] = input.SnapshotType;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.IncludeShared != null) {
        entries["IncludeShared"] = input.IncludeShared;
    }
    if (input.IncludePublic != null) {
        entries["IncludePublic"] = input.IncludePublic;
    }
    if (input.DbiResourceId != null) {
        entries["DbiResourceId"] = input.DbiResourceId;
    }
    return entries;
};
const serializeAws_queryDescribeDBSubnetGroupsMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEngineDefaultClusterParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEngineDefaultParametersMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupFamily != null) {
        entries["DBParameterGroupFamily"] = input.DBParameterGroupFamily;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEventCategoriesMessage = (input, context) => {
    const entries = {};
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeEventsMessage = (input, context) => {
    const entries = {};
    if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.Duration != null) {
        entries["Duration"] = input.Duration;
    }
    if (input.EventCategories != null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        if (input.EventCategories?.length === 0) {
            entries.EventCategories = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeEventSubscriptionsMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeExportTasksMessage = (input, context) => {
    const entries = {};
    if (input.ExportTaskIdentifier != null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    return entries;
};
const serializeAws_queryDescribeGlobalClustersMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeOptionGroupOptionsMessage = (input, context) => {
    const entries = {};
    if (input.EngineName != null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion != null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeOptionGroupsMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.EngineName != null) {
        entries["EngineName"] = input.EngineName;
    }
    if (input.MajorEngineVersion != null) {
        entries["MajorEngineVersion"] = input.MajorEngineVersion;
    }
    return entries;
};
const serializeAws_queryDescribeOrderableDBInstanceOptionsMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.AvailabilityZoneGroup != null) {
        entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
    }
    if (input.Vpc != null) {
        entries["Vpc"] = input.Vpc;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribePendingMaintenanceActionsMessage = (input, context) => {
    const entries = {};
    if (input.ResourceIdentifier != null) {
        entries["ResourceIdentifier"] = input.ResourceIdentifier;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    return entries;
};
const serializeAws_queryDescribeReservedDBInstancesMessage = (input, context) => {
    const entries = {};
    if (input.ReservedDBInstanceId != null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
    }
    if (input.ReservedDBInstancesOfferingId != null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Duration != null) {
        entries["Duration"] = input.Duration;
    }
    if (input.ProductDescription != null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.LeaseId != null) {
        entries["LeaseId"] = input.LeaseId;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeReservedDBInstancesOfferingsMessage = (input, context) => {
    const entries = {};
    if (input.ReservedDBInstancesOfferingId != null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Duration != null) {
        entries["Duration"] = input.Duration;
    }
    if (input.ProductDescription != null) {
        entries["ProductDescription"] = input.ProductDescription;
    }
    if (input.OfferingType != null) {
        entries["OfferingType"] = input.OfferingType;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    return entries;
};
const serializeAws_queryDescribeSourceRegionsMessage = (input, context) => {
    const entries = {};
    if (input.RegionName != null) {
        entries["RegionName"] = input.RegionName;
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeValidDBInstanceModificationsMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
const serializeAws_queryDownloadDBLogFilePortionMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.LogFileName != null) {
        entries["LogFileName"] = input.LogFileName;
    }
    if (input.Marker != null) {
        entries["Marker"] = input.Marker;
    }
    if (input.NumberOfLines != null) {
        entries["NumberOfLines"] = input.NumberOfLines;
    }
    return entries;
};
const serializeAws_queryEngineModeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryEventCategoriesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`EventCategory.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryFailoverDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.TargetDBInstanceIdentifier != null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
    }
    return entries;
};
const serializeAws_queryFailoverGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.TargetDbClusterIdentifier != null) {
        entries["TargetDbClusterIdentifier"] = input.TargetDbClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryFilter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Values != null) {
        const memberEntries = serializeAws_queryFilterValueList(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryFilterList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Filter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryFilterValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Value.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryKeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryListTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryFilterList(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryLogTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryModifyActivityStreamRequest = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.AuditPolicyState != null) {
        entries["AuditPolicyState"] = input.AuditPolicyState;
    }
    return entries;
};
const serializeAws_queryModifyCertificatesMessage = (input, context) => {
    const entries = {};
    if (input.CertificateIdentifier != null) {
        entries["CertificateIdentifier"] = input.CertificateIdentifier;
    }
    if (input.RemoveCustomerOverride != null) {
        entries["RemoveCustomerOverride"] = input.RemoveCustomerOverride;
    }
    return entries;
};
const serializeAws_queryModifyCurrentDBClusterCapacityMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.Capacity != null) {
        entries["Capacity"] = input.Capacity;
    }
    if (input.SecondsBeforeTimeout != null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
    }
    if (input.TimeoutAction != null) {
        entries["TimeoutAction"] = input.TimeoutAction;
    }
    return entries;
};
const serializeAws_queryModifyCustomDBEngineVersionMessage = (input, context) => {
    const entries = {};
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
const serializeAws_queryModifyDBClusterEndpointMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterEndpointIdentifier != null) {
        entries["DBClusterEndpointIdentifier"] = input.DBClusterEndpointIdentifier;
    }
    if (input.EndpointType != null) {
        entries["EndpointType"] = input.EndpointType;
    }
    if (input.StaticMembers != null) {
        const memberEntries = serializeAws_queryStringList(input.StaticMembers, context);
        if (input.StaticMembers?.length === 0) {
            entries.StaticMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StaticMembers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExcludedMembers != null) {
        const memberEntries = serializeAws_queryStringList(input.ExcludedMembers, context);
        if (input.ExcludedMembers?.length === 0) {
            entries.ExcludedMembers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedMembers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.NewDBClusterIdentifier != null) {
        entries["NewDBClusterIdentifier"] = input.NewDBClusterIdentifier;
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.CloudwatchLogsExportConfiguration != null) {
        const memberEntries = serializeAws_queryCloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudwatchLogsExportConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade != null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    if (input.DBInstanceParameterGroupName != null) {
        entries["DBInstanceParameterGroupName"] = input.DBInstanceParameterGroupName;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EnableHttpEndpoint != null) {
        entries["EnableHttpEndpoint"] = input.EnableHttpEndpoint;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.EnableGlobalWriteForwarding != null) {
        entries["EnableGlobalWriteForwarding"] = input.EnableGlobalWriteForwarding;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.RotateMasterUserPassword != null) {
        entries["RotateMasterUserPassword"] = input.RotateMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const serializeAws_queryModifyDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyDBClusterSnapshotAttributeMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    if (input.AttributeName != null) {
        entries["AttributeName"] = input.AttributeName;
    }
    if (input.ValuesToAdd != null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToAdd, context);
        if (input.ValuesToAdd?.length === 0) {
            entries.ValuesToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToAdd.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ValuesToRemove != null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToRemove, context);
        if (input.ValuesToRemove?.length === 0) {
            entries.ValuesToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSecurityGroups != null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        if (input.DBSecurityGroups?.length === 0) {
            entries.DBSecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade != null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.NewDBInstanceIdentifier != null) {
        entries["NewDBInstanceIdentifier"] = input.NewDBInstanceIdentifier;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.CACertificateIdentifier != null) {
        entries["CACertificateIdentifier"] = input.CACertificateIdentifier;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.DBPortNumber != null) {
        entries["DBPortNumber"] = input.DBPortNumber;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.PromotionTier != null) {
        entries["PromotionTier"] = input.PromotionTier;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.CloudwatchLogsExportConfiguration != null) {
        const memberEntries = serializeAws_queryCloudwatchLogsExportConfiguration(input.CloudwatchLogsExportConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudwatchLogsExportConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.CertificateRotationRestart != null) {
        entries["CertificateRotationRestart"] = input.CertificateRotationRestart;
    }
    if (input.ReplicaMode != null) {
        entries["ReplicaMode"] = input.ReplicaMode;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.AwsBackupRecoveryPointArn != null) {
        entries["AwsBackupRecoveryPointArn"] = input.AwsBackupRecoveryPointArn;
    }
    if (input.AutomationMode != null) {
        entries["AutomationMode"] = input.AutomationMode;
    }
    if (input.ResumeFullAutomationModeMinutes != null) {
        entries["ResumeFullAutomationModeMinutes"] = input.ResumeFullAutomationModeMinutes;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.RotateMasterUserPassword != null) {
        entries["RotateMasterUserPassword"] = input.RotateMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const serializeAws_queryModifyDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyDBProxyEndpointRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyEndpointName != null) {
        entries["DBProxyEndpointName"] = input.DBProxyEndpointName;
    }
    if (input.NewDBProxyEndpointName != null) {
        entries["NewDBProxyEndpointName"] = input.NewDBProxyEndpointName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryStringList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyDBProxyRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.NewDBProxyName != null) {
        entries["NewDBProxyName"] = input.NewDBProxyName;
    }
    if (input.Auth != null) {
        const memberEntries = serializeAws_queryUserAuthConfigList(input.Auth, context);
        if (input.Auth?.length === 0) {
            entries.Auth = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Auth.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RequireTLS != null) {
        entries["RequireTLS"] = input.RequireTLS;
    }
    if (input.IdleClientTimeout != null) {
        entries["IdleClientTimeout"] = input.IdleClientTimeout;
    }
    if (input.DebugLogging != null) {
        entries["DebugLogging"] = input.DebugLogging;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.SecurityGroups != null) {
        const memberEntries = serializeAws_queryStringList(input.SecurityGroups, context);
        if (input.SecurityGroups?.length === 0) {
            entries.SecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyDBProxyTargetGroupRequest = (input, context) => {
    const entries = {};
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.ConnectionPoolConfig != null) {
        const memberEntries = serializeAws_queryConnectionPoolConfiguration(input.ConnectionPoolConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionPoolConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NewName != null) {
        entries["NewName"] = input.NewName;
    }
    return entries;
};
const serializeAws_queryModifyDBSnapshotAttributeMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.AttributeName != null) {
        entries["AttributeName"] = input.AttributeName;
    }
    if (input.ValuesToAdd != null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToAdd, context);
        if (input.ValuesToAdd?.length === 0) {
            entries.ValuesToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToAdd.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ValuesToRemove != null) {
        const memberEntries = serializeAws_queryAttributeValueList(input.ValuesToRemove, context);
        if (input.ValuesToRemove?.length === 0) {
            entries.ValuesToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ValuesToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    return entries;
};
const serializeAws_queryModifyDBSubnetGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DBSubnetGroupDescription != null) {
        entries["DBSubnetGroupDescription"] = input.DBSubnetGroupDescription;
    }
    if (input.SubnetIds != null) {
        const memberEntries = serializeAws_querySubnetIdentifierList(input.SubnetIds, context);
        if (input.SubnetIds?.length === 0) {
            entries.SubnetIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryModifyEventSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SnsTopicArn != null) {
        entries["SnsTopicArn"] = input.SnsTopicArn;
    }
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.EventCategories != null) {
        const memberEntries = serializeAws_queryEventCategoriesList(input.EventCategories, context);
        if (input.EventCategories?.length === 0) {
            entries.EventCategories = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EventCategories.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    return entries;
};
const serializeAws_queryModifyGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.NewGlobalClusterIdentifier != null) {
        entries["NewGlobalClusterIdentifier"] = input.NewGlobalClusterIdentifier;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AllowMajorVersionUpgrade != null) {
        entries["AllowMajorVersionUpgrade"] = input.AllowMajorVersionUpgrade;
    }
    return entries;
};
const serializeAws_queryModifyOptionGroupMessage = (input, context) => {
    const entries = {};
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.OptionsToInclude != null) {
        const memberEntries = serializeAws_queryOptionConfigurationList(input.OptionsToInclude, context);
        if (input.OptionsToInclude?.length === 0) {
            entries.OptionsToInclude = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToInclude.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = serializeAws_queryOptionNamesList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    return entries;
};
const serializeAws_queryOptionConfiguration = (input, context) => {
    const entries = {};
    if (input.OptionName != null) {
        entries["OptionName"] = input.OptionName;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.OptionVersion != null) {
        entries["OptionVersion"] = input.OptionVersion;
    }
    if (input.DBSecurityGroupMemberships != null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroupMemberships, context);
        if (input.DBSecurityGroupMemberships?.length === 0) {
            entries.DBSecurityGroupMemberships = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroupMemberships.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupMemberships != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupMemberships, context);
        if (input.VpcSecurityGroupMemberships?.length === 0) {
            entries.VpcSecurityGroupMemberships = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupMemberships.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionSettings != null) {
        const memberEntries = serializeAws_queryOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryOptionConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryOptionConfiguration(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`OptionConfiguration.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryOptionNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryOptionSetting = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    if (input.DefaultValue != null) {
        entries["DefaultValue"] = input.DefaultValue;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ApplyType != null) {
        entries["ApplyType"] = input.ApplyType;
    }
    if (input.DataType != null) {
        entries["DataType"] = input.DataType;
    }
    if (input.AllowedValues != null) {
        entries["AllowedValues"] = input.AllowedValues;
    }
    if (input.IsModifiable != null) {
        entries["IsModifiable"] = input.IsModifiable;
    }
    if (input.IsCollection != null) {
        entries["IsCollection"] = input.IsCollection;
    }
    return entries;
};
const serializeAws_queryOptionSettingsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryOptionSetting(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`OptionSetting.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryParameter = (input, context) => {
    const entries = {};
    if (input.ParameterName != null) {
        entries["ParameterName"] = input.ParameterName;
    }
    if (input.ParameterValue != null) {
        entries["ParameterValue"] = input.ParameterValue;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Source != null) {
        entries["Source"] = input.Source;
    }
    if (input.ApplyType != null) {
        entries["ApplyType"] = input.ApplyType;
    }
    if (input.DataType != null) {
        entries["DataType"] = input.DataType;
    }
    if (input.AllowedValues != null) {
        entries["AllowedValues"] = input.AllowedValues;
    }
    if (input.IsModifiable != null) {
        entries["IsModifiable"] = input.IsModifiable;
    }
    if (input.MinimumEngineVersion != null) {
        entries["MinimumEngineVersion"] = input.MinimumEngineVersion;
    }
    if (input.ApplyMethod != null) {
        entries["ApplyMethod"] = input.ApplyMethod;
    }
    if (input.SupportedEngineModes != null) {
        const memberEntries = serializeAws_queryEngineModeList(input.SupportedEngineModes, context);
        if (input.SupportedEngineModes?.length === 0) {
            entries.SupportedEngineModes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SupportedEngineModes.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryParametersList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryParameter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Parameter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryProcessorFeature = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryProcessorFeatureList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryProcessorFeature(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`ProcessorFeature.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPromoteReadReplicaDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryPromoteReadReplicaMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    return entries;
};
const serializeAws_queryPurchaseReservedDBInstancesOfferingMessage = (input, context) => {
    const entries = {};
    if (input.ReservedDBInstancesOfferingId != null) {
        entries["ReservedDBInstancesOfferingId"] = input.ReservedDBInstancesOfferingId;
    }
    if (input.ReservedDBInstanceId != null) {
        entries["ReservedDBInstanceId"] = input.ReservedDBInstanceId;
    }
    if (input.DBInstanceCount != null) {
        entries["DBInstanceCount"] = input.DBInstanceCount;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryRebootDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryRebootDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.ForceFailover != null) {
        entries["ForceFailover"] = input.ForceFailover;
    }
    return entries;
};
const serializeAws_queryRegisterDBProxyTargetsRequest = (input, context) => {
    const entries = {};
    if (input.DBProxyName != null) {
        entries["DBProxyName"] = input.DBProxyName;
    }
    if (input.TargetGroupName != null) {
        entries["TargetGroupName"] = input.TargetGroupName;
    }
    if (input.DBInstanceIdentifiers != null) {
        const memberEntries = serializeAws_queryStringList(input.DBInstanceIdentifiers, context);
        if (input.DBInstanceIdentifiers?.length === 0) {
            entries.DBInstanceIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBInstanceIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifiers != null) {
        const memberEntries = serializeAws_queryStringList(input.DBClusterIdentifiers, context);
        if (input.DBClusterIdentifiers?.length === 0) {
            entries.DBClusterIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBClusterIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryRemoveFromGlobalClusterMessage = (input, context) => {
    const entries = {};
    if (input.GlobalClusterIdentifier != null) {
        entries["GlobalClusterIdentifier"] = input.GlobalClusterIdentifier;
    }
    if (input.DbClusterIdentifier != null) {
        entries["DbClusterIdentifier"] = input.DbClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryRemoveRoleFromDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const serializeAws_queryRemoveRoleFromDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
    }
    if (input.FeatureName != null) {
        entries["FeatureName"] = input.FeatureName;
    }
    return entries;
};
const serializeAws_queryRemoveSourceIdentifierFromSubscriptionMessage = (input, context) => {
    const entries = {};
    if (input.SubscriptionName != null) {
        entries["SubscriptionName"] = input.SubscriptionName;
    }
    if (input.SourceIdentifier != null) {
        entries["SourceIdentifier"] = input.SourceIdentifier;
    }
    return entries;
};
const serializeAws_queryRemoveTagsFromResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.TagKeys != null) {
        const memberEntries = serializeAws_queryKeyList(input.TagKeys, context);
        if (input.TagKeys?.length === 0) {
            entries.TagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagKeys.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryResetDBClusterParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.ResetAllParameters != null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryResetDBParameterGroupMessage = (input, context) => {
    const entries = {};
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.ResetAllParameters != null) {
        entries["ResetAllParameters"] = input.ResetAllParameters;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParametersList(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryRestoreDBClusterFromS3Message = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.CharacterSetName != null) {
        entries["CharacterSetName"] = input.CharacterSetName;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.SourceEngine != null) {
        entries["SourceEngine"] = input.SourceEngine;
    }
    if (input.SourceEngineVersion != null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
    }
    if (input.S3BucketName != null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.S3IngestionRoleArn != null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const serializeAws_queryRestoreDBClusterFromSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.AvailabilityZones != null) {
        const memberEntries = serializeAws_queryAvailabilityZones(input.AvailabilityZones, context);
        if (input.AvailabilityZones?.length === 0) {
            entries.AvailabilityZones = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZones.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.SnapshotIdentifier != null) {
        entries["SnapshotIdentifier"] = input.SnapshotIdentifier;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.DatabaseName != null) {
        entries["DatabaseName"] = input.DatabaseName;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineMode != null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    return entries;
};
const serializeAws_queryRestoreDBClusterToPointInTimeMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    if (input.RestoreType != null) {
        entries["RestoreType"] = input.RestoreType;
    }
    if (input.SourceDBClusterIdentifier != null) {
        entries["SourceDBClusterIdentifier"] = input.SourceDBClusterIdentifier;
    }
    if (input.RestoreToTime != null) {
        entries["RestoreToTime"] = input.RestoreToTime.toISOString().split(".")[0] + "Z";
    }
    if (input.UseLatestRestorableTime != null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.BacktrackWindow != null) {
        entries["BacktrackWindow"] = input.BacktrackWindow;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DBClusterParameterGroupName != null) {
        entries["DBClusterParameterGroupName"] = input.DBClusterParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryScalingConfiguration(input.ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EngineMode != null) {
        entries["EngineMode"] = input.EngineMode;
    }
    if (input.DBClusterInstanceClass != null) {
        entries["DBClusterInstanceClass"] = input.DBClusterInstanceClass;
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.ServerlessV2ScalingConfiguration != null) {
        const memberEntries = serializeAws_queryServerlessV2ScalingConfiguration(input.ServerlessV2ScalingConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServerlessV2ScalingConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    return entries;
};
const serializeAws_queryRestoreDBInstanceFromDBSnapshotMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget != null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.DBClusterSnapshotIdentifier != null) {
        entries["DBClusterSnapshotIdentifier"] = input.DBClusterSnapshotIdentifier;
    }
    return entries;
};
const serializeAws_queryRestoreDBInstanceFromS3Message = (input, context) => {
    const entries = {};
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.AllocatedStorage != null) {
        entries["AllocatedStorage"] = input.AllocatedStorage;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.MasterUsername != null) {
        entries["MasterUsername"] = input.MasterUsername;
    }
    if (input.MasterUserPassword != null) {
        entries["MasterUserPassword"] = input.MasterUserPassword;
    }
    if (input.DBSecurityGroups != null) {
        const memberEntries = serializeAws_queryDBSecurityGroupNameList(input.DBSecurityGroups, context);
        if (input.DBSecurityGroups?.length === 0) {
            entries.DBSecurityGroups = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DBSecurityGroups.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.PreferredMaintenanceWindow != null) {
        entries["PreferredMaintenanceWindow"] = input.PreferredMaintenanceWindow;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.PreferredBackupWindow != null) {
        entries["PreferredBackupWindow"] = input.PreferredBackupWindow;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.EngineVersion != null) {
        entries["EngineVersion"] = input.EngineVersion;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.StorageEncrypted != null) {
        entries["StorageEncrypted"] = input.StorageEncrypted;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.MonitoringInterval != null) {
        entries["MonitoringInterval"] = input.MonitoringInterval;
    }
    if (input.MonitoringRoleArn != null) {
        entries["MonitoringRoleArn"] = input.MonitoringRoleArn;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.SourceEngine != null) {
        entries["SourceEngine"] = input.SourceEngine;
    }
    if (input.SourceEngineVersion != null) {
        entries["SourceEngineVersion"] = input.SourceEngineVersion;
    }
    if (input.S3BucketName != null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.S3IngestionRoleArn != null) {
        entries["S3IngestionRoleArn"] = input.S3IngestionRoleArn;
    }
    if (input.EnablePerformanceInsights != null) {
        entries["EnablePerformanceInsights"] = input.EnablePerformanceInsights;
    }
    if (input.PerformanceInsightsKMSKeyId != null) {
        entries["PerformanceInsightsKMSKeyId"] = input.PerformanceInsightsKMSKeyId;
    }
    if (input.PerformanceInsightsRetentionPeriod != null) {
        entries["PerformanceInsightsRetentionPeriod"] = input.PerformanceInsightsRetentionPeriod;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    if (input.ManageMasterUserPassword != null) {
        entries["ManageMasterUserPassword"] = input.ManageMasterUserPassword;
    }
    if (input.MasterUserSecretKmsKeyId != null) {
        entries["MasterUserSecretKmsKeyId"] = input.MasterUserSecretKmsKeyId;
    }
    return entries;
};
const serializeAws_queryRestoreDBInstanceToPointInTimeMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBInstanceIdentifier != null) {
        entries["SourceDBInstanceIdentifier"] = input.SourceDBInstanceIdentifier;
    }
    if (input.TargetDBInstanceIdentifier != null) {
        entries["TargetDBInstanceIdentifier"] = input.TargetDBInstanceIdentifier;
    }
    if (input.RestoreTime != null) {
        entries["RestoreTime"] = input.RestoreTime.toISOString().split(".")[0] + "Z";
    }
    if (input.UseLatestRestorableTime != null) {
        entries["UseLatestRestorableTime"] = input.UseLatestRestorableTime;
    }
    if (input.DBInstanceClass != null) {
        entries["DBInstanceClass"] = input.DBInstanceClass;
    }
    if (input.Port != null) {
        entries["Port"] = input.Port;
    }
    if (input.AvailabilityZone != null) {
        entries["AvailabilityZone"] = input.AvailabilityZone;
    }
    if (input.DBSubnetGroupName != null) {
        entries["DBSubnetGroupName"] = input.DBSubnetGroupName;
    }
    if (input.MultiAZ != null) {
        entries["MultiAZ"] = input.MultiAZ;
    }
    if (input.PubliclyAccessible != null) {
        entries["PubliclyAccessible"] = input.PubliclyAccessible;
    }
    if (input.AutoMinorVersionUpgrade != null) {
        entries["AutoMinorVersionUpgrade"] = input.AutoMinorVersionUpgrade;
    }
    if (input.LicenseModel != null) {
        entries["LicenseModel"] = input.LicenseModel;
    }
    if (input.DBName != null) {
        entries["DBName"] = input.DBName;
    }
    if (input.Engine != null) {
        entries["Engine"] = input.Engine;
    }
    if (input.Iops != null) {
        entries["Iops"] = input.Iops;
    }
    if (input.OptionGroupName != null) {
        entries["OptionGroupName"] = input.OptionGroupName;
    }
    if (input.CopyTagsToSnapshot != null) {
        entries["CopyTagsToSnapshot"] = input.CopyTagsToSnapshot;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTagList(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StorageType != null) {
        entries["StorageType"] = input.StorageType;
    }
    if (input.TdeCredentialArn != null) {
        entries["TdeCredentialArn"] = input.TdeCredentialArn;
    }
    if (input.TdeCredentialPassword != null) {
        entries["TdeCredentialPassword"] = input.TdeCredentialPassword;
    }
    if (input.VpcSecurityGroupIds != null) {
        const memberEntries = serializeAws_queryVpcSecurityGroupIdList(input.VpcSecurityGroupIds, context);
        if (input.VpcSecurityGroupIds?.length === 0) {
            entries.VpcSecurityGroupIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcSecurityGroupIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Domain != null) {
        entries["Domain"] = input.Domain;
    }
    if (input.DomainIAMRoleName != null) {
        entries["DomainIAMRoleName"] = input.DomainIAMRoleName;
    }
    if (input.EnableIAMDatabaseAuthentication != null) {
        entries["EnableIAMDatabaseAuthentication"] = input.EnableIAMDatabaseAuthentication;
    }
    if (input.EnableCloudwatchLogsExports != null) {
        const memberEntries = serializeAws_queryLogTypeList(input.EnableCloudwatchLogsExports, context);
        if (input.EnableCloudwatchLogsExports?.length === 0) {
            entries.EnableCloudwatchLogsExports = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableCloudwatchLogsExports.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ProcessorFeatures != null) {
        const memberEntries = serializeAws_queryProcessorFeatureList(input.ProcessorFeatures, context);
        if (input.ProcessorFeatures?.length === 0) {
            entries.ProcessorFeatures = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProcessorFeatures.${key}`;
            entries[loc] = value;
        });
    }
    if (input.UseDefaultProcessorFeatures != null) {
        entries["UseDefaultProcessorFeatures"] = input.UseDefaultProcessorFeatures;
    }
    if (input.DBParameterGroupName != null) {
        entries["DBParameterGroupName"] = input.DBParameterGroupName;
    }
    if (input.DeletionProtection != null) {
        entries["DeletionProtection"] = input.DeletionProtection;
    }
    if (input.SourceDbiResourceId != null) {
        entries["SourceDbiResourceId"] = input.SourceDbiResourceId;
    }
    if (input.MaxAllocatedStorage != null) {
        entries["MaxAllocatedStorage"] = input.MaxAllocatedStorage;
    }
    if (input.SourceDBInstanceAutomatedBackupsArn != null) {
        entries["SourceDBInstanceAutomatedBackupsArn"] = input.SourceDBInstanceAutomatedBackupsArn;
    }
    if (input.EnableCustomerOwnedIp != null) {
        entries["EnableCustomerOwnedIp"] = input.EnableCustomerOwnedIp;
    }
    if (input.CustomIamInstanceProfile != null) {
        entries["CustomIamInstanceProfile"] = input.CustomIamInstanceProfile;
    }
    if (input.BackupTarget != null) {
        entries["BackupTarget"] = input.BackupTarget;
    }
    if (input.NetworkType != null) {
        entries["NetworkType"] = input.NetworkType;
    }
    if (input.StorageThroughput != null) {
        entries["StorageThroughput"] = input.StorageThroughput;
    }
    return entries;
};
const serializeAws_queryRevokeDBSecurityGroupIngressMessage = (input, context) => {
    const entries = {};
    if (input.DBSecurityGroupName != null) {
        entries["DBSecurityGroupName"] = input.DBSecurityGroupName;
    }
    if (input.CIDRIP != null) {
        entries["CIDRIP"] = input.CIDRIP;
    }
    if (input.EC2SecurityGroupName != null) {
        entries["EC2SecurityGroupName"] = input.EC2SecurityGroupName;
    }
    if (input.EC2SecurityGroupId != null) {
        entries["EC2SecurityGroupId"] = input.EC2SecurityGroupId;
    }
    if (input.EC2SecurityGroupOwnerId != null) {
        entries["EC2SecurityGroupOwnerId"] = input.EC2SecurityGroupOwnerId;
    }
    return entries;
};
const serializeAws_queryScalingConfiguration = (input, context) => {
    const entries = {};
    if (input.MinCapacity != null) {
        entries["MinCapacity"] = input.MinCapacity;
    }
    if (input.MaxCapacity != null) {
        entries["MaxCapacity"] = input.MaxCapacity;
    }
    if (input.AutoPause != null) {
        entries["AutoPause"] = input.AutoPause;
    }
    if (input.SecondsUntilAutoPause != null) {
        entries["SecondsUntilAutoPause"] = input.SecondsUntilAutoPause;
    }
    if (input.TimeoutAction != null) {
        entries["TimeoutAction"] = input.TimeoutAction;
    }
    if (input.SecondsBeforeTimeout != null) {
        entries["SecondsBeforeTimeout"] = input.SecondsBeforeTimeout;
    }
    return entries;
};
const serializeAws_queryServerlessV2ScalingConfiguration = (input, context) => {
    const entries = {};
    if (input.MinCapacity != null) {
        entries["MinCapacity"] = __serializeFloat(input.MinCapacity);
    }
    if (input.MaxCapacity != null) {
        entries["MaxCapacity"] = __serializeFloat(input.MaxCapacity);
    }
    return entries;
};
const serializeAws_querySourceIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SourceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryStartActivityStreamRequest = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.Mode != null) {
        entries["Mode"] = input.Mode;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    if (input.EngineNativeAuditFieldsIncluded != null) {
        entries["EngineNativeAuditFieldsIncluded"] = input.EngineNativeAuditFieldsIncluded;
    }
    return entries;
};
const serializeAws_queryStartDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryStartDBInstanceAutomatedBackupsReplicationMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBInstanceArn != null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
    }
    if (input.BackupRetentionPeriod != null) {
        entries["BackupRetentionPeriod"] = input.BackupRetentionPeriod;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.PreSignedUrl != null) {
        entries["PreSignedUrl"] = input.PreSignedUrl;
    }
    return entries;
};
const serializeAws_queryStartDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
const serializeAws_queryStartExportTaskMessage = (input, context) => {
    const entries = {};
    if (input.ExportTaskIdentifier != null) {
        entries["ExportTaskIdentifier"] = input.ExportTaskIdentifier;
    }
    if (input.SourceArn != null) {
        entries["SourceArn"] = input.SourceArn;
    }
    if (input.S3BucketName != null) {
        entries["S3BucketName"] = input.S3BucketName;
    }
    if (input.IamRoleArn != null) {
        entries["IamRoleArn"] = input.IamRoleArn;
    }
    if (input.KmsKeyId != null) {
        entries["KmsKeyId"] = input.KmsKeyId;
    }
    if (input.S3Prefix != null) {
        entries["S3Prefix"] = input.S3Prefix;
    }
    if (input.ExportOnly != null) {
        const memberEntries = serializeAws_queryStringList(input.ExportOnly, context);
        if (input.ExportOnly?.length === 0) {
            entries.ExportOnly = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportOnly.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryStopActivityStreamRequest = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.ApplyImmediately != null) {
        entries["ApplyImmediately"] = input.ApplyImmediately;
    }
    return entries;
};
const serializeAws_queryStopDBClusterMessage = (input, context) => {
    const entries = {};
    if (input.DBClusterIdentifier != null) {
        entries["DBClusterIdentifier"] = input.DBClusterIdentifier;
    }
    return entries;
};
const serializeAws_queryStopDBInstanceAutomatedBackupsReplicationMessage = (input, context) => {
    const entries = {};
    if (input.SourceDBInstanceArn != null) {
        entries["SourceDBInstanceArn"] = input.SourceDBInstanceArn;
    }
    return entries;
};
const serializeAws_queryStopDBInstanceMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    if (input.DBSnapshotIdentifier != null) {
        entries["DBSnapshotIdentifier"] = input.DBSnapshotIdentifier;
    }
    return entries;
};
const serializeAws_queryStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_querySubnetIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SubnetIdentifier.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_querySwitchoverBlueGreenDeploymentRequest = (input, context) => {
    const entries = {};
    if (input.BlueGreenDeploymentIdentifier != null) {
        entries["BlueGreenDeploymentIdentifier"] = input.BlueGreenDeploymentIdentifier;
    }
    if (input.SwitchoverTimeout != null) {
        entries["SwitchoverTimeout"] = input.SwitchoverTimeout;
    }
    return entries;
};
const serializeAws_querySwitchoverReadReplicaMessage = (input, context) => {
    const entries = {};
    if (input.DBInstanceIdentifier != null) {
        entries["DBInstanceIdentifier"] = input.DBInstanceIdentifier;
    }
    return entries;
};
const serializeAws_queryTag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Tag.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryUserAuthConfig = (input, context) => {
    const entries = {};
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.UserName != null) {
        entries["UserName"] = input.UserName;
    }
    if (input.AuthScheme != null) {
        entries["AuthScheme"] = input.AuthScheme;
    }
    if (input.SecretArn != null) {
        entries["SecretArn"] = input.SecretArn;
    }
    if (input.IAMAuth != null) {
        entries["IAMAuth"] = input.IAMAuth;
    }
    if (input.ClientPasswordAuthType != null) {
        entries["ClientPasswordAuthType"] = input.ClientPasswordAuthType;
    }
    return entries;
};
const serializeAws_queryUserAuthConfigList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryUserAuthConfig(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryVpcSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcSecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const deserializeAws_queryAccountAttributesMessage = (output, context) => {
    const contents = {
        AccountQuotas: undefined,
    };
    if (output.AccountQuotas === "") {
        contents.AccountQuotas = [];
    }
    else if (output["AccountQuotas"] !== undefined && output["AccountQuotas"]["AccountQuota"] !== undefined) {
        contents.AccountQuotas = deserializeAws_queryAccountQuotaList(__getArrayIfSingleItem(output["AccountQuotas"]["AccountQuota"]), context);
    }
    return contents;
};
const deserializeAws_queryAccountQuota = (output, context) => {
    const contents = {
        AccountQuotaName: undefined,
        Used: undefined,
        Max: undefined,
    };
    if (output["AccountQuotaName"] !== undefined) {
        contents.AccountQuotaName = __expectString(output["AccountQuotaName"]);
    }
    if (output["Used"] !== undefined) {
        contents.Used = __strictParseLong(output["Used"]);
    }
    if (output["Max"] !== undefined) {
        contents.Max = __strictParseLong(output["Max"]);
    }
    return contents;
};
const deserializeAws_queryAccountQuotaList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAccountQuota(entry, context);
    });
};
const deserializeAws_queryActivityStreamModeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryAddSourceIdentifierToSubscriptionResult = (output, context) => {
    const contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const deserializeAws_queryApplyPendingMaintenanceActionResult = (output, context) => {
    const contents = {
        ResourcePendingMaintenanceActions: undefined,
    };
    if (output["ResourcePendingMaintenanceActions"] !== undefined) {
        contents.ResourcePendingMaintenanceActions = deserializeAws_queryResourcePendingMaintenanceActions(output["ResourcePendingMaintenanceActions"], context);
    }
    return contents;
};
const deserializeAws_queryAttributeValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryAuthorizationAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthorizationNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthorizationQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryAuthorizeDBSecurityGroupIngressResult = (output, context) => {
    const contents = {
        DBSecurityGroup: undefined,
    };
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
const deserializeAws_queryAvailabilityZone = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
const deserializeAws_queryAvailabilityZoneList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAvailabilityZone(entry, context);
    });
};
const deserializeAws_queryAvailabilityZones = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryAvailableProcessorFeature = (output, context) => {
    const contents = {
        Name: undefined,
        DefaultValue: undefined,
        AllowedValues: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    return contents;
};
const deserializeAws_queryAvailableProcessorFeatureList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAvailableProcessorFeature(entry, context);
    });
};
const deserializeAws_queryBackupPolicyNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryBlueGreenDeployment = (output, context) => {
    const contents = {
        BlueGreenDeploymentIdentifier: undefined,
        BlueGreenDeploymentName: undefined,
        Source: undefined,
        Target: undefined,
        SwitchoverDetails: undefined,
        Tasks: undefined,
        Status: undefined,
        StatusDetails: undefined,
        CreateTime: undefined,
        DeleteTime: undefined,
        TagList: undefined,
    };
    if (output["BlueGreenDeploymentIdentifier"] !== undefined) {
        contents.BlueGreenDeploymentIdentifier = __expectString(output["BlueGreenDeploymentIdentifier"]);
    }
    if (output["BlueGreenDeploymentName"] !== undefined) {
        contents.BlueGreenDeploymentName = __expectString(output["BlueGreenDeploymentName"]);
    }
    if (output["Source"] !== undefined) {
        contents.Source = __expectString(output["Source"]);
    }
    if (output["Target"] !== undefined) {
        contents.Target = __expectString(output["Target"]);
    }
    if (output.SwitchoverDetails === "") {
        contents.SwitchoverDetails = [];
    }
    else if (output["SwitchoverDetails"] !== undefined && output["SwitchoverDetails"]["member"] !== undefined) {
        contents.SwitchoverDetails = deserializeAws_querySwitchoverDetailList(__getArrayIfSingleItem(output["SwitchoverDetails"]["member"]), context);
    }
    if (output.Tasks === "") {
        contents.Tasks = [];
    }
    else if (output["Tasks"] !== undefined && output["Tasks"]["member"] !== undefined) {
        contents.Tasks = deserializeAws_queryBlueGreenDeploymentTaskList(__getArrayIfSingleItem(output["Tasks"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StatusDetails"] !== undefined) {
        contents.StatusDetails = __expectString(output["StatusDetails"]);
    }
    if (output["CreateTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["CreateTime"]));
    }
    if (output["DeleteTime"] !== undefined) {
        contents.DeleteTime = __expectNonNull(__parseRfc3339DateTime(output["DeleteTime"]));
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryBlueGreenDeploymentAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryBlueGreenDeploymentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryBlueGreenDeployment(entry, context);
    });
};
const deserializeAws_queryBlueGreenDeploymentNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryBlueGreenDeploymentTask = (output, context) => {
    const contents = {
        Name: undefined,
        Status: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryBlueGreenDeploymentTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryBlueGreenDeploymentTask(entry, context);
    });
};
const deserializeAws_queryCertificate = (output, context) => {
    const contents = {
        CertificateIdentifier: undefined,
        CertificateType: undefined,
        Thumbprint: undefined,
        ValidFrom: undefined,
        ValidTill: undefined,
        CertificateArn: undefined,
        CustomerOverride: undefined,
        CustomerOverrideValidTill: undefined,
    };
    if (output["CertificateIdentifier"] !== undefined) {
        contents.CertificateIdentifier = __expectString(output["CertificateIdentifier"]);
    }
    if (output["CertificateType"] !== undefined) {
        contents.CertificateType = __expectString(output["CertificateType"]);
    }
    if (output["Thumbprint"] !== undefined) {
        contents.Thumbprint = __expectString(output["Thumbprint"]);
    }
    if (output["ValidFrom"] !== undefined) {
        contents.ValidFrom = __expectNonNull(__parseRfc3339DateTime(output["ValidFrom"]));
    }
    if (output["ValidTill"] !== undefined) {
        contents.ValidTill = __expectNonNull(__parseRfc3339DateTime(output["ValidTill"]));
    }
    if (output["CertificateArn"] !== undefined) {
        contents.CertificateArn = __expectString(output["CertificateArn"]);
    }
    if (output["CustomerOverride"] !== undefined) {
        contents.CustomerOverride = __parseBoolean(output["CustomerOverride"]);
    }
    if (output["CustomerOverrideValidTill"] !== undefined) {
        contents.CustomerOverrideValidTill = __expectNonNull(__parseRfc3339DateTime(output["CustomerOverrideValidTill"]));
    }
    return contents;
};
const deserializeAws_queryCertificateList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryCertificate(entry, context);
    });
};
const deserializeAws_queryCertificateMessage = (output, context) => {
    const contents = {
        Certificates: undefined,
        Marker: undefined,
    };
    if (output.Certificates === "") {
        contents.Certificates = [];
    }
    else if (output["Certificates"] !== undefined && output["Certificates"]["Certificate"] !== undefined) {
        contents.Certificates = deserializeAws_queryCertificateList(__getArrayIfSingleItem(output["Certificates"]["Certificate"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryCertificateNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCharacterSet = (output, context) => {
    const contents = {
        CharacterSetName: undefined,
        CharacterSetDescription: undefined,
    };
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = __expectString(output["CharacterSetName"]);
    }
    if (output["CharacterSetDescription"] !== undefined) {
        contents.CharacterSetDescription = __expectString(output["CharacterSetDescription"]);
    }
    return contents;
};
const deserializeAws_queryClusterPendingModifiedValues = (output, context) => {
    const contents = {
        PendingCloudwatchLogsExports: undefined,
        DBClusterIdentifier: undefined,
        MasterUserPassword: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        EngineVersion: undefined,
        BackupRetentionPeriod: undefined,
        AllocatedStorage: undefined,
        Iops: undefined,
    };
    if (output["PendingCloudwatchLogsExports"] !== undefined) {
        contents.PendingCloudwatchLogsExports = deserializeAws_queryPendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["MasterUserPassword"] !== undefined) {
        contents.MasterUserPassword = __expectString(output["MasterUserPassword"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    return contents;
};
const deserializeAws_queryConnectionPoolConfigurationInfo = (output, context) => {
    const contents = {
        MaxConnectionsPercent: undefined,
        MaxIdleConnectionsPercent: undefined,
        ConnectionBorrowTimeout: undefined,
        SessionPinningFilters: undefined,
        InitQuery: undefined,
    };
    if (output["MaxConnectionsPercent"] !== undefined) {
        contents.MaxConnectionsPercent = __strictParseInt32(output["MaxConnectionsPercent"]);
    }
    if (output["MaxIdleConnectionsPercent"] !== undefined) {
        contents.MaxIdleConnectionsPercent = __strictParseInt32(output["MaxIdleConnectionsPercent"]);
    }
    if (output["ConnectionBorrowTimeout"] !== undefined) {
        contents.ConnectionBorrowTimeout = __strictParseInt32(output["ConnectionBorrowTimeout"]);
    }
    if (output.SessionPinningFilters === "") {
        contents.SessionPinningFilters = [];
    }
    else if (output["SessionPinningFilters"] !== undefined && output["SessionPinningFilters"]["member"] !== undefined) {
        contents.SessionPinningFilters = deserializeAws_queryStringList(__getArrayIfSingleItem(output["SessionPinningFilters"]["member"]), context);
    }
    if (output["InitQuery"] !== undefined) {
        contents.InitQuery = __expectString(output["InitQuery"]);
    }
    return contents;
};
const deserializeAws_queryCopyDBClusterParameterGroupResult = (output, context) => {
    const contents = {
        DBClusterParameterGroup: undefined,
    };
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = deserializeAws_queryDBClusterParameterGroup(output["DBClusterParameterGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCopyDBClusterSnapshotResult = (output, context) => {
    const contents = {
        DBClusterSnapshot: undefined,
    };
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
const deserializeAws_queryCopyDBParameterGroupResult = (output, context) => {
    const contents = {
        DBParameterGroup: undefined,
    };
    if (output["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroup = deserializeAws_queryDBParameterGroup(output["DBParameterGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCopyDBSnapshotResult = (output, context) => {
    const contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const deserializeAws_queryCopyOptionGroupResult = (output, context) => {
    const contents = {
        OptionGroup: undefined,
    };
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateBlueGreenDeploymentResponse = (output, context) => {
    const contents = {
        BlueGreenDeployment: undefined,
    };
    if (output["BlueGreenDeployment"] !== undefined) {
        contents.BlueGreenDeployment = deserializeAws_queryBlueGreenDeployment(output["BlueGreenDeployment"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBClusterParameterGroupResult = (output, context) => {
    const contents = {
        DBClusterParameterGroup: undefined,
    };
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = deserializeAws_queryDBClusterParameterGroup(output["DBClusterParameterGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBClusterSnapshotResult = (output, context) => {
    const contents = {
        DBClusterSnapshot: undefined,
    };
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBInstanceReadReplicaResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBInstanceResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBParameterGroupResult = (output, context) => {
    const contents = {
        DBParameterGroup: undefined,
    };
    if (output["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroup = deserializeAws_queryDBParameterGroup(output["DBParameterGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBProxyEndpointResponse = (output, context) => {
    const contents = {
        DBProxyEndpoint: undefined,
    };
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBProxyResponse = (output, context) => {
    const contents = {
        DBProxy: undefined,
    };
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBSecurityGroupResult = (output, context) => {
    const contents = {
        DBSecurityGroup: undefined,
    };
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBSnapshotResult = (output, context) => {
    const contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const deserializeAws_queryCreateDBSubnetGroupResult = (output, context) => {
    const contents = {
        DBSubnetGroup: undefined,
    };
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCreateEventSubscriptionResult = (output, context) => {
    const contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const deserializeAws_queryCreateGlobalClusterResult = (output, context) => {
    const contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const deserializeAws_queryCreateOptionGroupResult = (output, context) => {
    const contents = {
        OptionGroup: undefined,
    };
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
const deserializeAws_queryCustomAvailabilityZoneNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCustomDBEngineVersionAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCustomDBEngineVersionNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryCustomDBEngineVersionQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBCluster = (output, context) => {
    const contents = {
        AllocatedStorage: undefined,
        AvailabilityZones: undefined,
        BackupRetentionPeriod: undefined,
        CharacterSetName: undefined,
        DatabaseName: undefined,
        DBClusterIdentifier: undefined,
        DBClusterParameterGroup: undefined,
        DBSubnetGroup: undefined,
        Status: undefined,
        AutomaticRestartTime: undefined,
        PercentProgress: undefined,
        EarliestRestorableTime: undefined,
        Endpoint: undefined,
        ReaderEndpoint: undefined,
        CustomEndpoints: undefined,
        MultiAZ: undefined,
        Engine: undefined,
        EngineVersion: undefined,
        LatestRestorableTime: undefined,
        Port: undefined,
        MasterUsername: undefined,
        DBClusterOptionGroupMemberships: undefined,
        PreferredBackupWindow: undefined,
        PreferredMaintenanceWindow: undefined,
        ReplicationSourceIdentifier: undefined,
        ReadReplicaIdentifiers: undefined,
        DBClusterMembers: undefined,
        VpcSecurityGroups: undefined,
        HostedZoneId: undefined,
        StorageEncrypted: undefined,
        KmsKeyId: undefined,
        DbClusterResourceId: undefined,
        DBClusterArn: undefined,
        AssociatedRoles: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        CloneGroupId: undefined,
        ClusterCreateTime: undefined,
        EarliestBacktrackTime: undefined,
        BacktrackWindow: undefined,
        BacktrackConsumedChangeRecords: undefined,
        EnabledCloudwatchLogsExports: undefined,
        Capacity: undefined,
        EngineMode: undefined,
        ScalingConfigurationInfo: undefined,
        DeletionProtection: undefined,
        HttpEndpointEnabled: undefined,
        ActivityStreamMode: undefined,
        ActivityStreamStatus: undefined,
        ActivityStreamKmsKeyId: undefined,
        ActivityStreamKinesisStreamName: undefined,
        CopyTagsToSnapshot: undefined,
        CrossAccountClone: undefined,
        DomainMemberships: undefined,
        TagList: undefined,
        GlobalWriteForwardingStatus: undefined,
        GlobalWriteForwardingRequested: undefined,
        PendingModifiedValues: undefined,
        DBClusterInstanceClass: undefined,
        StorageType: undefined,
        Iops: undefined,
        PubliclyAccessible: undefined,
        AutoMinorVersionUpgrade: undefined,
        MonitoringInterval: undefined,
        MonitoringRoleArn: undefined,
        PerformanceInsightsEnabled: undefined,
        PerformanceInsightsKMSKeyId: undefined,
        PerformanceInsightsRetentionPeriod: undefined,
        ServerlessV2ScalingConfiguration: undefined,
        NetworkType: undefined,
        DBSystemId: undefined,
        MasterUserSecret: undefined,
    };
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined &&
        output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZones(__getArrayIfSingleItem(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = __expectString(output["CharacterSetName"]);
    }
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = __expectString(output["DatabaseName"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroup = __expectString(output["DBClusterParameterGroup"]);
    }
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = __expectString(output["DBSubnetGroup"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["AutomaticRestartTime"] !== undefined) {
        contents.AutomaticRestartTime = __expectNonNull(__parseRfc3339DateTime(output["AutomaticRestartTime"]));
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __expectString(output["PercentProgress"]);
    }
    if (output["EarliestRestorableTime"] !== undefined) {
        contents.EarliestRestorableTime = __expectNonNull(__parseRfc3339DateTime(output["EarliestRestorableTime"]));
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["ReaderEndpoint"] !== undefined) {
        contents.ReaderEndpoint = __expectString(output["ReaderEndpoint"]);
    }
    if (output.CustomEndpoints === "") {
        contents.CustomEndpoints = [];
    }
    else if (output["CustomEndpoints"] !== undefined && output["CustomEndpoints"]["member"] !== undefined) {
        contents.CustomEndpoints = deserializeAws_queryStringList(__getArrayIfSingleItem(output["CustomEndpoints"]["member"]), context);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LatestRestorableTime"] !== undefined) {
        contents.LatestRestorableTime = __expectNonNull(__parseRfc3339DateTime(output["LatestRestorableTime"]));
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output.DBClusterOptionGroupMemberships === "") {
        contents.DBClusterOptionGroupMemberships = [];
    }
    else if (output["DBClusterOptionGroupMemberships"] !== undefined &&
        output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"] !== undefined) {
        contents.DBClusterOptionGroupMemberships = deserializeAws_queryDBClusterOptionGroupMemberships(__getArrayIfSingleItem(output["DBClusterOptionGroupMemberships"]["DBClusterOptionGroup"]), context);
    }
    if (output["PreferredBackupWindow"] !== undefined) {
        contents.PreferredBackupWindow = __expectString(output["PreferredBackupWindow"]);
    }
    if (output["PreferredMaintenanceWindow"] !== undefined) {
        contents.PreferredMaintenanceWindow = __expectString(output["PreferredMaintenanceWindow"]);
    }
    if (output["ReplicationSourceIdentifier"] !== undefined) {
        contents.ReplicationSourceIdentifier = __expectString(output["ReplicationSourceIdentifier"]);
    }
    if (output.ReadReplicaIdentifiers === "") {
        contents.ReadReplicaIdentifiers = [];
    }
    else if (output["ReadReplicaIdentifiers"] !== undefined &&
        output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"] !== undefined) {
        contents.ReadReplicaIdentifiers = deserializeAws_queryReadReplicaIdentifierList(__getArrayIfSingleItem(output["ReadReplicaIdentifiers"]["ReadReplicaIdentifier"]), context);
    }
    if (output.DBClusterMembers === "") {
        contents.DBClusterMembers = [];
    }
    else if (output["DBClusterMembers"] !== undefined && output["DBClusterMembers"]["DBClusterMember"] !== undefined) {
        contents.DBClusterMembers = deserializeAws_queryDBClusterMemberList(__getArrayIfSingleItem(output["DBClusterMembers"]["DBClusterMember"]), context);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    else if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList(__getArrayIfSingleItem(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DbClusterResourceId"] !== undefined) {
        contents.DbClusterResourceId = __expectString(output["DbClusterResourceId"]);
    }
    if (output["DBClusterArn"] !== undefined) {
        contents.DBClusterArn = __expectString(output["DBClusterArn"]);
    }
    if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
    }
    else if (output["AssociatedRoles"] !== undefined && output["AssociatedRoles"]["DBClusterRole"] !== undefined) {
        contents.AssociatedRoles = deserializeAws_queryDBClusterRoles(__getArrayIfSingleItem(output["AssociatedRoles"]["DBClusterRole"]), context);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["CloneGroupId"] !== undefined) {
        contents.CloneGroupId = __expectString(output["CloneGroupId"]);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = __expectNonNull(__parseRfc3339DateTime(output["ClusterCreateTime"]));
    }
    if (output["EarliestBacktrackTime"] !== undefined) {
        contents.EarliestBacktrackTime = __expectNonNull(__parseRfc3339DateTime(output["EarliestBacktrackTime"]));
    }
    if (output["BacktrackWindow"] !== undefined) {
        contents.BacktrackWindow = __strictParseLong(output["BacktrackWindow"]);
    }
    if (output["BacktrackConsumedChangeRecords"] !== undefined) {
        contents.BacktrackConsumedChangeRecords = __strictParseLong(output["BacktrackConsumedChangeRecords"]);
    }
    if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
    }
    else if (output["EnabledCloudwatchLogsExports"] !== undefined &&
        output["EnabledCloudwatchLogsExports"]["member"] !== undefined) {
        contents.EnabledCloudwatchLogsExports = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["EnabledCloudwatchLogsExports"]["member"]), context);
    }
    if (output["Capacity"] !== undefined) {
        contents.Capacity = __strictParseInt32(output["Capacity"]);
    }
    if (output["EngineMode"] !== undefined) {
        contents.EngineMode = __expectString(output["EngineMode"]);
    }
    if (output["ScalingConfigurationInfo"] !== undefined) {
        contents.ScalingConfigurationInfo = deserializeAws_queryScalingConfigurationInfo(output["ScalingConfigurationInfo"], context);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = __parseBoolean(output["DeletionProtection"]);
    }
    if (output["HttpEndpointEnabled"] !== undefined) {
        contents.HttpEndpointEnabled = __parseBoolean(output["HttpEndpointEnabled"]);
    }
    if (output["ActivityStreamMode"] !== undefined) {
        contents.ActivityStreamMode = __expectString(output["ActivityStreamMode"]);
    }
    if (output["ActivityStreamStatus"] !== undefined) {
        contents.ActivityStreamStatus = __expectString(output["ActivityStreamStatus"]);
    }
    if (output["ActivityStreamKmsKeyId"] !== undefined) {
        contents.ActivityStreamKmsKeyId = __expectString(output["ActivityStreamKmsKeyId"]);
    }
    if (output["ActivityStreamKinesisStreamName"] !== undefined) {
        contents.ActivityStreamKinesisStreamName = __expectString(output["ActivityStreamKinesisStreamName"]);
    }
    if (output["CopyTagsToSnapshot"] !== undefined) {
        contents.CopyTagsToSnapshot = __parseBoolean(output["CopyTagsToSnapshot"]);
    }
    if (output["CrossAccountClone"] !== undefined) {
        contents.CrossAccountClone = __parseBoolean(output["CrossAccountClone"]);
    }
    if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
    }
    else if (output["DomainMemberships"] !== undefined &&
        output["DomainMemberships"]["DomainMembership"] !== undefined) {
        contents.DomainMemberships = deserializeAws_queryDomainMembershipList(__getArrayIfSingleItem(output["DomainMemberships"]["DomainMembership"]), context);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output["GlobalWriteForwardingStatus"] !== undefined) {
        contents.GlobalWriteForwardingStatus = __expectString(output["GlobalWriteForwardingStatus"]);
    }
    if (output["GlobalWriteForwardingRequested"] !== undefined) {
        contents.GlobalWriteForwardingRequested = __parseBoolean(output["GlobalWriteForwardingRequested"]);
    }
    if (output["PendingModifiedValues"] !== undefined) {
        contents.PendingModifiedValues = deserializeAws_queryClusterPendingModifiedValues(output["PendingModifiedValues"], context);
    }
    if (output["DBClusterInstanceClass"] !== undefined) {
        contents.DBClusterInstanceClass = __expectString(output["DBClusterInstanceClass"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = __parseBoolean(output["PubliclyAccessible"]);
    }
    if (output["AutoMinorVersionUpgrade"] !== undefined) {
        contents.AutoMinorVersionUpgrade = __parseBoolean(output["AutoMinorVersionUpgrade"]);
    }
    if (output["MonitoringInterval"] !== undefined) {
        contents.MonitoringInterval = __strictParseInt32(output["MonitoringInterval"]);
    }
    if (output["MonitoringRoleArn"] !== undefined) {
        contents.MonitoringRoleArn = __expectString(output["MonitoringRoleArn"]);
    }
    if (output["PerformanceInsightsEnabled"] !== undefined) {
        contents.PerformanceInsightsEnabled = __parseBoolean(output["PerformanceInsightsEnabled"]);
    }
    if (output["PerformanceInsightsKMSKeyId"] !== undefined) {
        contents.PerformanceInsightsKMSKeyId = __expectString(output["PerformanceInsightsKMSKeyId"]);
    }
    if (output["PerformanceInsightsRetentionPeriod"] !== undefined) {
        contents.PerformanceInsightsRetentionPeriod = __strictParseInt32(output["PerformanceInsightsRetentionPeriod"]);
    }
    if (output["ServerlessV2ScalingConfiguration"] !== undefined) {
        contents.ServerlessV2ScalingConfiguration = deserializeAws_queryServerlessV2ScalingConfigurationInfo(output["ServerlessV2ScalingConfiguration"], context);
    }
    if (output["NetworkType"] !== undefined) {
        contents.NetworkType = __expectString(output["NetworkType"]);
    }
    if (output["DBSystemId"] !== undefined) {
        contents.DBSystemId = __expectString(output["DBSystemId"]);
    }
    if (output["MasterUserSecret"] !== undefined) {
        contents.MasterUserSecret = deserializeAws_queryMasterUserSecret(output["MasterUserSecret"], context);
    }
    return contents;
};
const deserializeAws_queryDBClusterAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterBacktrack = (output, context) => {
    const contents = {
        DBClusterIdentifier: undefined,
        BacktrackIdentifier: undefined,
        BacktrackTo: undefined,
        BacktrackedFrom: undefined,
        BacktrackRequestCreationTime: undefined,
        Status: undefined,
    };
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["BacktrackIdentifier"] !== undefined) {
        contents.BacktrackIdentifier = __expectString(output["BacktrackIdentifier"]);
    }
    if (output["BacktrackTo"] !== undefined) {
        contents.BacktrackTo = __expectNonNull(__parseRfc3339DateTime(output["BacktrackTo"]));
    }
    if (output["BacktrackedFrom"] !== undefined) {
        contents.BacktrackedFrom = __expectNonNull(__parseRfc3339DateTime(output["BacktrackedFrom"]));
    }
    if (output["BacktrackRequestCreationTime"] !== undefined) {
        contents.BacktrackRequestCreationTime = __expectNonNull(__parseRfc3339DateTime(output["BacktrackRequestCreationTime"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterBacktrackList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterBacktrack(entry, context);
    });
};
const deserializeAws_queryDBClusterBacktrackMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBClusterBacktracks: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterBacktracks === "") {
        contents.DBClusterBacktracks = [];
    }
    else if (output["DBClusterBacktracks"] !== undefined &&
        output["DBClusterBacktracks"]["DBClusterBacktrack"] !== undefined) {
        contents.DBClusterBacktracks = deserializeAws_queryDBClusterBacktrackList(__getArrayIfSingleItem(output["DBClusterBacktracks"]["DBClusterBacktrack"]), context);
    }
    return contents;
};
const deserializeAws_queryDBClusterBacktrackNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterCapacityInfo = (output, context) => {
    const contents = {
        DBClusterIdentifier: undefined,
        PendingCapacity: undefined,
        CurrentCapacity: undefined,
        SecondsBeforeTimeout: undefined,
        TimeoutAction: undefined,
    };
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["PendingCapacity"] !== undefined) {
        contents.PendingCapacity = __strictParseInt32(output["PendingCapacity"]);
    }
    if (output["CurrentCapacity"] !== undefined) {
        contents.CurrentCapacity = __strictParseInt32(output["CurrentCapacity"]);
    }
    if (output["SecondsBeforeTimeout"] !== undefined) {
        contents.SecondsBeforeTimeout = __strictParseInt32(output["SecondsBeforeTimeout"]);
    }
    if (output["TimeoutAction"] !== undefined) {
        contents.TimeoutAction = __expectString(output["TimeoutAction"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterEndpoint = (output, context) => {
    const contents = {
        DBClusterEndpointIdentifier: undefined,
        DBClusterIdentifier: undefined,
        DBClusterEndpointResourceIdentifier: undefined,
        Endpoint: undefined,
        Status: undefined,
        EndpointType: undefined,
        CustomEndpointType: undefined,
        StaticMembers: undefined,
        ExcludedMembers: undefined,
        DBClusterEndpointArn: undefined,
    };
    if (output["DBClusterEndpointIdentifier"] !== undefined) {
        contents.DBClusterEndpointIdentifier = __expectString(output["DBClusterEndpointIdentifier"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["DBClusterEndpointResourceIdentifier"] !== undefined) {
        contents.DBClusterEndpointResourceIdentifier = __expectString(output["DBClusterEndpointResourceIdentifier"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["EndpointType"] !== undefined) {
        contents.EndpointType = __expectString(output["EndpointType"]);
    }
    if (output["CustomEndpointType"] !== undefined) {
        contents.CustomEndpointType = __expectString(output["CustomEndpointType"]);
    }
    if (output.StaticMembers === "") {
        contents.StaticMembers = [];
    }
    else if (output["StaticMembers"] !== undefined && output["StaticMembers"]["member"] !== undefined) {
        contents.StaticMembers = deserializeAws_queryStringList(__getArrayIfSingleItem(output["StaticMembers"]["member"]), context);
    }
    if (output.ExcludedMembers === "") {
        contents.ExcludedMembers = [];
    }
    else if (output["ExcludedMembers"] !== undefined && output["ExcludedMembers"]["member"] !== undefined) {
        contents.ExcludedMembers = deserializeAws_queryStringList(__getArrayIfSingleItem(output["ExcludedMembers"]["member"]), context);
    }
    if (output["DBClusterEndpointArn"] !== undefined) {
        contents.DBClusterEndpointArn = __expectString(output["DBClusterEndpointArn"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterEndpointAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterEndpointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterEndpoint(entry, context);
    });
};
const deserializeAws_queryDBClusterEndpointMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBClusterEndpoints: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterEndpoints === "") {
        contents.DBClusterEndpoints = [];
    }
    else if (output["DBClusterEndpoints"] !== undefined &&
        output["DBClusterEndpoints"]["DBClusterEndpointList"] !== undefined) {
        contents.DBClusterEndpoints = deserializeAws_queryDBClusterEndpointList(__getArrayIfSingleItem(output["DBClusterEndpoints"]["DBClusterEndpointList"]), context);
    }
    return contents;
};
const deserializeAws_queryDBClusterEndpointNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterEndpointQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBCluster(entry, context);
    });
};
const deserializeAws_queryDBClusterMember = (output, context) => {
    const contents = {
        DBInstanceIdentifier: undefined,
        IsClusterWriter: undefined,
        DBClusterParameterGroupStatus: undefined,
        PromotionTier: undefined,
    };
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["IsClusterWriter"] !== undefined) {
        contents.IsClusterWriter = __parseBoolean(output["IsClusterWriter"]);
    }
    if (output["DBClusterParameterGroupStatus"] !== undefined) {
        contents.DBClusterParameterGroupStatus = __expectString(output["DBClusterParameterGroupStatus"]);
    }
    if (output["PromotionTier"] !== undefined) {
        contents.PromotionTier = __strictParseInt32(output["PromotionTier"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterMemberList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterMember(entry, context);
    });
};
const deserializeAws_queryDBClusterMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBClusters: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusters === "") {
        contents.DBClusters = [];
    }
    else if (output["DBClusters"] !== undefined && output["DBClusters"]["DBCluster"] !== undefined) {
        contents.DBClusters = deserializeAws_queryDBClusterList(__getArrayIfSingleItem(output["DBClusters"]["DBCluster"]), context);
    }
    return contents;
};
const deserializeAws_queryDBClusterNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterOptionGroupMemberships = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterOptionGroupStatus(entry, context);
    });
};
const deserializeAws_queryDBClusterOptionGroupStatus = (output, context) => {
    const contents = {
        DBClusterOptionGroupName: undefined,
        Status: undefined,
    };
    if (output["DBClusterOptionGroupName"] !== undefined) {
        contents.DBClusterOptionGroupName = __expectString(output["DBClusterOptionGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterParameterGroup = (output, context) => {
    const contents = {
        DBClusterParameterGroupName: undefined,
        DBParameterGroupFamily: undefined,
        Description: undefined,
        DBClusterParameterGroupArn: undefined,
    };
    if (output["DBClusterParameterGroupName"] !== undefined) {
        contents.DBClusterParameterGroupName = __expectString(output["DBClusterParameterGroupName"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["DBClusterParameterGroupArn"] !== undefined) {
        contents.DBClusterParameterGroupArn = __expectString(output["DBClusterParameterGroupArn"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterParameterGroupDetails = (output, context) => {
    const contents = {
        Parameters: undefined,
        Marker: undefined,
    };
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList(__getArrayIfSingleItem(output["Parameters"]["Parameter"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterParameterGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterParameterGroup(entry, context);
    });
};
const deserializeAws_queryDBClusterParameterGroupNameMessage = (output, context) => {
    const contents = {
        DBClusterParameterGroupName: undefined,
    };
    if (output["DBClusterParameterGroupName"] !== undefined) {
        contents.DBClusterParameterGroupName = __expectString(output["DBClusterParameterGroupName"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterParameterGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterParameterGroupsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBClusterParameterGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterParameterGroups === "") {
        contents.DBClusterParameterGroups = [];
    }
    else if (output["DBClusterParameterGroups"] !== undefined &&
        output["DBClusterParameterGroups"]["DBClusterParameterGroup"] !== undefined) {
        contents.DBClusterParameterGroups = deserializeAws_queryDBClusterParameterGroupList(__getArrayIfSingleItem(output["DBClusterParameterGroups"]["DBClusterParameterGroup"]), context);
    }
    return contents;
};
const deserializeAws_queryDBClusterQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterRole = (output, context) => {
    const contents = {
        RoleArn: undefined,
        Status: undefined,
        FeatureName: undefined,
    };
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = __expectString(output["RoleArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FeatureName"] !== undefined) {
        contents.FeatureName = __expectString(output["FeatureName"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterRoleAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterRoleNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterRoleQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterRoles = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterRole(entry, context);
    });
};
const deserializeAws_queryDBClusterSnapshot = (output, context) => {
    const contents = {
        AvailabilityZones: undefined,
        DBClusterSnapshotIdentifier: undefined,
        DBClusterIdentifier: undefined,
        SnapshotCreateTime: undefined,
        Engine: undefined,
        EngineMode: undefined,
        AllocatedStorage: undefined,
        Status: undefined,
        Port: undefined,
        VpcId: undefined,
        ClusterCreateTime: undefined,
        MasterUsername: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        SnapshotType: undefined,
        PercentProgress: undefined,
        StorageEncrypted: undefined,
        KmsKeyId: undefined,
        DBClusterSnapshotArn: undefined,
        SourceDBClusterSnapshotArn: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        TagList: undefined,
        DBSystemId: undefined,
    };
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined &&
        output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZones(__getArrayIfSingleItem(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["DBClusterSnapshotIdentifier"] !== undefined) {
        contents.DBClusterSnapshotIdentifier = __expectString(output["DBClusterSnapshotIdentifier"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["SnapshotCreateTime"] !== undefined) {
        contents.SnapshotCreateTime = __expectNonNull(__parseRfc3339DateTime(output["SnapshotCreateTime"]));
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineMode"] !== undefined) {
        contents.EngineMode = __expectString(output["EngineMode"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["ClusterCreateTime"] !== undefined) {
        contents.ClusterCreateTime = __expectNonNull(__parseRfc3339DateTime(output["ClusterCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["SnapshotType"] !== undefined) {
        contents.SnapshotType = __expectString(output["SnapshotType"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __strictParseInt32(output["PercentProgress"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DBClusterSnapshotArn"] !== undefined) {
        contents.DBClusterSnapshotArn = __expectString(output["DBClusterSnapshotArn"]);
    }
    if (output["SourceDBClusterSnapshotArn"] !== undefined) {
        contents.SourceDBClusterSnapshotArn = __expectString(output["SourceDBClusterSnapshotArn"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output["DBSystemId"] !== undefined) {
        contents.DBSystemId = __expectString(output["DBSystemId"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterSnapshotAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBClusterSnapshotAttribute = (output, context) => {
    const contents = {
        AttributeName: undefined,
        AttributeValues: undefined,
    };
    if (output["AttributeName"] !== undefined) {
        contents.AttributeName = __expectString(output["AttributeName"]);
    }
    if (output.AttributeValues === "") {
        contents.AttributeValues = [];
    }
    else if (output["AttributeValues"] !== undefined && output["AttributeValues"]["AttributeValue"] !== undefined) {
        contents.AttributeValues = deserializeAws_queryAttributeValueList(__getArrayIfSingleItem(output["AttributeValues"]["AttributeValue"]), context);
    }
    return contents;
};
const deserializeAws_queryDBClusterSnapshotAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterSnapshotAttribute(entry, context);
    });
};
const deserializeAws_queryDBClusterSnapshotAttributesResult = (output, context) => {
    const contents = {
        DBClusterSnapshotIdentifier: undefined,
        DBClusterSnapshotAttributes: undefined,
    };
    if (output["DBClusterSnapshotIdentifier"] !== undefined) {
        contents.DBClusterSnapshotIdentifier = __expectString(output["DBClusterSnapshotIdentifier"]);
    }
    if (output.DBClusterSnapshotAttributes === "") {
        contents.DBClusterSnapshotAttributes = [];
    }
    else if (output["DBClusterSnapshotAttributes"] !== undefined &&
        output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"] !== undefined) {
        contents.DBClusterSnapshotAttributes = deserializeAws_queryDBClusterSnapshotAttributeList(__getArrayIfSingleItem(output["DBClusterSnapshotAttributes"]["DBClusterSnapshotAttribute"]), context);
    }
    return contents;
};
const deserializeAws_queryDBClusterSnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBClusterSnapshot(entry, context);
    });
};
const deserializeAws_queryDBClusterSnapshotMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBClusterSnapshots: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBClusterSnapshots === "") {
        contents.DBClusterSnapshots = [];
    }
    else if (output["DBClusterSnapshots"] !== undefined &&
        output["DBClusterSnapshots"]["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshots = deserializeAws_queryDBClusterSnapshotList(__getArrayIfSingleItem(output["DBClusterSnapshots"]["DBClusterSnapshot"]), context);
    }
    return contents;
};
const deserializeAws_queryDBClusterSnapshotNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBEngineVersion = (output, context) => {
    const contents = {
        Engine: undefined,
        EngineVersion: undefined,
        DBParameterGroupFamily: undefined,
        DBEngineDescription: undefined,
        DBEngineVersionDescription: undefined,
        DefaultCharacterSet: undefined,
        SupportedCharacterSets: undefined,
        SupportedNcharCharacterSets: undefined,
        ValidUpgradeTarget: undefined,
        SupportedTimezones: undefined,
        ExportableLogTypes: undefined,
        SupportsLogExportsToCloudwatchLogs: undefined,
        SupportsReadReplica: undefined,
        SupportedEngineModes: undefined,
        SupportedFeatureNames: undefined,
        Status: undefined,
        SupportsParallelQuery: undefined,
        SupportsGlobalDatabases: undefined,
        MajorEngineVersion: undefined,
        DatabaseInstallationFilesS3BucketName: undefined,
        DatabaseInstallationFilesS3Prefix: undefined,
        DBEngineVersionArn: undefined,
        KMSKeyId: undefined,
        CreateTime: undefined,
        TagList: undefined,
        SupportsBabelfish: undefined,
        CustomDBEngineVersionManifest: undefined,
    };
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["DBEngineDescription"] !== undefined) {
        contents.DBEngineDescription = __expectString(output["DBEngineDescription"]);
    }
    if (output["DBEngineVersionDescription"] !== undefined) {
        contents.DBEngineVersionDescription = __expectString(output["DBEngineVersionDescription"]);
    }
    if (output["DefaultCharacterSet"] !== undefined) {
        contents.DefaultCharacterSet = deserializeAws_queryCharacterSet(output["DefaultCharacterSet"], context);
    }
    if (output.SupportedCharacterSets === "") {
        contents.SupportedCharacterSets = [];
    }
    else if (output["SupportedCharacterSets"] !== undefined &&
        output["SupportedCharacterSets"]["CharacterSet"] !== undefined) {
        contents.SupportedCharacterSets = deserializeAws_querySupportedCharacterSetsList(__getArrayIfSingleItem(output["SupportedCharacterSets"]["CharacterSet"]), context);
    }
    if (output.SupportedNcharCharacterSets === "") {
        contents.SupportedNcharCharacterSets = [];
    }
    else if (output["SupportedNcharCharacterSets"] !== undefined &&
        output["SupportedNcharCharacterSets"]["CharacterSet"] !== undefined) {
        contents.SupportedNcharCharacterSets = deserializeAws_querySupportedCharacterSetsList(__getArrayIfSingleItem(output["SupportedNcharCharacterSets"]["CharacterSet"]), context);
    }
    if (output.ValidUpgradeTarget === "") {
        contents.ValidUpgradeTarget = [];
    }
    else if (output["ValidUpgradeTarget"] !== undefined &&
        output["ValidUpgradeTarget"]["UpgradeTarget"] !== undefined) {
        contents.ValidUpgradeTarget = deserializeAws_queryValidUpgradeTargetList(__getArrayIfSingleItem(output["ValidUpgradeTarget"]["UpgradeTarget"]), context);
    }
    if (output.SupportedTimezones === "") {
        contents.SupportedTimezones = [];
    }
    else if (output["SupportedTimezones"] !== undefined && output["SupportedTimezones"]["Timezone"] !== undefined) {
        contents.SupportedTimezones = deserializeAws_querySupportedTimezonesList(__getArrayIfSingleItem(output["SupportedTimezones"]["Timezone"]), context);
    }
    if (output.ExportableLogTypes === "") {
        contents.ExportableLogTypes = [];
    }
    else if (output["ExportableLogTypes"] !== undefined && output["ExportableLogTypes"]["member"] !== undefined) {
        contents.ExportableLogTypes = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["ExportableLogTypes"]["member"]), context);
    }
    if (output["SupportsLogExportsToCloudwatchLogs"] !== undefined) {
        contents.SupportsLogExportsToCloudwatchLogs = __parseBoolean(output["SupportsLogExportsToCloudwatchLogs"]);
    }
    if (output["SupportsReadReplica"] !== undefined) {
        contents.SupportsReadReplica = __parseBoolean(output["SupportsReadReplica"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    if (output.SupportedFeatureNames === "") {
        contents.SupportedFeatureNames = [];
    }
    else if (output["SupportedFeatureNames"] !== undefined && output["SupportedFeatureNames"]["member"] !== undefined) {
        contents.SupportedFeatureNames = deserializeAws_queryFeatureNameList(__getArrayIfSingleItem(output["SupportedFeatureNames"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["SupportsParallelQuery"] !== undefined) {
        contents.SupportsParallelQuery = __parseBoolean(output["SupportsParallelQuery"]);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = __parseBoolean(output["SupportsGlobalDatabases"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = __expectString(output["MajorEngineVersion"]);
    }
    if (output["DatabaseInstallationFilesS3BucketName"] !== undefined) {
        contents.DatabaseInstallationFilesS3BucketName = __expectString(output["DatabaseInstallationFilesS3BucketName"]);
    }
    if (output["DatabaseInstallationFilesS3Prefix"] !== undefined) {
        contents.DatabaseInstallationFilesS3Prefix = __expectString(output["DatabaseInstallationFilesS3Prefix"]);
    }
    if (output["DBEngineVersionArn"] !== undefined) {
        contents.DBEngineVersionArn = __expectString(output["DBEngineVersionArn"]);
    }
    if (output["KMSKeyId"] !== undefined) {
        contents.KMSKeyId = __expectString(output["KMSKeyId"]);
    }
    if (output["CreateTime"] !== undefined) {
        contents.CreateTime = __expectNonNull(__parseRfc3339DateTime(output["CreateTime"]));
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output["SupportsBabelfish"] !== undefined) {
        contents.SupportsBabelfish = __parseBoolean(output["SupportsBabelfish"]);
    }
    if (output["CustomDBEngineVersionManifest"] !== undefined) {
        contents.CustomDBEngineVersionManifest = __expectString(output["CustomDBEngineVersionManifest"]);
    }
    return contents;
};
const deserializeAws_queryDBEngineVersionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBEngineVersion(entry, context);
    });
};
const deserializeAws_queryDBEngineVersionMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBEngineVersions: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBEngineVersions === "") {
        contents.DBEngineVersions = [];
    }
    else if (output["DBEngineVersions"] !== undefined && output["DBEngineVersions"]["DBEngineVersion"] !== undefined) {
        contents.DBEngineVersions = deserializeAws_queryDBEngineVersionList(__getArrayIfSingleItem(output["DBEngineVersions"]["DBEngineVersion"]), context);
    }
    return contents;
};
const deserializeAws_queryDBInstance = (output, context) => {
    const contents = {
        DBInstanceIdentifier: undefined,
        DBInstanceClass: undefined,
        Engine: undefined,
        DBInstanceStatus: undefined,
        AutomaticRestartTime: undefined,
        MasterUsername: undefined,
        DBName: undefined,
        Endpoint: undefined,
        AllocatedStorage: undefined,
        InstanceCreateTime: undefined,
        PreferredBackupWindow: undefined,
        BackupRetentionPeriod: undefined,
        DBSecurityGroups: undefined,
        VpcSecurityGroups: undefined,
        DBParameterGroups: undefined,
        AvailabilityZone: undefined,
        DBSubnetGroup: undefined,
        PreferredMaintenanceWindow: undefined,
        PendingModifiedValues: undefined,
        LatestRestorableTime: undefined,
        MultiAZ: undefined,
        EngineVersion: undefined,
        AutoMinorVersionUpgrade: undefined,
        ReadReplicaSourceDBInstanceIdentifier: undefined,
        ReadReplicaDBInstanceIdentifiers: undefined,
        ReadReplicaDBClusterIdentifiers: undefined,
        ReplicaMode: undefined,
        LicenseModel: undefined,
        Iops: undefined,
        OptionGroupMemberships: undefined,
        CharacterSetName: undefined,
        NcharCharacterSetName: undefined,
        SecondaryAvailabilityZone: undefined,
        PubliclyAccessible: undefined,
        StatusInfos: undefined,
        StorageType: undefined,
        TdeCredentialArn: undefined,
        DbInstancePort: undefined,
        DBClusterIdentifier: undefined,
        StorageEncrypted: undefined,
        KmsKeyId: undefined,
        DbiResourceId: undefined,
        CACertificateIdentifier: undefined,
        DomainMemberships: undefined,
        CopyTagsToSnapshot: undefined,
        MonitoringInterval: undefined,
        EnhancedMonitoringResourceArn: undefined,
        MonitoringRoleArn: undefined,
        PromotionTier: undefined,
        DBInstanceArn: undefined,
        Timezone: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        PerformanceInsightsEnabled: undefined,
        PerformanceInsightsKMSKeyId: undefined,
        PerformanceInsightsRetentionPeriod: undefined,
        EnabledCloudwatchLogsExports: undefined,
        ProcessorFeatures: undefined,
        DeletionProtection: undefined,
        AssociatedRoles: undefined,
        ListenerEndpoint: undefined,
        MaxAllocatedStorage: undefined,
        TagList: undefined,
        DBInstanceAutomatedBackupsReplications: undefined,
        CustomerOwnedIpEnabled: undefined,
        AwsBackupRecoveryPointArn: undefined,
        ActivityStreamStatus: undefined,
        ActivityStreamKmsKeyId: undefined,
        ActivityStreamKinesisStreamName: undefined,
        ActivityStreamMode: undefined,
        ActivityStreamEngineNativeAuditFieldsIncluded: undefined,
        AutomationMode: undefined,
        ResumeFullAutomationModeTime: undefined,
        CustomIamInstanceProfile: undefined,
        BackupTarget: undefined,
        NetworkType: undefined,
        ActivityStreamPolicyStatus: undefined,
        StorageThroughput: undefined,
        DBSystemId: undefined,
        MasterUserSecret: undefined,
    };
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["DBInstanceStatus"] !== undefined) {
        contents.DBInstanceStatus = __expectString(output["DBInstanceStatus"]);
    }
    if (output["AutomaticRestartTime"] !== undefined) {
        contents.AutomaticRestartTime = __expectNonNull(__parseRfc3339DateTime(output["AutomaticRestartTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["DBName"] !== undefined) {
        contents.DBName = __expectString(output["DBName"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = deserializeAws_queryEndpoint(output["Endpoint"], context);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = __expectNonNull(__parseRfc3339DateTime(output["InstanceCreateTime"]));
    }
    if (output["PreferredBackupWindow"] !== undefined) {
        contents.PreferredBackupWindow = __expectString(output["PreferredBackupWindow"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
    }
    else if (output["DBSecurityGroups"] !== undefined && output["DBSecurityGroups"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroups = deserializeAws_queryDBSecurityGroupMembershipList(__getArrayIfSingleItem(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
    }
    if (output.VpcSecurityGroups === "") {
        contents.VpcSecurityGroups = [];
    }
    else if (output["VpcSecurityGroups"] !== undefined &&
        output["VpcSecurityGroups"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroups = deserializeAws_queryVpcSecurityGroupMembershipList(__getArrayIfSingleItem(output["VpcSecurityGroups"]["VpcSecurityGroupMembership"]), context);
    }
    if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
    }
    else if (output["DBParameterGroups"] !== undefined &&
        output["DBParameterGroups"]["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroups = deserializeAws_queryDBParameterGroupStatusList(__getArrayIfSingleItem(output["DBParameterGroups"]["DBParameterGroup"]), context);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["AvailabilityZone"]);
    }
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
    }
    if (output["PreferredMaintenanceWindow"] !== undefined) {
        contents.PreferredMaintenanceWindow = __expectString(output["PreferredMaintenanceWindow"]);
    }
    if (output["PendingModifiedValues"] !== undefined) {
        contents.PendingModifiedValues = deserializeAws_queryPendingModifiedValues(output["PendingModifiedValues"], context);
    }
    if (output["LatestRestorableTime"] !== undefined) {
        contents.LatestRestorableTime = __expectNonNull(__parseRfc3339DateTime(output["LatestRestorableTime"]));
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["AutoMinorVersionUpgrade"] !== undefined) {
        contents.AutoMinorVersionUpgrade = __parseBoolean(output["AutoMinorVersionUpgrade"]);
    }
    if (output["ReadReplicaSourceDBInstanceIdentifier"] !== undefined) {
        contents.ReadReplicaSourceDBInstanceIdentifier = __expectString(output["ReadReplicaSourceDBInstanceIdentifier"]);
    }
    if (output.ReadReplicaDBInstanceIdentifiers === "") {
        contents.ReadReplicaDBInstanceIdentifiers = [];
    }
    else if (output["ReadReplicaDBInstanceIdentifiers"] !== undefined &&
        output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"] !== undefined) {
        contents.ReadReplicaDBInstanceIdentifiers = deserializeAws_queryReadReplicaDBInstanceIdentifierList(__getArrayIfSingleItem(output["ReadReplicaDBInstanceIdentifiers"]["ReadReplicaDBInstanceIdentifier"]), context);
    }
    if (output.ReadReplicaDBClusterIdentifiers === "") {
        contents.ReadReplicaDBClusterIdentifiers = [];
    }
    else if (output["ReadReplicaDBClusterIdentifiers"] !== undefined &&
        output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"] !== undefined) {
        contents.ReadReplicaDBClusterIdentifiers = deserializeAws_queryReadReplicaDBClusterIdentifierList(__getArrayIfSingleItem(output["ReadReplicaDBClusterIdentifiers"]["ReadReplicaDBClusterIdentifier"]), context);
    }
    if (output["ReplicaMode"] !== undefined) {
        contents.ReplicaMode = __expectString(output["ReplicaMode"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output.OptionGroupMemberships === "") {
        contents.OptionGroupMemberships = [];
    }
    else if (output["OptionGroupMemberships"] !== undefined &&
        output["OptionGroupMemberships"]["OptionGroupMembership"] !== undefined) {
        contents.OptionGroupMemberships = deserializeAws_queryOptionGroupMembershipList(__getArrayIfSingleItem(output["OptionGroupMemberships"]["OptionGroupMembership"]), context);
    }
    if (output["CharacterSetName"] !== undefined) {
        contents.CharacterSetName = __expectString(output["CharacterSetName"]);
    }
    if (output["NcharCharacterSetName"] !== undefined) {
        contents.NcharCharacterSetName = __expectString(output["NcharCharacterSetName"]);
    }
    if (output["SecondaryAvailabilityZone"] !== undefined) {
        contents.SecondaryAvailabilityZone = __expectString(output["SecondaryAvailabilityZone"]);
    }
    if (output["PubliclyAccessible"] !== undefined) {
        contents.PubliclyAccessible = __parseBoolean(output["PubliclyAccessible"]);
    }
    if (output.StatusInfos === "") {
        contents.StatusInfos = [];
    }
    else if (output["StatusInfos"] !== undefined && output["StatusInfos"]["DBInstanceStatusInfo"] !== undefined) {
        contents.StatusInfos = deserializeAws_queryDBInstanceStatusInfoList(__getArrayIfSingleItem(output["StatusInfos"]["DBInstanceStatusInfo"]), context);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = __expectString(output["TdeCredentialArn"]);
    }
    if (output["DbInstancePort"] !== undefined) {
        contents.DbInstancePort = __strictParseInt32(output["DbInstancePort"]);
    }
    if (output["DBClusterIdentifier"] !== undefined) {
        contents.DBClusterIdentifier = __expectString(output["DBClusterIdentifier"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = __expectString(output["DbiResourceId"]);
    }
    if (output["CACertificateIdentifier"] !== undefined) {
        contents.CACertificateIdentifier = __expectString(output["CACertificateIdentifier"]);
    }
    if (output.DomainMemberships === "") {
        contents.DomainMemberships = [];
    }
    else if (output["DomainMemberships"] !== undefined &&
        output["DomainMemberships"]["DomainMembership"] !== undefined) {
        contents.DomainMemberships = deserializeAws_queryDomainMembershipList(__getArrayIfSingleItem(output["DomainMemberships"]["DomainMembership"]), context);
    }
    if (output["CopyTagsToSnapshot"] !== undefined) {
        contents.CopyTagsToSnapshot = __parseBoolean(output["CopyTagsToSnapshot"]);
    }
    if (output["MonitoringInterval"] !== undefined) {
        contents.MonitoringInterval = __strictParseInt32(output["MonitoringInterval"]);
    }
    if (output["EnhancedMonitoringResourceArn"] !== undefined) {
        contents.EnhancedMonitoringResourceArn = __expectString(output["EnhancedMonitoringResourceArn"]);
    }
    if (output["MonitoringRoleArn"] !== undefined) {
        contents.MonitoringRoleArn = __expectString(output["MonitoringRoleArn"]);
    }
    if (output["PromotionTier"] !== undefined) {
        contents.PromotionTier = __strictParseInt32(output["PromotionTier"]);
    }
    if (output["DBInstanceArn"] !== undefined) {
        contents.DBInstanceArn = __expectString(output["DBInstanceArn"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = __expectString(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["PerformanceInsightsEnabled"] !== undefined) {
        contents.PerformanceInsightsEnabled = __parseBoolean(output["PerformanceInsightsEnabled"]);
    }
    if (output["PerformanceInsightsKMSKeyId"] !== undefined) {
        contents.PerformanceInsightsKMSKeyId = __expectString(output["PerformanceInsightsKMSKeyId"]);
    }
    if (output["PerformanceInsightsRetentionPeriod"] !== undefined) {
        contents.PerformanceInsightsRetentionPeriod = __strictParseInt32(output["PerformanceInsightsRetentionPeriod"]);
    }
    if (output.EnabledCloudwatchLogsExports === "") {
        contents.EnabledCloudwatchLogsExports = [];
    }
    else if (output["EnabledCloudwatchLogsExports"] !== undefined &&
        output["EnabledCloudwatchLogsExports"]["member"] !== undefined) {
        contents.EnabledCloudwatchLogsExports = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["EnabledCloudwatchLogsExports"]["member"]), context);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    else if (output["ProcessorFeatures"] !== undefined &&
        output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList(__getArrayIfSingleItem(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = __parseBoolean(output["DeletionProtection"]);
    }
    if (output.AssociatedRoles === "") {
        contents.AssociatedRoles = [];
    }
    else if (output["AssociatedRoles"] !== undefined && output["AssociatedRoles"]["DBInstanceRole"] !== undefined) {
        contents.AssociatedRoles = deserializeAws_queryDBInstanceRoles(__getArrayIfSingleItem(output["AssociatedRoles"]["DBInstanceRole"]), context);
    }
    if (output["ListenerEndpoint"] !== undefined) {
        contents.ListenerEndpoint = deserializeAws_queryEndpoint(output["ListenerEndpoint"], context);
    }
    if (output["MaxAllocatedStorage"] !== undefined) {
        contents.MaxAllocatedStorage = __strictParseInt32(output["MaxAllocatedStorage"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
    }
    else if (output["DBInstanceAutomatedBackupsReplications"] !== undefined &&
        output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.DBInstanceAutomatedBackupsReplications = deserializeAws_queryDBInstanceAutomatedBackupsReplicationList(__getArrayIfSingleItem(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
    }
    if (output["CustomerOwnedIpEnabled"] !== undefined) {
        contents.CustomerOwnedIpEnabled = __parseBoolean(output["CustomerOwnedIpEnabled"]);
    }
    if (output["AwsBackupRecoveryPointArn"] !== undefined) {
        contents.AwsBackupRecoveryPointArn = __expectString(output["AwsBackupRecoveryPointArn"]);
    }
    if (output["ActivityStreamStatus"] !== undefined) {
        contents.ActivityStreamStatus = __expectString(output["ActivityStreamStatus"]);
    }
    if (output["ActivityStreamKmsKeyId"] !== undefined) {
        contents.ActivityStreamKmsKeyId = __expectString(output["ActivityStreamKmsKeyId"]);
    }
    if (output["ActivityStreamKinesisStreamName"] !== undefined) {
        contents.ActivityStreamKinesisStreamName = __expectString(output["ActivityStreamKinesisStreamName"]);
    }
    if (output["ActivityStreamMode"] !== undefined) {
        contents.ActivityStreamMode = __expectString(output["ActivityStreamMode"]);
    }
    if (output["ActivityStreamEngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.ActivityStreamEngineNativeAuditFieldsIncluded = __parseBoolean(output["ActivityStreamEngineNativeAuditFieldsIncluded"]);
    }
    if (output["AutomationMode"] !== undefined) {
        contents.AutomationMode = __expectString(output["AutomationMode"]);
    }
    if (output["ResumeFullAutomationModeTime"] !== undefined) {
        contents.ResumeFullAutomationModeTime = __expectNonNull(__parseRfc3339DateTime(output["ResumeFullAutomationModeTime"]));
    }
    if (output["CustomIamInstanceProfile"] !== undefined) {
        contents.CustomIamInstanceProfile = __expectString(output["CustomIamInstanceProfile"]);
    }
    if (output["BackupTarget"] !== undefined) {
        contents.BackupTarget = __expectString(output["BackupTarget"]);
    }
    if (output["NetworkType"] !== undefined) {
        contents.NetworkType = __expectString(output["NetworkType"]);
    }
    if (output["ActivityStreamPolicyStatus"] !== undefined) {
        contents.ActivityStreamPolicyStatus = __expectString(output["ActivityStreamPolicyStatus"]);
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = __strictParseInt32(output["StorageThroughput"]);
    }
    if (output["DBSystemId"] !== undefined) {
        contents.DBSystemId = __expectString(output["DBSystemId"]);
    }
    if (output["MasterUserSecret"] !== undefined) {
        contents.MasterUserSecret = deserializeAws_queryMasterUserSecret(output["MasterUserSecret"], context);
    }
    return contents;
};
const deserializeAws_queryDBInstanceAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceAutomatedBackup = (output, context) => {
    const contents = {
        DBInstanceArn: undefined,
        DbiResourceId: undefined,
        Region: undefined,
        DBInstanceIdentifier: undefined,
        RestoreWindow: undefined,
        AllocatedStorage: undefined,
        Status: undefined,
        Port: undefined,
        AvailabilityZone: undefined,
        VpcId: undefined,
        InstanceCreateTime: undefined,
        MasterUsername: undefined,
        Engine: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        Iops: undefined,
        OptionGroupName: undefined,
        TdeCredentialArn: undefined,
        Encrypted: undefined,
        StorageType: undefined,
        KmsKeyId: undefined,
        Timezone: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        BackupRetentionPeriod: undefined,
        DBInstanceAutomatedBackupsArn: undefined,
        DBInstanceAutomatedBackupsReplications: undefined,
        BackupTarget: undefined,
        StorageThroughput: undefined,
    };
    if (output["DBInstanceArn"] !== undefined) {
        contents.DBInstanceArn = __expectString(output["DBInstanceArn"]);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = __expectString(output["DbiResourceId"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["RestoreWindow"] !== undefined) {
        contents.RestoreWindow = deserializeAws_queryRestoreWindow(output["RestoreWindow"], context);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["AvailabilityZone"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = __expectNonNull(__parseRfc3339DateTime(output["InstanceCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = __expectString(output["TdeCredentialArn"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["Encrypted"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = __expectString(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output["DBInstanceAutomatedBackupsArn"] !== undefined) {
        contents.DBInstanceAutomatedBackupsArn = __expectString(output["DBInstanceAutomatedBackupsArn"]);
    }
    if (output.DBInstanceAutomatedBackupsReplications === "") {
        contents.DBInstanceAutomatedBackupsReplications = [];
    }
    else if (output["DBInstanceAutomatedBackupsReplications"] !== undefined &&
        output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.DBInstanceAutomatedBackupsReplications = deserializeAws_queryDBInstanceAutomatedBackupsReplicationList(__getArrayIfSingleItem(output["DBInstanceAutomatedBackupsReplications"]["DBInstanceAutomatedBackupsReplication"]), context);
    }
    if (output["BackupTarget"] !== undefined) {
        contents.BackupTarget = __expectString(output["BackupTarget"]);
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = __strictParseInt32(output["StorageThroughput"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceAutomatedBackupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBInstanceAutomatedBackup(entry, context);
    });
};
const deserializeAws_queryDBInstanceAutomatedBackupMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBInstanceAutomatedBackups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBInstanceAutomatedBackups === "") {
        contents.DBInstanceAutomatedBackups = [];
    }
    else if (output["DBInstanceAutomatedBackups"] !== undefined &&
        output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackups = deserializeAws_queryDBInstanceAutomatedBackupList(__getArrayIfSingleItem(output["DBInstanceAutomatedBackups"]["DBInstanceAutomatedBackup"]), context);
    }
    return contents;
};
const deserializeAws_queryDBInstanceAutomatedBackupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceAutomatedBackupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceAutomatedBackupsReplication = (output, context) => {
    const contents = {
        DBInstanceAutomatedBackupsArn: undefined,
    };
    if (output["DBInstanceAutomatedBackupsArn"] !== undefined) {
        contents.DBInstanceAutomatedBackupsArn = __expectString(output["DBInstanceAutomatedBackupsArn"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceAutomatedBackupsReplicationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBInstanceAutomatedBackupsReplication(entry, context);
    });
};
const deserializeAws_queryDBInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBInstance(entry, context);
    });
};
const deserializeAws_queryDBInstanceMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBInstances: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBInstances === "") {
        contents.DBInstances = [];
    }
    else if (output["DBInstances"] !== undefined && output["DBInstances"]["DBInstance"] !== undefined) {
        contents.DBInstances = deserializeAws_queryDBInstanceList(__getArrayIfSingleItem(output["DBInstances"]["DBInstance"]), context);
    }
    return contents;
};
const deserializeAws_queryDBInstanceNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceRole = (output, context) => {
    const contents = {
        RoleArn: undefined,
        FeatureName: undefined,
        Status: undefined,
    };
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = __expectString(output["RoleArn"]);
    }
    if (output["FeatureName"] !== undefined) {
        contents.FeatureName = __expectString(output["FeatureName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceRoleAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceRoleNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceRoleQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceRoles = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBInstanceRole(entry, context);
    });
};
const deserializeAws_queryDBInstanceStatusInfo = (output, context) => {
    const contents = {
        StatusType: undefined,
        Normal: undefined,
        Status: undefined,
        Message: undefined,
    };
    if (output["StatusType"] !== undefined) {
        contents.StatusType = __expectString(output["StatusType"]);
    }
    if (output["Normal"] !== undefined) {
        contents.Normal = __parseBoolean(output["Normal"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryDBInstanceStatusInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBInstanceStatusInfo(entry, context);
    });
};
const deserializeAws_queryDBLogFileNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroup = (output, context) => {
    const contents = {
        DBParameterGroupName: undefined,
        DBParameterGroupFamily: undefined,
        Description: undefined,
        DBParameterGroupArn: undefined,
    };
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = __expectString(output["DBParameterGroupName"]);
    }
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["DBParameterGroupArn"] !== undefined) {
        contents.DBParameterGroupArn = __expectString(output["DBParameterGroupArn"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupDetails = (output, context) => {
    const contents = {
        Parameters: undefined,
        Marker: undefined,
    };
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList(__getArrayIfSingleItem(output["Parameters"]["Parameter"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBParameterGroup(entry, context);
    });
};
const deserializeAws_queryDBParameterGroupNameMessage = (output, context) => {
    const contents = {
        DBParameterGroupName: undefined,
    };
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = __expectString(output["DBParameterGroupName"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBParameterGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBParameterGroups === "") {
        contents.DBParameterGroups = [];
    }
    else if (output["DBParameterGroups"] !== undefined &&
        output["DBParameterGroups"]["DBParameterGroup"] !== undefined) {
        contents.DBParameterGroups = deserializeAws_queryDBParameterGroupList(__getArrayIfSingleItem(output["DBParameterGroups"]["DBParameterGroup"]), context);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupStatus = (output, context) => {
    const contents = {
        DBParameterGroupName: undefined,
        ParameterApplyStatus: undefined,
    };
    if (output["DBParameterGroupName"] !== undefined) {
        contents.DBParameterGroupName = __expectString(output["DBParameterGroupName"]);
    }
    if (output["ParameterApplyStatus"] !== undefined) {
        contents.ParameterApplyStatus = __expectString(output["ParameterApplyStatus"]);
    }
    return contents;
};
const deserializeAws_queryDBParameterGroupStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBParameterGroupStatus(entry, context);
    });
};
const deserializeAws_queryDBProxy = (output, context) => {
    const contents = {
        DBProxyName: undefined,
        DBProxyArn: undefined,
        Status: undefined,
        EngineFamily: undefined,
        VpcId: undefined,
        VpcSecurityGroupIds: undefined,
        VpcSubnetIds: undefined,
        Auth: undefined,
        RoleArn: undefined,
        Endpoint: undefined,
        RequireTLS: undefined,
        IdleClientTimeout: undefined,
        DebugLogging: undefined,
        CreatedDate: undefined,
        UpdatedDate: undefined,
    };
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = __expectString(output["DBProxyName"]);
    }
    if (output["DBProxyArn"] !== undefined) {
        contents.DBProxyArn = __expectString(output["DBProxyArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["EngineFamily"] !== undefined) {
        contents.EngineFamily = __expectString(output["EngineFamily"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
    }
    else if (output["VpcSecurityGroupIds"] !== undefined && output["VpcSecurityGroupIds"]["member"] !== undefined) {
        contents.VpcSecurityGroupIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSecurityGroupIds"]["member"]), context);
    }
    if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
    }
    else if (output["VpcSubnetIds"] !== undefined && output["VpcSubnetIds"]["member"] !== undefined) {
        contents.VpcSubnetIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSubnetIds"]["member"]), context);
    }
    if (output.Auth === "") {
        contents.Auth = [];
    }
    else if (output["Auth"] !== undefined && output["Auth"]["member"] !== undefined) {
        contents.Auth = deserializeAws_queryUserAuthConfigInfoList(__getArrayIfSingleItem(output["Auth"]["member"]), context);
    }
    if (output["RoleArn"] !== undefined) {
        contents.RoleArn = __expectString(output["RoleArn"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["RequireTLS"] !== undefined) {
        contents.RequireTLS = __parseBoolean(output["RequireTLS"]);
    }
    if (output["IdleClientTimeout"] !== undefined) {
        contents.IdleClientTimeout = __strictParseInt32(output["IdleClientTimeout"]);
    }
    if (output["DebugLogging"] !== undefined) {
        contents.DebugLogging = __parseBoolean(output["DebugLogging"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["CreatedDate"]));
    }
    if (output["UpdatedDate"] !== undefined) {
        contents.UpdatedDate = __expectNonNull(__parseRfc3339DateTime(output["UpdatedDate"]));
    }
    return contents;
};
const deserializeAws_queryDBProxyAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyEndpoint = (output, context) => {
    const contents = {
        DBProxyEndpointName: undefined,
        DBProxyEndpointArn: undefined,
        DBProxyName: undefined,
        Status: undefined,
        VpcId: undefined,
        VpcSecurityGroupIds: undefined,
        VpcSubnetIds: undefined,
        Endpoint: undefined,
        CreatedDate: undefined,
        TargetRole: undefined,
        IsDefault: undefined,
    };
    if (output["DBProxyEndpointName"] !== undefined) {
        contents.DBProxyEndpointName = __expectString(output["DBProxyEndpointName"]);
    }
    if (output["DBProxyEndpointArn"] !== undefined) {
        contents.DBProxyEndpointArn = __expectString(output["DBProxyEndpointArn"]);
    }
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = __expectString(output["DBProxyName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output.VpcSecurityGroupIds === "") {
        contents.VpcSecurityGroupIds = [];
    }
    else if (output["VpcSecurityGroupIds"] !== undefined && output["VpcSecurityGroupIds"]["member"] !== undefined) {
        contents.VpcSecurityGroupIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSecurityGroupIds"]["member"]), context);
    }
    if (output.VpcSubnetIds === "") {
        contents.VpcSubnetIds = [];
    }
    else if (output["VpcSubnetIds"] !== undefined && output["VpcSubnetIds"]["member"] !== undefined) {
        contents.VpcSubnetIds = deserializeAws_queryStringList(__getArrayIfSingleItem(output["VpcSubnetIds"]["member"]), context);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["CreatedDate"]));
    }
    if (output["TargetRole"] !== undefined) {
        contents.TargetRole = __expectString(output["TargetRole"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["IsDefault"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyEndpointAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyEndpointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBProxyEndpoint(entry, context);
    });
};
const deserializeAws_queryDBProxyEndpointNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyEndpointQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBProxy(entry, context);
    });
};
const deserializeAws_queryDBProxyNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyTarget = (output, context) => {
    const contents = {
        TargetArn: undefined,
        Endpoint: undefined,
        TrackedClusterId: undefined,
        RdsResourceId: undefined,
        Port: undefined,
        Type: undefined,
        Role: undefined,
        TargetHealth: undefined,
    };
    if (output["TargetArn"] !== undefined) {
        contents.TargetArn = __expectString(output["TargetArn"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["TrackedClusterId"] !== undefined) {
        contents.TrackedClusterId = __expectString(output["TrackedClusterId"]);
    }
    if (output["RdsResourceId"] !== undefined) {
        contents.RdsResourceId = __expectString(output["RdsResourceId"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["Role"] !== undefined) {
        contents.Role = __expectString(output["Role"]);
    }
    if (output["TargetHealth"] !== undefined) {
        contents.TargetHealth = deserializeAws_queryTargetHealth(output["TargetHealth"], context);
    }
    return contents;
};
const deserializeAws_queryDBProxyTargetAlreadyRegisteredFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyTargetGroup = (output, context) => {
    const contents = {
        DBProxyName: undefined,
        TargetGroupName: undefined,
        TargetGroupArn: undefined,
        IsDefault: undefined,
        Status: undefined,
        ConnectionPoolConfig: undefined,
        CreatedDate: undefined,
        UpdatedDate: undefined,
    };
    if (output["DBProxyName"] !== undefined) {
        contents.DBProxyName = __expectString(output["DBProxyName"]);
    }
    if (output["TargetGroupName"] !== undefined) {
        contents.TargetGroupName = __expectString(output["TargetGroupName"]);
    }
    if (output["TargetGroupArn"] !== undefined) {
        contents.TargetGroupArn = __expectString(output["TargetGroupArn"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["IsDefault"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["ConnectionPoolConfig"] !== undefined) {
        contents.ConnectionPoolConfig = deserializeAws_queryConnectionPoolConfigurationInfo(output["ConnectionPoolConfig"], context);
    }
    if (output["CreatedDate"] !== undefined) {
        contents.CreatedDate = __expectNonNull(__parseRfc3339DateTime(output["CreatedDate"]));
    }
    if (output["UpdatedDate"] !== undefined) {
        contents.UpdatedDate = __expectNonNull(__parseRfc3339DateTime(output["UpdatedDate"]));
    }
    return contents;
};
const deserializeAws_queryDBProxyTargetGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBProxyTargetNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroup = (output, context) => {
    const contents = {
        OwnerId: undefined,
        DBSecurityGroupName: undefined,
        DBSecurityGroupDescription: undefined,
        VpcId: undefined,
        EC2SecurityGroups: undefined,
        IPRanges: undefined,
        DBSecurityGroupArn: undefined,
    };
    if (output["OwnerId"] !== undefined) {
        contents.OwnerId = __expectString(output["OwnerId"]);
    }
    if (output["DBSecurityGroupName"] !== undefined) {
        contents.DBSecurityGroupName = __expectString(output["DBSecurityGroupName"]);
    }
    if (output["DBSecurityGroupDescription"] !== undefined) {
        contents.DBSecurityGroupDescription = __expectString(output["DBSecurityGroupDescription"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output.EC2SecurityGroups === "") {
        contents.EC2SecurityGroups = [];
    }
    else if (output["EC2SecurityGroups"] !== undefined &&
        output["EC2SecurityGroups"]["EC2SecurityGroup"] !== undefined) {
        contents.EC2SecurityGroups = deserializeAws_queryEC2SecurityGroupList(__getArrayIfSingleItem(output["EC2SecurityGroups"]["EC2SecurityGroup"]), context);
    }
    if (output.IPRanges === "") {
        contents.IPRanges = [];
    }
    else if (output["IPRanges"] !== undefined && output["IPRanges"]["IPRange"] !== undefined) {
        contents.IPRanges = deserializeAws_queryIPRangeList(__getArrayIfSingleItem(output["IPRanges"]["IPRange"]), context);
    }
    if (output["DBSecurityGroupArn"] !== undefined) {
        contents.DBSecurityGroupArn = __expectString(output["DBSecurityGroupArn"]);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroupAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroupMembership = (output, context) => {
    const contents = {
        DBSecurityGroupName: undefined,
        Status: undefined,
    };
    if (output["DBSecurityGroupName"] !== undefined) {
        contents.DBSecurityGroupName = __expectString(output["DBSecurityGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBSecurityGroupMembership(entry, context);
    });
};
const deserializeAws_queryDBSecurityGroupMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBSecurityGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBSecurityGroups === "") {
        contents.DBSecurityGroups = [];
    }
    else if (output["DBSecurityGroups"] !== undefined && output["DBSecurityGroups"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroups = deserializeAws_queryDBSecurityGroups(__getArrayIfSingleItem(output["DBSecurityGroups"]["DBSecurityGroup"]), context);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroupNotSupportedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSecurityGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBSecurityGroup(entry, context);
    });
};
const deserializeAws_queryDBSnapshot = (output, context) => {
    const contents = {
        DBSnapshotIdentifier: undefined,
        DBInstanceIdentifier: undefined,
        SnapshotCreateTime: undefined,
        Engine: undefined,
        AllocatedStorage: undefined,
        Status: undefined,
        Port: undefined,
        AvailabilityZone: undefined,
        VpcId: undefined,
        InstanceCreateTime: undefined,
        MasterUsername: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        SnapshotType: undefined,
        Iops: undefined,
        OptionGroupName: undefined,
        PercentProgress: undefined,
        SourceRegion: undefined,
        SourceDBSnapshotIdentifier: undefined,
        StorageType: undefined,
        TdeCredentialArn: undefined,
        Encrypted: undefined,
        KmsKeyId: undefined,
        DBSnapshotArn: undefined,
        Timezone: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        ProcessorFeatures: undefined,
        DbiResourceId: undefined,
        TagList: undefined,
        OriginalSnapshotCreateTime: undefined,
        SnapshotDatabaseTime: undefined,
        SnapshotTarget: undefined,
        StorageThroughput: undefined,
    };
    if (output["DBSnapshotIdentifier"] !== undefined) {
        contents.DBSnapshotIdentifier = __expectString(output["DBSnapshotIdentifier"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["SnapshotCreateTime"] !== undefined) {
        contents.SnapshotCreateTime = __expectNonNull(__parseRfc3339DateTime(output["SnapshotCreateTime"]));
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["AvailabilityZone"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["InstanceCreateTime"] !== undefined) {
        contents.InstanceCreateTime = __expectNonNull(__parseRfc3339DateTime(output["InstanceCreateTime"]));
    }
    if (output["MasterUsername"] !== undefined) {
        contents.MasterUsername = __expectString(output["MasterUsername"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["SnapshotType"] !== undefined) {
        contents.SnapshotType = __expectString(output["SnapshotType"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __strictParseInt32(output["PercentProgress"]);
    }
    if (output["SourceRegion"] !== undefined) {
        contents.SourceRegion = __expectString(output["SourceRegion"]);
    }
    if (output["SourceDBSnapshotIdentifier"] !== undefined) {
        contents.SourceDBSnapshotIdentifier = __expectString(output["SourceDBSnapshotIdentifier"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["TdeCredentialArn"] !== undefined) {
        contents.TdeCredentialArn = __expectString(output["TdeCredentialArn"]);
    }
    if (output["Encrypted"] !== undefined) {
        contents.Encrypted = __parseBoolean(output["Encrypted"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["DBSnapshotArn"] !== undefined) {
        contents.DBSnapshotArn = __expectString(output["DBSnapshotArn"]);
    }
    if (output["Timezone"] !== undefined) {
        contents.Timezone = __expectString(output["Timezone"]);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    else if (output["ProcessorFeatures"] !== undefined &&
        output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList(__getArrayIfSingleItem(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["DbiResourceId"] !== undefined) {
        contents.DbiResourceId = __expectString(output["DbiResourceId"]);
    }
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    if (output["OriginalSnapshotCreateTime"] !== undefined) {
        contents.OriginalSnapshotCreateTime = __expectNonNull(__parseRfc3339DateTime(output["OriginalSnapshotCreateTime"]));
    }
    if (output["SnapshotDatabaseTime"] !== undefined) {
        contents.SnapshotDatabaseTime = __expectNonNull(__parseRfc3339DateTime(output["SnapshotDatabaseTime"]));
    }
    if (output["SnapshotTarget"] !== undefined) {
        contents.SnapshotTarget = __expectString(output["SnapshotTarget"]);
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = __strictParseInt32(output["StorageThroughput"]);
    }
    return contents;
};
const deserializeAws_queryDBSnapshotAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSnapshotAttribute = (output, context) => {
    const contents = {
        AttributeName: undefined,
        AttributeValues: undefined,
    };
    if (output["AttributeName"] !== undefined) {
        contents.AttributeName = __expectString(output["AttributeName"]);
    }
    if (output.AttributeValues === "") {
        contents.AttributeValues = [];
    }
    else if (output["AttributeValues"] !== undefined && output["AttributeValues"]["AttributeValue"] !== undefined) {
        contents.AttributeValues = deserializeAws_queryAttributeValueList(__getArrayIfSingleItem(output["AttributeValues"]["AttributeValue"]), context);
    }
    return contents;
};
const deserializeAws_queryDBSnapshotAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBSnapshotAttribute(entry, context);
    });
};
const deserializeAws_queryDBSnapshotAttributesResult = (output, context) => {
    const contents = {
        DBSnapshotIdentifier: undefined,
        DBSnapshotAttributes: undefined,
    };
    if (output["DBSnapshotIdentifier"] !== undefined) {
        contents.DBSnapshotIdentifier = __expectString(output["DBSnapshotIdentifier"]);
    }
    if (output.DBSnapshotAttributes === "") {
        contents.DBSnapshotAttributes = [];
    }
    else if (output["DBSnapshotAttributes"] !== undefined &&
        output["DBSnapshotAttributes"]["DBSnapshotAttribute"] !== undefined) {
        contents.DBSnapshotAttributes = deserializeAws_queryDBSnapshotAttributeList(__getArrayIfSingleItem(output["DBSnapshotAttributes"]["DBSnapshotAttribute"]), context);
    }
    return contents;
};
const deserializeAws_queryDBSnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBSnapshot(entry, context);
    });
};
const deserializeAws_queryDBSnapshotMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBSnapshots: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBSnapshots === "") {
        contents.DBSnapshots = [];
    }
    else if (output["DBSnapshots"] !== undefined && output["DBSnapshots"]["DBSnapshot"] !== undefined) {
        contents.DBSnapshots = deserializeAws_queryDBSnapshotList(__getArrayIfSingleItem(output["DBSnapshots"]["DBSnapshot"]), context);
    }
    return contents;
};
const deserializeAws_queryDBSnapshotNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroup = (output, context) => {
    const contents = {
        DBSubnetGroupName: undefined,
        DBSubnetGroupDescription: undefined,
        VpcId: undefined,
        SubnetGroupStatus: undefined,
        Subnets: undefined,
        DBSubnetGroupArn: undefined,
        SupportedNetworkTypes: undefined,
    };
    if (output["DBSubnetGroupName"] !== undefined) {
        contents.DBSubnetGroupName = __expectString(output["DBSubnetGroupName"]);
    }
    if (output["DBSubnetGroupDescription"] !== undefined) {
        contents.DBSubnetGroupDescription = __expectString(output["DBSubnetGroupDescription"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["SubnetGroupStatus"] !== undefined) {
        contents.SubnetGroupStatus = __expectString(output["SubnetGroupStatus"]);
    }
    if (output.Subnets === "") {
        contents.Subnets = [];
    }
    else if (output["Subnets"] !== undefined && output["Subnets"]["Subnet"] !== undefined) {
        contents.Subnets = deserializeAws_querySubnetList(__getArrayIfSingleItem(output["Subnets"]["Subnet"]), context);
    }
    if (output["DBSubnetGroupArn"] !== undefined) {
        contents.DBSubnetGroupArn = __expectString(output["DBSubnetGroupArn"]);
    }
    if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
    }
    else if (output["SupportedNetworkTypes"] !== undefined && output["SupportedNetworkTypes"]["member"] !== undefined) {
        contents.SupportedNetworkTypes = deserializeAws_queryStringList(__getArrayIfSingleItem(output["SupportedNetworkTypes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroupAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroupDoesNotCoverEnoughAZs = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroupMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        DBSubnetGroups: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.DBSubnetGroups === "") {
        contents.DBSubnetGroups = [];
    }
    else if (output["DBSubnetGroups"] !== undefined && output["DBSubnetGroups"]["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroups = deserializeAws_queryDBSubnetGroups(__getArrayIfSingleItem(output["DBSubnetGroups"]["DBSubnetGroup"]), context);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroupNotAllowedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBSubnetGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBSubnetGroup(entry, context);
    });
};
const deserializeAws_queryDBSubnetQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDBUpgradeDependencyFailureFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDeleteBlueGreenDeploymentResponse = (output, context) => {
    const contents = {
        BlueGreenDeployment: undefined,
    };
    if (output["BlueGreenDeployment"] !== undefined) {
        contents.BlueGreenDeployment = deserializeAws_queryBlueGreenDeployment(output["BlueGreenDeployment"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteDBClusterSnapshotResult = (output, context) => {
    const contents = {
        DBClusterSnapshot: undefined,
    };
    if (output["DBClusterSnapshot"] !== undefined) {
        contents.DBClusterSnapshot = deserializeAws_queryDBClusterSnapshot(output["DBClusterSnapshot"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteDBInstanceAutomatedBackupResult = (output, context) => {
    const contents = {
        DBInstanceAutomatedBackup: undefined,
    };
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteDBInstanceResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteDBProxyEndpointResponse = (output, context) => {
    const contents = {
        DBProxyEndpoint: undefined,
    };
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteDBProxyResponse = (output, context) => {
    const contents = {
        DBProxy: undefined,
    };
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteDBSnapshotResult = (output, context) => {
    const contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteEventSubscriptionResult = (output, context) => {
    const contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const deserializeAws_queryDeleteGlobalClusterResult = (output, context) => {
    const contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const deserializeAws_queryDeregisterDBProxyTargetsResponse = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDescribeBlueGreenDeploymentsResponse = (output, context) => {
    const contents = {
        BlueGreenDeployments: undefined,
        Marker: undefined,
    };
    if (output.BlueGreenDeployments === "") {
        contents.BlueGreenDeployments = [];
    }
    else if (output["BlueGreenDeployments"] !== undefined && output["BlueGreenDeployments"]["member"] !== undefined) {
        contents.BlueGreenDeployments = deserializeAws_queryBlueGreenDeploymentList(__getArrayIfSingleItem(output["BlueGreenDeployments"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDBClusterSnapshotAttributesResult = (output, context) => {
    const contents = {
        DBClusterSnapshotAttributesResult: undefined,
    };
    if (output["DBClusterSnapshotAttributesResult"] !== undefined) {
        contents.DBClusterSnapshotAttributesResult = deserializeAws_queryDBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeDBLogFilesDetails = (output, context) => {
    const contents = {
        LogFileName: undefined,
        LastWritten: undefined,
        Size: undefined,
    };
    if (output["LogFileName"] !== undefined) {
        contents.LogFileName = __expectString(output["LogFileName"]);
    }
    if (output["LastWritten"] !== undefined) {
        contents.LastWritten = __strictParseLong(output["LastWritten"]);
    }
    if (output["Size"] !== undefined) {
        contents.Size = __strictParseLong(output["Size"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDBLogFilesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDescribeDBLogFilesDetails(entry, context);
    });
};
const deserializeAws_queryDescribeDBLogFilesResponse = (output, context) => {
    const contents = {
        DescribeDBLogFiles: undefined,
        Marker: undefined,
    };
    if (output.DescribeDBLogFiles === "") {
        contents.DescribeDBLogFiles = [];
    }
    else if (output["DescribeDBLogFiles"] !== undefined &&
        output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"] !== undefined) {
        contents.DescribeDBLogFiles = deserializeAws_queryDescribeDBLogFilesList(__getArrayIfSingleItem(output["DescribeDBLogFiles"]["DescribeDBLogFilesDetails"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDBProxiesResponse = (output, context) => {
    const contents = {
        DBProxies: undefined,
        Marker: undefined,
    };
    if (output.DBProxies === "") {
        contents.DBProxies = [];
    }
    else if (output["DBProxies"] !== undefined && output["DBProxies"]["member"] !== undefined) {
        contents.DBProxies = deserializeAws_queryDBProxyList(__getArrayIfSingleItem(output["DBProxies"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDBProxyEndpointsResponse = (output, context) => {
    const contents = {
        DBProxyEndpoints: undefined,
        Marker: undefined,
    };
    if (output.DBProxyEndpoints === "") {
        contents.DBProxyEndpoints = [];
    }
    else if (output["DBProxyEndpoints"] !== undefined && output["DBProxyEndpoints"]["member"] !== undefined) {
        contents.DBProxyEndpoints = deserializeAws_queryDBProxyEndpointList(__getArrayIfSingleItem(output["DBProxyEndpoints"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDBProxyTargetGroupsResponse = (output, context) => {
    const contents = {
        TargetGroups: undefined,
        Marker: undefined,
    };
    if (output.TargetGroups === "") {
        contents.TargetGroups = [];
    }
    else if (output["TargetGroups"] !== undefined && output["TargetGroups"]["member"] !== undefined) {
        contents.TargetGroups = deserializeAws_queryTargetGroupList(__getArrayIfSingleItem(output["TargetGroups"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDBProxyTargetsResponse = (output, context) => {
    const contents = {
        Targets: undefined,
        Marker: undefined,
    };
    if (output.Targets === "") {
        contents.Targets = [];
    }
    else if (output["Targets"] !== undefined && output["Targets"]["member"] !== undefined) {
        contents.Targets = deserializeAws_queryTargetList(__getArrayIfSingleItem(output["Targets"]["member"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryDescribeDBSnapshotAttributesResult = (output, context) => {
    const contents = {
        DBSnapshotAttributesResult: undefined,
    };
    if (output["DBSnapshotAttributesResult"] !== undefined) {
        contents.DBSnapshotAttributesResult = deserializeAws_queryDBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeEngineDefaultClusterParametersResult = (output, context) => {
    const contents = {
        EngineDefaults: undefined,
    };
    if (output["EngineDefaults"] !== undefined) {
        contents.EngineDefaults = deserializeAws_queryEngineDefaults(output["EngineDefaults"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeEngineDefaultParametersResult = (output, context) => {
    const contents = {
        EngineDefaults: undefined,
    };
    if (output["EngineDefaults"] !== undefined) {
        contents.EngineDefaults = deserializeAws_queryEngineDefaults(output["EngineDefaults"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeValidDBInstanceModificationsResult = (output, context) => {
    const contents = {
        ValidDBInstanceModificationsMessage: undefined,
    };
    if (output["ValidDBInstanceModificationsMessage"] !== undefined) {
        contents.ValidDBInstanceModificationsMessage = deserializeAws_queryValidDBInstanceModificationsMessage(output["ValidDBInstanceModificationsMessage"], context);
    }
    return contents;
};
const deserializeAws_queryDomainMembership = (output, context) => {
    const contents = {
        Domain: undefined,
        Status: undefined,
        FQDN: undefined,
        IAMRoleName: undefined,
    };
    if (output["Domain"] !== undefined) {
        contents.Domain = __expectString(output["Domain"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FQDN"] !== undefined) {
        contents.FQDN = __expectString(output["FQDN"]);
    }
    if (output["IAMRoleName"] !== undefined) {
        contents.IAMRoleName = __expectString(output["IAMRoleName"]);
    }
    return contents;
};
const deserializeAws_queryDomainMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDomainMembership(entry, context);
    });
};
const deserializeAws_queryDomainNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryDoubleRange = (output, context) => {
    const contents = {
        From: undefined,
        To: undefined,
    };
    if (output["From"] !== undefined) {
        contents.From = __strictParseFloat(output["From"]);
    }
    if (output["To"] !== undefined) {
        contents.To = __strictParseFloat(output["To"]);
    }
    return contents;
};
const deserializeAws_queryDoubleRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDoubleRange(entry, context);
    });
};
const deserializeAws_queryDownloadDBLogFilePortionDetails = (output, context) => {
    const contents = {
        LogFileData: undefined,
        Marker: undefined,
        AdditionalDataPending: undefined,
    };
    if (output["LogFileData"] !== undefined) {
        contents.LogFileData = __expectString(output["LogFileData"]);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output["AdditionalDataPending"] !== undefined) {
        contents.AdditionalDataPending = __parseBoolean(output["AdditionalDataPending"]);
    }
    return contents;
};
const deserializeAws_queryEC2SecurityGroup = (output, context) => {
    const contents = {
        Status: undefined,
        EC2SecurityGroupName: undefined,
        EC2SecurityGroupId: undefined,
        EC2SecurityGroupOwnerId: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["EC2SecurityGroupName"] !== undefined) {
        contents.EC2SecurityGroupName = __expectString(output["EC2SecurityGroupName"]);
    }
    if (output["EC2SecurityGroupId"] !== undefined) {
        contents.EC2SecurityGroupId = __expectString(output["EC2SecurityGroupId"]);
    }
    if (output["EC2SecurityGroupOwnerId"] !== undefined) {
        contents.EC2SecurityGroupOwnerId = __expectString(output["EC2SecurityGroupOwnerId"]);
    }
    return contents;
};
const deserializeAws_queryEC2SecurityGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEC2SecurityGroup(entry, context);
    });
};
const deserializeAws_queryEndpoint = (output, context) => {
    const contents = {
        Address: undefined,
        Port: undefined,
        HostedZoneId: undefined,
    };
    if (output["Address"] !== undefined) {
        contents.Address = __expectString(output["Address"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["HostedZoneId"] !== undefined) {
        contents.HostedZoneId = __expectString(output["HostedZoneId"]);
    }
    return contents;
};
const deserializeAws_queryEngineDefaults = (output, context) => {
    const contents = {
        DBParameterGroupFamily: undefined,
        Marker: undefined,
        Parameters: undefined,
    };
    if (output["DBParameterGroupFamily"] !== undefined) {
        contents.DBParameterGroupFamily = __expectString(output["DBParameterGroupFamily"]);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["Parameter"] !== undefined) {
        contents.Parameters = deserializeAws_queryParametersList(__getArrayIfSingleItem(output["Parameters"]["Parameter"]), context);
    }
    return contents;
};
const deserializeAws_queryEngineModeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryEvent = (output, context) => {
    const contents = {
        SourceIdentifier: undefined,
        SourceType: undefined,
        Message: undefined,
        EventCategories: undefined,
        Date: undefined,
        SourceArn: undefined,
    };
    if (output["SourceIdentifier"] !== undefined) {
        contents.SourceIdentifier = __expectString(output["SourceIdentifier"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    else if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList(__getArrayIfSingleItem(output["EventCategories"]["EventCategory"]), context);
    }
    if (output["Date"] !== undefined) {
        contents.Date = __expectNonNull(__parseRfc3339DateTime(output["Date"]));
    }
    if (output["SourceArn"] !== undefined) {
        contents.SourceArn = __expectString(output["SourceArn"]);
    }
    return contents;
};
const deserializeAws_queryEventCategoriesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryEventCategoriesMap = (output, context) => {
    const contents = {
        SourceType: undefined,
        EventCategories: undefined,
    };
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    if (output.EventCategories === "") {
        contents.EventCategories = [];
    }
    else if (output["EventCategories"] !== undefined && output["EventCategories"]["EventCategory"] !== undefined) {
        contents.EventCategories = deserializeAws_queryEventCategoriesList(__getArrayIfSingleItem(output["EventCategories"]["EventCategory"]), context);
    }
    return contents;
};
const deserializeAws_queryEventCategoriesMapList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEventCategoriesMap(entry, context);
    });
};
const deserializeAws_queryEventCategoriesMessage = (output, context) => {
    const contents = {
        EventCategoriesMapList: undefined,
    };
    if (output.EventCategoriesMapList === "") {
        contents.EventCategoriesMapList = [];
    }
    else if (output["EventCategoriesMapList"] !== undefined &&
        output["EventCategoriesMapList"]["EventCategoriesMap"] !== undefined) {
        contents.EventCategoriesMapList = deserializeAws_queryEventCategoriesMapList(__getArrayIfSingleItem(output["EventCategoriesMapList"]["EventCategoriesMap"]), context);
    }
    return contents;
};
const deserializeAws_queryEventList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEvent(entry, context);
    });
};
const deserializeAws_queryEventsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        Events: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.Events === "") {
        contents.Events = [];
    }
    else if (output["Events"] !== undefined && output["Events"]["Event"] !== undefined) {
        contents.Events = deserializeAws_queryEventList(__getArrayIfSingleItem(output["Events"]["Event"]), context);
    }
    return contents;
};
const deserializeAws_queryEventSubscription = (output, context) => {
    const contents = {
        CustomerAwsId: undefined,
        CustSubscriptionId: undefined,
        SnsTopicArn: undefined,
        Status: undefined,
        SubscriptionCreationTime: undefined,
        SourceType: undefined,
        SourceIdsList: undefined,
        EventCategoriesList: undefined,
        Enabled: undefined,
        EventSubscriptionArn: undefined,
    };
    if (output["CustomerAwsId"] !== undefined) {
        contents.CustomerAwsId = __expectString(output["CustomerAwsId"]);
    }
    if (output["CustSubscriptionId"] !== undefined) {
        contents.CustSubscriptionId = __expectString(output["CustSubscriptionId"]);
    }
    if (output["SnsTopicArn"] !== undefined) {
        contents.SnsTopicArn = __expectString(output["SnsTopicArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["SubscriptionCreationTime"] !== undefined) {
        contents.SubscriptionCreationTime = __expectString(output["SubscriptionCreationTime"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    if (output.SourceIdsList === "") {
        contents.SourceIdsList = [];
    }
    else if (output["SourceIdsList"] !== undefined && output["SourceIdsList"]["SourceId"] !== undefined) {
        contents.SourceIdsList = deserializeAws_querySourceIdsList(__getArrayIfSingleItem(output["SourceIdsList"]["SourceId"]), context);
    }
    if (output.EventCategoriesList === "") {
        contents.EventCategoriesList = [];
    }
    else if (output["EventCategoriesList"] !== undefined &&
        output["EventCategoriesList"]["EventCategory"] !== undefined) {
        contents.EventCategoriesList = deserializeAws_queryEventCategoriesList(__getArrayIfSingleItem(output["EventCategoriesList"]["EventCategory"]), context);
    }
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["EventSubscriptionArn"] !== undefined) {
        contents.EventSubscriptionArn = __expectString(output["EventSubscriptionArn"]);
    }
    return contents;
};
const deserializeAws_queryEventSubscriptionQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEventSubscriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEventSubscription(entry, context);
    });
};
const deserializeAws_queryEventSubscriptionsMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        EventSubscriptionsList: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.EventSubscriptionsList === "") {
        contents.EventSubscriptionsList = [];
    }
    else if (output["EventSubscriptionsList"] !== undefined &&
        output["EventSubscriptionsList"]["EventSubscription"] !== undefined) {
        contents.EventSubscriptionsList = deserializeAws_queryEventSubscriptionsList(__getArrayIfSingleItem(output["EventSubscriptionsList"]["EventSubscription"]), context);
    }
    return contents;
};
const deserializeAws_queryExportTask = (output, context) => {
    const contents = {
        ExportTaskIdentifier: undefined,
        SourceArn: undefined,
        ExportOnly: undefined,
        SnapshotTime: undefined,
        TaskStartTime: undefined,
        TaskEndTime: undefined,
        S3Bucket: undefined,
        S3Prefix: undefined,
        IamRoleArn: undefined,
        KmsKeyId: undefined,
        Status: undefined,
        PercentProgress: undefined,
        TotalExtractedDataInGB: undefined,
        FailureCause: undefined,
        WarningMessage: undefined,
        SourceType: undefined,
    };
    if (output["ExportTaskIdentifier"] !== undefined) {
        contents.ExportTaskIdentifier = __expectString(output["ExportTaskIdentifier"]);
    }
    if (output["SourceArn"] !== undefined) {
        contents.SourceArn = __expectString(output["SourceArn"]);
    }
    if (output.ExportOnly === "") {
        contents.ExportOnly = [];
    }
    else if (output["ExportOnly"] !== undefined && output["ExportOnly"]["member"] !== undefined) {
        contents.ExportOnly = deserializeAws_queryStringList(__getArrayIfSingleItem(output["ExportOnly"]["member"]), context);
    }
    if (output["SnapshotTime"] !== undefined) {
        contents.SnapshotTime = __expectNonNull(__parseRfc3339DateTime(output["SnapshotTime"]));
    }
    if (output["TaskStartTime"] !== undefined) {
        contents.TaskStartTime = __expectNonNull(__parseRfc3339DateTime(output["TaskStartTime"]));
    }
    if (output["TaskEndTime"] !== undefined) {
        contents.TaskEndTime = __expectNonNull(__parseRfc3339DateTime(output["TaskEndTime"]));
    }
    if (output["S3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["S3Bucket"]);
    }
    if (output["S3Prefix"] !== undefined) {
        contents.S3Prefix = __expectString(output["S3Prefix"]);
    }
    if (output["IamRoleArn"] !== undefined) {
        contents.IamRoleArn = __expectString(output["IamRoleArn"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["PercentProgress"] !== undefined) {
        contents.PercentProgress = __strictParseInt32(output["PercentProgress"]);
    }
    if (output["TotalExtractedDataInGB"] !== undefined) {
        contents.TotalExtractedDataInGB = __strictParseInt32(output["TotalExtractedDataInGB"]);
    }
    if (output["FailureCause"] !== undefined) {
        contents.FailureCause = __expectString(output["FailureCause"]);
    }
    if (output["WarningMessage"] !== undefined) {
        contents.WarningMessage = __expectString(output["WarningMessage"]);
    }
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    return contents;
};
const deserializeAws_queryExportTaskAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryExportTaskNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryExportTasksList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryExportTask(entry, context);
    });
};
const deserializeAws_queryExportTasksMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ExportTasks: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.ExportTasks === "") {
        contents.ExportTasks = [];
    }
    else if (output["ExportTasks"] !== undefined && output["ExportTasks"]["ExportTask"] !== undefined) {
        contents.ExportTasks = deserializeAws_queryExportTasksList(__getArrayIfSingleItem(output["ExportTasks"]["ExportTask"]), context);
    }
    return contents;
};
const deserializeAws_queryFailoverDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryFailoverGlobalClusterResult = (output, context) => {
    const contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const deserializeAws_queryFailoverState = (output, context) => {
    const contents = {
        Status: undefined,
        FromDbClusterArn: undefined,
        ToDbClusterArn: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FromDbClusterArn"] !== undefined) {
        contents.FromDbClusterArn = __expectString(output["FromDbClusterArn"]);
    }
    if (output["ToDbClusterArn"] !== undefined) {
        contents.ToDbClusterArn = __expectString(output["ToDbClusterArn"]);
    }
    return contents;
};
const deserializeAws_queryFeatureNameList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryGlobalCluster = (output, context) => {
    const contents = {
        GlobalClusterIdentifier: undefined,
        GlobalClusterResourceId: undefined,
        GlobalClusterArn: undefined,
        Status: undefined,
        Engine: undefined,
        EngineVersion: undefined,
        DatabaseName: undefined,
        StorageEncrypted: undefined,
        DeletionProtection: undefined,
        GlobalClusterMembers: undefined,
        FailoverState: undefined,
    };
    if (output["GlobalClusterIdentifier"] !== undefined) {
        contents.GlobalClusterIdentifier = __expectString(output["GlobalClusterIdentifier"]);
    }
    if (output["GlobalClusterResourceId"] !== undefined) {
        contents.GlobalClusterResourceId = __expectString(output["GlobalClusterResourceId"]);
    }
    if (output["GlobalClusterArn"] !== undefined) {
        contents.GlobalClusterArn = __expectString(output["GlobalClusterArn"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["DatabaseName"] !== undefined) {
        contents.DatabaseName = __expectString(output["DatabaseName"]);
    }
    if (output["StorageEncrypted"] !== undefined) {
        contents.StorageEncrypted = __parseBoolean(output["StorageEncrypted"]);
    }
    if (output["DeletionProtection"] !== undefined) {
        contents.DeletionProtection = __parseBoolean(output["DeletionProtection"]);
    }
    if (output.GlobalClusterMembers === "") {
        contents.GlobalClusterMembers = [];
    }
    else if (output["GlobalClusterMembers"] !== undefined &&
        output["GlobalClusterMembers"]["GlobalClusterMember"] !== undefined) {
        contents.GlobalClusterMembers = deserializeAws_queryGlobalClusterMemberList(__getArrayIfSingleItem(output["GlobalClusterMembers"]["GlobalClusterMember"]), context);
    }
    if (output["FailoverState"] !== undefined) {
        contents.FailoverState = deserializeAws_queryFailoverState(output["FailoverState"], context);
    }
    return contents;
};
const deserializeAws_queryGlobalClusterAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryGlobalClusterList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryGlobalCluster(entry, context);
    });
};
const deserializeAws_queryGlobalClusterMember = (output, context) => {
    const contents = {
        DBClusterArn: undefined,
        Readers: undefined,
        IsWriter: undefined,
        GlobalWriteForwardingStatus: undefined,
    };
    if (output["DBClusterArn"] !== undefined) {
        contents.DBClusterArn = __expectString(output["DBClusterArn"]);
    }
    if (output.Readers === "") {
        contents.Readers = [];
    }
    else if (output["Readers"] !== undefined && output["Readers"]["member"] !== undefined) {
        contents.Readers = deserializeAws_queryReadersArnList(__getArrayIfSingleItem(output["Readers"]["member"]), context);
    }
    if (output["IsWriter"] !== undefined) {
        contents.IsWriter = __parseBoolean(output["IsWriter"]);
    }
    if (output["GlobalWriteForwardingStatus"] !== undefined) {
        contents.GlobalWriteForwardingStatus = __expectString(output["GlobalWriteForwardingStatus"]);
    }
    return contents;
};
const deserializeAws_queryGlobalClusterMemberList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryGlobalClusterMember(entry, context);
    });
};
const deserializeAws_queryGlobalClusterNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryGlobalClusterQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryGlobalClustersMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        GlobalClusters: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.GlobalClusters === "") {
        contents.GlobalClusters = [];
    }
    else if (output["GlobalClusters"] !== undefined && output["GlobalClusters"]["GlobalClusterMember"] !== undefined) {
        contents.GlobalClusters = deserializeAws_queryGlobalClusterList(__getArrayIfSingleItem(output["GlobalClusters"]["GlobalClusterMember"]), context);
    }
    return contents;
};
const deserializeAws_queryIamRoleMissingPermissionsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryIamRoleNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInstanceQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInsufficientAvailableIPsInSubnetFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInsufficientDBClusterCapacityFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInsufficientDBInstanceCapacityFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInsufficientStorageClusterCapacityFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidBlueGreenDeploymentStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidCustomDBEngineVersionStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBClusterCapacityFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBClusterEndpointStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBClusterSnapshotStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBClusterStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBInstanceAutomatedBackupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBInstanceStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBParameterGroupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBProxyEndpointStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBProxyStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBSecurityGroupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBSnapshotStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBSubnetGroupFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBSubnetGroupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidDBSubnetStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidEventSubscriptionStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidExportOnlyFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidExportSourceStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidExportTaskStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidGlobalClusterStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidOptionGroupStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidRestoreFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidS3BucketFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidSubnet = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidVPCNetworkStateFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryIPRange = (output, context) => {
    const contents = {
        Status: undefined,
        CIDRIP: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["CIDRIP"] !== undefined) {
        contents.CIDRIP = __expectString(output["CIDRIP"]);
    }
    return contents;
};
const deserializeAws_queryIPRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryIPRange(entry, context);
    });
};
const deserializeAws_queryKMSKeyNotAccessibleFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryLogTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryMasterUserSecret = (output, context) => {
    const contents = {
        SecretArn: undefined,
        SecretStatus: undefined,
        KmsKeyId: undefined,
    };
    if (output["SecretArn"] !== undefined) {
        contents.SecretArn = __expectString(output["SecretArn"]);
    }
    if (output["SecretStatus"] !== undefined) {
        contents.SecretStatus = __expectString(output["SecretStatus"]);
    }
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    return contents;
};
const deserializeAws_queryMinimumEngineVersionPerAllowedValue = (output, context) => {
    const contents = {
        AllowedValue: undefined,
        MinimumEngineVersion: undefined,
    };
    if (output["AllowedValue"] !== undefined) {
        contents.AllowedValue = __expectString(output["AllowedValue"]);
    }
    if (output["MinimumEngineVersion"] !== undefined) {
        contents.MinimumEngineVersion = __expectString(output["MinimumEngineVersion"]);
    }
    return contents;
};
const deserializeAws_queryMinimumEngineVersionPerAllowedValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryMinimumEngineVersionPerAllowedValue(entry, context);
    });
};
const deserializeAws_queryModifyActivityStreamResponse = (output, context) => {
    const contents = {
        KmsKeyId: undefined,
        KinesisStreamName: undefined,
        Status: undefined,
        Mode: undefined,
        EngineNativeAuditFieldsIncluded: undefined,
        PolicyStatus: undefined,
    };
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = __expectString(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Mode"] !== undefined) {
        contents.Mode = __expectString(output["Mode"]);
    }
    if (output["EngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.EngineNativeAuditFieldsIncluded = __parseBoolean(output["EngineNativeAuditFieldsIncluded"]);
    }
    if (output["PolicyStatus"] !== undefined) {
        contents.PolicyStatus = __expectString(output["PolicyStatus"]);
    }
    return contents;
};
const deserializeAws_queryModifyCertificatesResult = (output, context) => {
    const contents = {
        Certificate: undefined,
    };
    if (output["Certificate"] !== undefined) {
        contents.Certificate = deserializeAws_queryCertificate(output["Certificate"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBClusterSnapshotAttributeResult = (output, context) => {
    const contents = {
        DBClusterSnapshotAttributesResult: undefined,
    };
    if (output["DBClusterSnapshotAttributesResult"] !== undefined) {
        contents.DBClusterSnapshotAttributesResult = deserializeAws_queryDBClusterSnapshotAttributesResult(output["DBClusterSnapshotAttributesResult"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBInstanceResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBProxyEndpointResponse = (output, context) => {
    const contents = {
        DBProxyEndpoint: undefined,
    };
    if (output["DBProxyEndpoint"] !== undefined) {
        contents.DBProxyEndpoint = deserializeAws_queryDBProxyEndpoint(output["DBProxyEndpoint"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBProxyResponse = (output, context) => {
    const contents = {
        DBProxy: undefined,
    };
    if (output["DBProxy"] !== undefined) {
        contents.DBProxy = deserializeAws_queryDBProxy(output["DBProxy"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBProxyTargetGroupResponse = (output, context) => {
    const contents = {
        DBProxyTargetGroup: undefined,
    };
    if (output["DBProxyTargetGroup"] !== undefined) {
        contents.DBProxyTargetGroup = deserializeAws_queryDBProxyTargetGroup(output["DBProxyTargetGroup"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBSnapshotAttributeResult = (output, context) => {
    const contents = {
        DBSnapshotAttributesResult: undefined,
    };
    if (output["DBSnapshotAttributesResult"] !== undefined) {
        contents.DBSnapshotAttributesResult = deserializeAws_queryDBSnapshotAttributesResult(output["DBSnapshotAttributesResult"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBSnapshotResult = (output, context) => {
    const contents = {
        DBSnapshot: undefined,
    };
    if (output["DBSnapshot"] !== undefined) {
        contents.DBSnapshot = deserializeAws_queryDBSnapshot(output["DBSnapshot"], context);
    }
    return contents;
};
const deserializeAws_queryModifyDBSubnetGroupResult = (output, context) => {
    const contents = {
        DBSubnetGroup: undefined,
    };
    if (output["DBSubnetGroup"] !== undefined) {
        contents.DBSubnetGroup = deserializeAws_queryDBSubnetGroup(output["DBSubnetGroup"], context);
    }
    return contents;
};
const deserializeAws_queryModifyEventSubscriptionResult = (output, context) => {
    const contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const deserializeAws_queryModifyGlobalClusterResult = (output, context) => {
    const contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const deserializeAws_queryModifyOptionGroupResult = (output, context) => {
    const contents = {
        OptionGroup: undefined,
    };
    if (output["OptionGroup"] !== undefined) {
        contents.OptionGroup = deserializeAws_queryOptionGroup(output["OptionGroup"], context);
    }
    return contents;
};
const deserializeAws_queryNetworkTypeNotSupported = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryOption = (output, context) => {
    const contents = {
        OptionName: undefined,
        OptionDescription: undefined,
        Persistent: undefined,
        Permanent: undefined,
        Port: undefined,
        OptionVersion: undefined,
        OptionSettings: undefined,
        DBSecurityGroupMemberships: undefined,
        VpcSecurityGroupMemberships: undefined,
    };
    if (output["OptionName"] !== undefined) {
        contents.OptionName = __expectString(output["OptionName"]);
    }
    if (output["OptionDescription"] !== undefined) {
        contents.OptionDescription = __expectString(output["OptionDescription"]);
    }
    if (output["Persistent"] !== undefined) {
        contents.Persistent = __parseBoolean(output["Persistent"]);
    }
    if (output["Permanent"] !== undefined) {
        contents.Permanent = __parseBoolean(output["Permanent"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["OptionVersion"] !== undefined) {
        contents.OptionVersion = __expectString(output["OptionVersion"]);
    }
    if (output.OptionSettings === "") {
        contents.OptionSettings = [];
    }
    else if (output["OptionSettings"] !== undefined && output["OptionSettings"]["OptionSetting"] !== undefined) {
        contents.OptionSettings = deserializeAws_queryOptionSettingConfigurationList(__getArrayIfSingleItem(output["OptionSettings"]["OptionSetting"]), context);
    }
    if (output.DBSecurityGroupMemberships === "") {
        contents.DBSecurityGroupMemberships = [];
    }
    else if (output["DBSecurityGroupMemberships"] !== undefined &&
        output["DBSecurityGroupMemberships"]["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroupMemberships = deserializeAws_queryDBSecurityGroupMembershipList(__getArrayIfSingleItem(output["DBSecurityGroupMemberships"]["DBSecurityGroup"]), context);
    }
    if (output.VpcSecurityGroupMemberships === "") {
        contents.VpcSecurityGroupMemberships = [];
    }
    else if (output["VpcSecurityGroupMemberships"] !== undefined &&
        output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"] !== undefined) {
        contents.VpcSecurityGroupMemberships = deserializeAws_queryVpcSecurityGroupMembershipList(__getArrayIfSingleItem(output["VpcSecurityGroupMemberships"]["VpcSecurityGroupMembership"]), context);
    }
    return contents;
};
const deserializeAws_queryOptionGroup = (output, context) => {
    const contents = {
        OptionGroupName: undefined,
        OptionGroupDescription: undefined,
        EngineName: undefined,
        MajorEngineVersion: undefined,
        Options: undefined,
        AllowsVpcAndNonVpcInstanceMemberships: undefined,
        VpcId: undefined,
        OptionGroupArn: undefined,
        SourceOptionGroup: undefined,
        SourceAccountId: undefined,
        CopyTimestamp: undefined,
    };
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["OptionGroupDescription"] !== undefined) {
        contents.OptionGroupDescription = __expectString(output["OptionGroupDescription"]);
    }
    if (output["EngineName"] !== undefined) {
        contents.EngineName = __expectString(output["EngineName"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = __expectString(output["MajorEngineVersion"]);
    }
    if (output.Options === "") {
        contents.Options = [];
    }
    else if (output["Options"] !== undefined && output["Options"]["Option"] !== undefined) {
        contents.Options = deserializeAws_queryOptionsList(__getArrayIfSingleItem(output["Options"]["Option"]), context);
    }
    if (output["AllowsVpcAndNonVpcInstanceMemberships"] !== undefined) {
        contents.AllowsVpcAndNonVpcInstanceMemberships = __parseBoolean(output["AllowsVpcAndNonVpcInstanceMemberships"]);
    }
    if (output["VpcId"] !== undefined) {
        contents.VpcId = __expectString(output["VpcId"]);
    }
    if (output["OptionGroupArn"] !== undefined) {
        contents.OptionGroupArn = __expectString(output["OptionGroupArn"]);
    }
    if (output["SourceOptionGroup"] !== undefined) {
        contents.SourceOptionGroup = __expectString(output["SourceOptionGroup"]);
    }
    if (output["SourceAccountId"] !== undefined) {
        contents.SourceAccountId = __expectString(output["SourceAccountId"]);
    }
    if (output["CopyTimestamp"] !== undefined) {
        contents.CopyTimestamp = __expectNonNull(__parseRfc3339DateTime(output["CopyTimestamp"]));
    }
    return contents;
};
const deserializeAws_queryOptionGroupAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryOptionGroupMembership = (output, context) => {
    const contents = {
        OptionGroupName: undefined,
        Status: undefined,
    };
    if (output["OptionGroupName"] !== undefined) {
        contents.OptionGroupName = __expectString(output["OptionGroupName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryOptionGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOptionGroupMembership(entry, context);
    });
};
const deserializeAws_queryOptionGroupNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryOptionGroupOption = (output, context) => {
    const contents = {
        Name: undefined,
        Description: undefined,
        EngineName: undefined,
        MajorEngineVersion: undefined,
        MinimumRequiredMinorEngineVersion: undefined,
        PortRequired: undefined,
        DefaultPort: undefined,
        OptionsDependedOn: undefined,
        OptionsConflictsWith: undefined,
        Persistent: undefined,
        Permanent: undefined,
        RequiresAutoMinorEngineVersionUpgrade: undefined,
        VpcOnly: undefined,
        SupportsOptionVersionDowngrade: undefined,
        OptionGroupOptionSettings: undefined,
        OptionGroupOptionVersions: undefined,
        CopyableCrossAccount: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["EngineName"] !== undefined) {
        contents.EngineName = __expectString(output["EngineName"]);
    }
    if (output["MajorEngineVersion"] !== undefined) {
        contents.MajorEngineVersion = __expectString(output["MajorEngineVersion"]);
    }
    if (output["MinimumRequiredMinorEngineVersion"] !== undefined) {
        contents.MinimumRequiredMinorEngineVersion = __expectString(output["MinimumRequiredMinorEngineVersion"]);
    }
    if (output["PortRequired"] !== undefined) {
        contents.PortRequired = __parseBoolean(output["PortRequired"]);
    }
    if (output["DefaultPort"] !== undefined) {
        contents.DefaultPort = __strictParseInt32(output["DefaultPort"]);
    }
    if (output.OptionsDependedOn === "") {
        contents.OptionsDependedOn = [];
    }
    else if (output["OptionsDependedOn"] !== undefined && output["OptionsDependedOn"]["OptionName"] !== undefined) {
        contents.OptionsDependedOn = deserializeAws_queryOptionsDependedOn(__getArrayIfSingleItem(output["OptionsDependedOn"]["OptionName"]), context);
    }
    if (output.OptionsConflictsWith === "") {
        contents.OptionsConflictsWith = [];
    }
    else if (output["OptionsConflictsWith"] !== undefined &&
        output["OptionsConflictsWith"]["OptionConflictName"] !== undefined) {
        contents.OptionsConflictsWith = deserializeAws_queryOptionsConflictsWith(__getArrayIfSingleItem(output["OptionsConflictsWith"]["OptionConflictName"]), context);
    }
    if (output["Persistent"] !== undefined) {
        contents.Persistent = __parseBoolean(output["Persistent"]);
    }
    if (output["Permanent"] !== undefined) {
        contents.Permanent = __parseBoolean(output["Permanent"]);
    }
    if (output["RequiresAutoMinorEngineVersionUpgrade"] !== undefined) {
        contents.RequiresAutoMinorEngineVersionUpgrade = __parseBoolean(output["RequiresAutoMinorEngineVersionUpgrade"]);
    }
    if (output["VpcOnly"] !== undefined) {
        contents.VpcOnly = __parseBoolean(output["VpcOnly"]);
    }
    if (output["SupportsOptionVersionDowngrade"] !== undefined) {
        contents.SupportsOptionVersionDowngrade = __parseBoolean(output["SupportsOptionVersionDowngrade"]);
    }
    if (output.OptionGroupOptionSettings === "") {
        contents.OptionGroupOptionSettings = [];
    }
    else if (output["OptionGroupOptionSettings"] !== undefined &&
        output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"] !== undefined) {
        contents.OptionGroupOptionSettings = deserializeAws_queryOptionGroupOptionSettingsList(__getArrayIfSingleItem(output["OptionGroupOptionSettings"]["OptionGroupOptionSetting"]), context);
    }
    if (output.OptionGroupOptionVersions === "") {
        contents.OptionGroupOptionVersions = [];
    }
    else if (output["OptionGroupOptionVersions"] !== undefined &&
        output["OptionGroupOptionVersions"]["OptionVersion"] !== undefined) {
        contents.OptionGroupOptionVersions = deserializeAws_queryOptionGroupOptionVersionsList(__getArrayIfSingleItem(output["OptionGroupOptionVersions"]["OptionVersion"]), context);
    }
    if (output["CopyableCrossAccount"] !== undefined) {
        contents.CopyableCrossAccount = __parseBoolean(output["CopyableCrossAccount"]);
    }
    return contents;
};
const deserializeAws_queryOptionGroupOptionSetting = (output, context) => {
    const contents = {
        SettingName: undefined,
        SettingDescription: undefined,
        DefaultValue: undefined,
        ApplyType: undefined,
        AllowedValues: undefined,
        IsModifiable: undefined,
        IsRequired: undefined,
        MinimumEngineVersionPerAllowedValue: undefined,
    };
    if (output["SettingName"] !== undefined) {
        contents.SettingName = __expectString(output["SettingName"]);
    }
    if (output["SettingDescription"] !== undefined) {
        contents.SettingDescription = __expectString(output["SettingDescription"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = __expectString(output["ApplyType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = __parseBoolean(output["IsModifiable"]);
    }
    if (output["IsRequired"] !== undefined) {
        contents.IsRequired = __parseBoolean(output["IsRequired"]);
    }
    if (output.MinimumEngineVersionPerAllowedValue === "") {
        contents.MinimumEngineVersionPerAllowedValue = [];
    }
    else if (output["MinimumEngineVersionPerAllowedValue"] !== undefined &&
        output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"] !== undefined) {
        contents.MinimumEngineVersionPerAllowedValue = deserializeAws_queryMinimumEngineVersionPerAllowedValueList(__getArrayIfSingleItem(output["MinimumEngineVersionPerAllowedValue"]["MinimumEngineVersionPerAllowedValue"]), context);
    }
    return contents;
};
const deserializeAws_queryOptionGroupOptionSettingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOptionGroupOptionSetting(entry, context);
    });
};
const deserializeAws_queryOptionGroupOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOptionGroupOption(entry, context);
    });
};
const deserializeAws_queryOptionGroupOptionsMessage = (output, context) => {
    const contents = {
        OptionGroupOptions: undefined,
        Marker: undefined,
    };
    if (output.OptionGroupOptions === "") {
        contents.OptionGroupOptions = [];
    }
    else if (output["OptionGroupOptions"] !== undefined &&
        output["OptionGroupOptions"]["OptionGroupOption"] !== undefined) {
        contents.OptionGroupOptions = deserializeAws_queryOptionGroupOptionsList(__getArrayIfSingleItem(output["OptionGroupOptions"]["OptionGroupOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryOptionGroupOptionVersionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOptionVersion(entry, context);
    });
};
const deserializeAws_queryOptionGroupQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryOptionGroups = (output, context) => {
    const contents = {
        OptionGroupsList: undefined,
        Marker: undefined,
    };
    if (output.OptionGroupsList === "") {
        contents.OptionGroupsList = [];
    }
    else if (output["OptionGroupsList"] !== undefined && output["OptionGroupsList"]["OptionGroup"] !== undefined) {
        contents.OptionGroupsList = deserializeAws_queryOptionGroupsList(__getArrayIfSingleItem(output["OptionGroupsList"]["OptionGroup"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryOptionGroupsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOptionGroup(entry, context);
    });
};
const deserializeAws_queryOptionsConflictsWith = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryOptionsDependedOn = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryOptionSetting = (output, context) => {
    const contents = {
        Name: undefined,
        Value: undefined,
        DefaultValue: undefined,
        Description: undefined,
        ApplyType: undefined,
        DataType: undefined,
        AllowedValues: undefined,
        IsModifiable: undefined,
        IsCollection: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = __expectString(output["ApplyType"]);
    }
    if (output["DataType"] !== undefined) {
        contents.DataType = __expectString(output["DataType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = __parseBoolean(output["IsModifiable"]);
    }
    if (output["IsCollection"] !== undefined) {
        contents.IsCollection = __parseBoolean(output["IsCollection"]);
    }
    return contents;
};
const deserializeAws_queryOptionSettingConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOptionSetting(entry, context);
    });
};
const deserializeAws_queryOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOption(entry, context);
    });
};
const deserializeAws_queryOptionVersion = (output, context) => {
    const contents = {
        Version: undefined,
        IsDefault: undefined,
    };
    if (output["Version"] !== undefined) {
        contents.Version = __expectString(output["Version"]);
    }
    if (output["IsDefault"] !== undefined) {
        contents.IsDefault = __parseBoolean(output["IsDefault"]);
    }
    return contents;
};
const deserializeAws_queryOrderableDBInstanceOption = (output, context) => {
    const contents = {
        Engine: undefined,
        EngineVersion: undefined,
        DBInstanceClass: undefined,
        LicenseModel: undefined,
        AvailabilityZoneGroup: undefined,
        AvailabilityZones: undefined,
        MultiAZCapable: undefined,
        ReadReplicaCapable: undefined,
        Vpc: undefined,
        SupportsStorageEncryption: undefined,
        StorageType: undefined,
        SupportsIops: undefined,
        SupportsEnhancedMonitoring: undefined,
        SupportsIAMDatabaseAuthentication: undefined,
        SupportsPerformanceInsights: undefined,
        MinStorageSize: undefined,
        MaxStorageSize: undefined,
        MinIopsPerDbInstance: undefined,
        MaxIopsPerDbInstance: undefined,
        MinIopsPerGib: undefined,
        MaxIopsPerGib: undefined,
        AvailableProcessorFeatures: undefined,
        SupportedEngineModes: undefined,
        SupportsStorageAutoscaling: undefined,
        SupportsKerberosAuthentication: undefined,
        OutpostCapable: undefined,
        SupportedActivityStreamModes: undefined,
        SupportsGlobalDatabases: undefined,
        SupportsClusters: undefined,
        SupportedNetworkTypes: undefined,
        SupportsStorageThroughput: undefined,
        MinStorageThroughputPerDbInstance: undefined,
        MaxStorageThroughputPerDbInstance: undefined,
        MinStorageThroughputPerIops: undefined,
        MaxStorageThroughputPerIops: undefined,
    };
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["AvailabilityZoneGroup"] !== undefined) {
        contents.AvailabilityZoneGroup = __expectString(output["AvailabilityZoneGroup"]);
    }
    if (output.AvailabilityZones === "") {
        contents.AvailabilityZones = [];
    }
    else if (output["AvailabilityZones"] !== undefined &&
        output["AvailabilityZones"]["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZones = deserializeAws_queryAvailabilityZoneList(__getArrayIfSingleItem(output["AvailabilityZones"]["AvailabilityZone"]), context);
    }
    if (output["MultiAZCapable"] !== undefined) {
        contents.MultiAZCapable = __parseBoolean(output["MultiAZCapable"]);
    }
    if (output["ReadReplicaCapable"] !== undefined) {
        contents.ReadReplicaCapable = __parseBoolean(output["ReadReplicaCapable"]);
    }
    if (output["Vpc"] !== undefined) {
        contents.Vpc = __parseBoolean(output["Vpc"]);
    }
    if (output["SupportsStorageEncryption"] !== undefined) {
        contents.SupportsStorageEncryption = __parseBoolean(output["SupportsStorageEncryption"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["SupportsIops"] !== undefined) {
        contents.SupportsIops = __parseBoolean(output["SupportsIops"]);
    }
    if (output["SupportsEnhancedMonitoring"] !== undefined) {
        contents.SupportsEnhancedMonitoring = __parseBoolean(output["SupportsEnhancedMonitoring"]);
    }
    if (output["SupportsIAMDatabaseAuthentication"] !== undefined) {
        contents.SupportsIAMDatabaseAuthentication = __parseBoolean(output["SupportsIAMDatabaseAuthentication"]);
    }
    if (output["SupportsPerformanceInsights"] !== undefined) {
        contents.SupportsPerformanceInsights = __parseBoolean(output["SupportsPerformanceInsights"]);
    }
    if (output["MinStorageSize"] !== undefined) {
        contents.MinStorageSize = __strictParseInt32(output["MinStorageSize"]);
    }
    if (output["MaxStorageSize"] !== undefined) {
        contents.MaxStorageSize = __strictParseInt32(output["MaxStorageSize"]);
    }
    if (output["MinIopsPerDbInstance"] !== undefined) {
        contents.MinIopsPerDbInstance = __strictParseInt32(output["MinIopsPerDbInstance"]);
    }
    if (output["MaxIopsPerDbInstance"] !== undefined) {
        contents.MaxIopsPerDbInstance = __strictParseInt32(output["MaxIopsPerDbInstance"]);
    }
    if (output["MinIopsPerGib"] !== undefined) {
        contents.MinIopsPerGib = __strictParseFloat(output["MinIopsPerGib"]);
    }
    if (output["MaxIopsPerGib"] !== undefined) {
        contents.MaxIopsPerGib = __strictParseFloat(output["MaxIopsPerGib"]);
    }
    if (output.AvailableProcessorFeatures === "") {
        contents.AvailableProcessorFeatures = [];
    }
    else if (output["AvailableProcessorFeatures"] !== undefined &&
        output["AvailableProcessorFeatures"]["AvailableProcessorFeature"] !== undefined) {
        contents.AvailableProcessorFeatures = deserializeAws_queryAvailableProcessorFeatureList(__getArrayIfSingleItem(output["AvailableProcessorFeatures"]["AvailableProcessorFeature"]), context);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    if (output["SupportsStorageAutoscaling"] !== undefined) {
        contents.SupportsStorageAutoscaling = __parseBoolean(output["SupportsStorageAutoscaling"]);
    }
    if (output["SupportsKerberosAuthentication"] !== undefined) {
        contents.SupportsKerberosAuthentication = __parseBoolean(output["SupportsKerberosAuthentication"]);
    }
    if (output["OutpostCapable"] !== undefined) {
        contents.OutpostCapable = __parseBoolean(output["OutpostCapable"]);
    }
    if (output.SupportedActivityStreamModes === "") {
        contents.SupportedActivityStreamModes = [];
    }
    else if (output["SupportedActivityStreamModes"] !== undefined &&
        output["SupportedActivityStreamModes"]["member"] !== undefined) {
        contents.SupportedActivityStreamModes = deserializeAws_queryActivityStreamModeList(__getArrayIfSingleItem(output["SupportedActivityStreamModes"]["member"]), context);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = __parseBoolean(output["SupportsGlobalDatabases"]);
    }
    if (output["SupportsClusters"] !== undefined) {
        contents.SupportsClusters = __parseBoolean(output["SupportsClusters"]);
    }
    if (output.SupportedNetworkTypes === "") {
        contents.SupportedNetworkTypes = [];
    }
    else if (output["SupportedNetworkTypes"] !== undefined && output["SupportedNetworkTypes"]["member"] !== undefined) {
        contents.SupportedNetworkTypes = deserializeAws_queryStringList(__getArrayIfSingleItem(output["SupportedNetworkTypes"]["member"]), context);
    }
    if (output["SupportsStorageThroughput"] !== undefined) {
        contents.SupportsStorageThroughput = __parseBoolean(output["SupportsStorageThroughput"]);
    }
    if (output["MinStorageThroughputPerDbInstance"] !== undefined) {
        contents.MinStorageThroughputPerDbInstance = __strictParseInt32(output["MinStorageThroughputPerDbInstance"]);
    }
    if (output["MaxStorageThroughputPerDbInstance"] !== undefined) {
        contents.MaxStorageThroughputPerDbInstance = __strictParseInt32(output["MaxStorageThroughputPerDbInstance"]);
    }
    if (output["MinStorageThroughputPerIops"] !== undefined) {
        contents.MinStorageThroughputPerIops = __strictParseFloat(output["MinStorageThroughputPerIops"]);
    }
    if (output["MaxStorageThroughputPerIops"] !== undefined) {
        contents.MaxStorageThroughputPerIops = __strictParseFloat(output["MaxStorageThroughputPerIops"]);
    }
    return contents;
};
const deserializeAws_queryOrderableDBInstanceOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOrderableDBInstanceOption(entry, context);
    });
};
const deserializeAws_queryOrderableDBInstanceOptionsMessage = (output, context) => {
    const contents = {
        OrderableDBInstanceOptions: undefined,
        Marker: undefined,
    };
    if (output.OrderableDBInstanceOptions === "") {
        contents.OrderableDBInstanceOptions = [];
    }
    else if (output["OrderableDBInstanceOptions"] !== undefined &&
        output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"] !== undefined) {
        contents.OrderableDBInstanceOptions = deserializeAws_queryOrderableDBInstanceOptionsList(__getArrayIfSingleItem(output["OrderableDBInstanceOptions"]["OrderableDBInstanceOption"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryOutpost = (output, context) => {
    const contents = {
        Arn: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    return contents;
};
const deserializeAws_queryParameter = (output, context) => {
    const contents = {
        ParameterName: undefined,
        ParameterValue: undefined,
        Description: undefined,
        Source: undefined,
        ApplyType: undefined,
        DataType: undefined,
        AllowedValues: undefined,
        IsModifiable: undefined,
        MinimumEngineVersion: undefined,
        ApplyMethod: undefined,
        SupportedEngineModes: undefined,
    };
    if (output["ParameterName"] !== undefined) {
        contents.ParameterName = __expectString(output["ParameterName"]);
    }
    if (output["ParameterValue"] !== undefined) {
        contents.ParameterValue = __expectString(output["ParameterValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["Source"] !== undefined) {
        contents.Source = __expectString(output["Source"]);
    }
    if (output["ApplyType"] !== undefined) {
        contents.ApplyType = __expectString(output["ApplyType"]);
    }
    if (output["DataType"] !== undefined) {
        contents.DataType = __expectString(output["DataType"]);
    }
    if (output["AllowedValues"] !== undefined) {
        contents.AllowedValues = __expectString(output["AllowedValues"]);
    }
    if (output["IsModifiable"] !== undefined) {
        contents.IsModifiable = __parseBoolean(output["IsModifiable"]);
    }
    if (output["MinimumEngineVersion"] !== undefined) {
        contents.MinimumEngineVersion = __expectString(output["MinimumEngineVersion"]);
    }
    if (output["ApplyMethod"] !== undefined) {
        contents.ApplyMethod = __expectString(output["ApplyMethod"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryParametersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryParameter(entry, context);
    });
};
const deserializeAws_queryPendingCloudwatchLogsExports = (output, context) => {
    const contents = {
        LogTypesToEnable: undefined,
        LogTypesToDisable: undefined,
    };
    if (output.LogTypesToEnable === "") {
        contents.LogTypesToEnable = [];
    }
    else if (output["LogTypesToEnable"] !== undefined && output["LogTypesToEnable"]["member"] !== undefined) {
        contents.LogTypesToEnable = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["LogTypesToEnable"]["member"]), context);
    }
    if (output.LogTypesToDisable === "") {
        contents.LogTypesToDisable = [];
    }
    else if (output["LogTypesToDisable"] !== undefined && output["LogTypesToDisable"]["member"] !== undefined) {
        contents.LogTypesToDisable = deserializeAws_queryLogTypeList(__getArrayIfSingleItem(output["LogTypesToDisable"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryPendingMaintenanceAction = (output, context) => {
    const contents = {
        Action: undefined,
        AutoAppliedAfterDate: undefined,
        ForcedApplyDate: undefined,
        OptInStatus: undefined,
        CurrentApplyDate: undefined,
        Description: undefined,
    };
    if (output["Action"] !== undefined) {
        contents.Action = __expectString(output["Action"]);
    }
    if (output["AutoAppliedAfterDate"] !== undefined) {
        contents.AutoAppliedAfterDate = __expectNonNull(__parseRfc3339DateTime(output["AutoAppliedAfterDate"]));
    }
    if (output["ForcedApplyDate"] !== undefined) {
        contents.ForcedApplyDate = __expectNonNull(__parseRfc3339DateTime(output["ForcedApplyDate"]));
    }
    if (output["OptInStatus"] !== undefined) {
        contents.OptInStatus = __expectString(output["OptInStatus"]);
    }
    if (output["CurrentApplyDate"] !== undefined) {
        contents.CurrentApplyDate = __expectNonNull(__parseRfc3339DateTime(output["CurrentApplyDate"]));
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    return contents;
};
const deserializeAws_queryPendingMaintenanceActionDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPendingMaintenanceAction(entry, context);
    });
};
const deserializeAws_queryPendingMaintenanceActions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryResourcePendingMaintenanceActions(entry, context);
    });
};
const deserializeAws_queryPendingMaintenanceActionsMessage = (output, context) => {
    const contents = {
        PendingMaintenanceActions: undefined,
        Marker: undefined,
    };
    if (output.PendingMaintenanceActions === "") {
        contents.PendingMaintenanceActions = [];
    }
    else if (output["PendingMaintenanceActions"] !== undefined &&
        output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"] !== undefined) {
        contents.PendingMaintenanceActions = deserializeAws_queryPendingMaintenanceActions(__getArrayIfSingleItem(output["PendingMaintenanceActions"]["ResourcePendingMaintenanceActions"]), context);
    }
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    return contents;
};
const deserializeAws_queryPendingModifiedValues = (output, context) => {
    const contents = {
        DBInstanceClass: undefined,
        AllocatedStorage: undefined,
        MasterUserPassword: undefined,
        Port: undefined,
        BackupRetentionPeriod: undefined,
        MultiAZ: undefined,
        EngineVersion: undefined,
        LicenseModel: undefined,
        Iops: undefined,
        DBInstanceIdentifier: undefined,
        StorageType: undefined,
        CACertificateIdentifier: undefined,
        DBSubnetGroupName: undefined,
        PendingCloudwatchLogsExports: undefined,
        ProcessorFeatures: undefined,
        IAMDatabaseAuthenticationEnabled: undefined,
        AutomationMode: undefined,
        ResumeFullAutomationModeTime: undefined,
        StorageThroughput: undefined,
    };
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["AllocatedStorage"] !== undefined) {
        contents.AllocatedStorage = __strictParseInt32(output["AllocatedStorage"]);
    }
    if (output["MasterUserPassword"] !== undefined) {
        contents.MasterUserPassword = __expectString(output["MasterUserPassword"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    if (output["BackupRetentionPeriod"] !== undefined) {
        contents.BackupRetentionPeriod = __strictParseInt32(output["BackupRetentionPeriod"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["LicenseModel"] !== undefined) {
        contents.LicenseModel = __expectString(output["LicenseModel"]);
    }
    if (output["Iops"] !== undefined) {
        contents.Iops = __strictParseInt32(output["Iops"]);
    }
    if (output["DBInstanceIdentifier"] !== undefined) {
        contents.DBInstanceIdentifier = __expectString(output["DBInstanceIdentifier"]);
    }
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output["CACertificateIdentifier"] !== undefined) {
        contents.CACertificateIdentifier = __expectString(output["CACertificateIdentifier"]);
    }
    if (output["DBSubnetGroupName"] !== undefined) {
        contents.DBSubnetGroupName = __expectString(output["DBSubnetGroupName"]);
    }
    if (output["PendingCloudwatchLogsExports"] !== undefined) {
        contents.PendingCloudwatchLogsExports = deserializeAws_queryPendingCloudwatchLogsExports(output["PendingCloudwatchLogsExports"], context);
    }
    if (output.ProcessorFeatures === "") {
        contents.ProcessorFeatures = [];
    }
    else if (output["ProcessorFeatures"] !== undefined &&
        output["ProcessorFeatures"]["ProcessorFeature"] !== undefined) {
        contents.ProcessorFeatures = deserializeAws_queryProcessorFeatureList(__getArrayIfSingleItem(output["ProcessorFeatures"]["ProcessorFeature"]), context);
    }
    if (output["IAMDatabaseAuthenticationEnabled"] !== undefined) {
        contents.IAMDatabaseAuthenticationEnabled = __parseBoolean(output["IAMDatabaseAuthenticationEnabled"]);
    }
    if (output["AutomationMode"] !== undefined) {
        contents.AutomationMode = __expectString(output["AutomationMode"]);
    }
    if (output["ResumeFullAutomationModeTime"] !== undefined) {
        contents.ResumeFullAutomationModeTime = __expectNonNull(__parseRfc3339DateTime(output["ResumeFullAutomationModeTime"]));
    }
    if (output["StorageThroughput"] !== undefined) {
        contents.StorageThroughput = __strictParseInt32(output["StorageThroughput"]);
    }
    return contents;
};
const deserializeAws_queryPointInTimeRestoreNotEnabledFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryProcessorFeature = (output, context) => {
    const contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryProcessorFeatureList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryProcessorFeature(entry, context);
    });
};
const deserializeAws_queryPromoteReadReplicaDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryPromoteReadReplicaResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryProvisionedIopsNotAvailableInAZFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryPurchaseReservedDBInstancesOfferingResult = (output, context) => {
    const contents = {
        ReservedDBInstance: undefined,
    };
    if (output["ReservedDBInstance"] !== undefined) {
        contents.ReservedDBInstance = deserializeAws_queryReservedDBInstance(output["ReservedDBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryRange = (output, context) => {
    const contents = {
        From: undefined,
        To: undefined,
        Step: undefined,
    };
    if (output["From"] !== undefined) {
        contents.From = __strictParseInt32(output["From"]);
    }
    if (output["To"] !== undefined) {
        contents.To = __strictParseInt32(output["To"]);
    }
    if (output["Step"] !== undefined) {
        contents.Step = __strictParseInt32(output["Step"]);
    }
    return contents;
};
const deserializeAws_queryRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryRange(entry, context);
    });
};
const deserializeAws_queryReadersArnList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryReadReplicaDBClusterIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryReadReplicaDBInstanceIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryReadReplicaIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryRebootDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryRebootDBInstanceResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryRecurringCharge = (output, context) => {
    const contents = {
        RecurringChargeAmount: undefined,
        RecurringChargeFrequency: undefined,
    };
    if (output["RecurringChargeAmount"] !== undefined) {
        contents.RecurringChargeAmount = __strictParseFloat(output["RecurringChargeAmount"]);
    }
    if (output["RecurringChargeFrequency"] !== undefined) {
        contents.RecurringChargeFrequency = __expectString(output["RecurringChargeFrequency"]);
    }
    return contents;
};
const deserializeAws_queryRecurringChargeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryRecurringCharge(entry, context);
    });
};
const deserializeAws_queryRegisterDBProxyTargetsResponse = (output, context) => {
    const contents = {
        DBProxyTargets: undefined,
    };
    if (output.DBProxyTargets === "") {
        contents.DBProxyTargets = [];
    }
    else if (output["DBProxyTargets"] !== undefined && output["DBProxyTargets"]["member"] !== undefined) {
        contents.DBProxyTargets = deserializeAws_queryTargetList(__getArrayIfSingleItem(output["DBProxyTargets"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryRemoveFromGlobalClusterResult = (output, context) => {
    const contents = {
        GlobalCluster: undefined,
    };
    if (output["GlobalCluster"] !== undefined) {
        contents.GlobalCluster = deserializeAws_queryGlobalCluster(output["GlobalCluster"], context);
    }
    return contents;
};
const deserializeAws_queryRemoveSourceIdentifierFromSubscriptionResult = (output, context) => {
    const contents = {
        EventSubscription: undefined,
    };
    if (output["EventSubscription"] !== undefined) {
        contents.EventSubscription = deserializeAws_queryEventSubscription(output["EventSubscription"], context);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstance = (output, context) => {
    const contents = {
        ReservedDBInstanceId: undefined,
        ReservedDBInstancesOfferingId: undefined,
        DBInstanceClass: undefined,
        StartTime: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        DBInstanceCount: undefined,
        ProductDescription: undefined,
        OfferingType: undefined,
        MultiAZ: undefined,
        State: undefined,
        RecurringCharges: undefined,
        ReservedDBInstanceArn: undefined,
        LeaseId: undefined,
    };
    if (output["ReservedDBInstanceId"] !== undefined) {
        contents.ReservedDBInstanceId = __expectString(output["ReservedDBInstanceId"]);
    }
    if (output["ReservedDBInstancesOfferingId"] !== undefined) {
        contents.ReservedDBInstancesOfferingId = __expectString(output["ReservedDBInstancesOfferingId"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["StartTime"] !== undefined) {
        contents.StartTime = __expectNonNull(__parseRfc3339DateTime(output["StartTime"]));
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["CurrencyCode"]);
    }
    if (output["DBInstanceCount"] !== undefined) {
        contents.DBInstanceCount = __strictParseInt32(output["DBInstanceCount"]);
    }
    if (output["ProductDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["ProductDescription"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = __expectString(output["OfferingType"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output["State"] !== undefined) {
        contents.State = __expectString(output["State"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList(__getArrayIfSingleItem(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    if (output["ReservedDBInstanceArn"] !== undefined) {
        contents.ReservedDBInstanceArn = __expectString(output["ReservedDBInstanceArn"]);
    }
    if (output["LeaseId"] !== undefined) {
        contents.LeaseId = __expectString(output["LeaseId"]);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstanceAlreadyExistsFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReservedDBInstance(entry, context);
    });
};
const deserializeAws_queryReservedDBInstanceMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ReservedDBInstances: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.ReservedDBInstances === "") {
        contents.ReservedDBInstances = [];
    }
    else if (output["ReservedDBInstances"] !== undefined &&
        output["ReservedDBInstances"]["ReservedDBInstance"] !== undefined) {
        contents.ReservedDBInstances = deserializeAws_queryReservedDBInstanceList(__getArrayIfSingleItem(output["ReservedDBInstances"]["ReservedDBInstance"]), context);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstanceNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstanceQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstancesOffering = (output, context) => {
    const contents = {
        ReservedDBInstancesOfferingId: undefined,
        DBInstanceClass: undefined,
        Duration: undefined,
        FixedPrice: undefined,
        UsagePrice: undefined,
        CurrencyCode: undefined,
        ProductDescription: undefined,
        OfferingType: undefined,
        MultiAZ: undefined,
        RecurringCharges: undefined,
    };
    if (output["ReservedDBInstancesOfferingId"] !== undefined) {
        contents.ReservedDBInstancesOfferingId = __expectString(output["ReservedDBInstancesOfferingId"]);
    }
    if (output["DBInstanceClass"] !== undefined) {
        contents.DBInstanceClass = __expectString(output["DBInstanceClass"]);
    }
    if (output["Duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["Duration"]);
    }
    if (output["FixedPrice"] !== undefined) {
        contents.FixedPrice = __strictParseFloat(output["FixedPrice"]);
    }
    if (output["UsagePrice"] !== undefined) {
        contents.UsagePrice = __strictParseFloat(output["UsagePrice"]);
    }
    if (output["CurrencyCode"] !== undefined) {
        contents.CurrencyCode = __expectString(output["CurrencyCode"]);
    }
    if (output["ProductDescription"] !== undefined) {
        contents.ProductDescription = __expectString(output["ProductDescription"]);
    }
    if (output["OfferingType"] !== undefined) {
        contents.OfferingType = __expectString(output["OfferingType"]);
    }
    if (output["MultiAZ"] !== undefined) {
        contents.MultiAZ = __parseBoolean(output["MultiAZ"]);
    }
    if (output.RecurringCharges === "") {
        contents.RecurringCharges = [];
    }
    else if (output["RecurringCharges"] !== undefined && output["RecurringCharges"]["RecurringCharge"] !== undefined) {
        contents.RecurringCharges = deserializeAws_queryRecurringChargeList(__getArrayIfSingleItem(output["RecurringCharges"]["RecurringCharge"]), context);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstancesOfferingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryReservedDBInstancesOffering(entry, context);
    });
};
const deserializeAws_queryReservedDBInstancesOfferingMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        ReservedDBInstancesOfferings: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.ReservedDBInstancesOfferings === "") {
        contents.ReservedDBInstancesOfferings = [];
    }
    else if (output["ReservedDBInstancesOfferings"] !== undefined &&
        output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"] !== undefined) {
        contents.ReservedDBInstancesOfferings = deserializeAws_queryReservedDBInstancesOfferingList(__getArrayIfSingleItem(output["ReservedDBInstancesOfferings"]["ReservedDBInstancesOffering"]), context);
    }
    return contents;
};
const deserializeAws_queryReservedDBInstancesOfferingNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryResourceNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryResourcePendingMaintenanceActions = (output, context) => {
    const contents = {
        ResourceIdentifier: undefined,
        PendingMaintenanceActionDetails: undefined,
    };
    if (output["ResourceIdentifier"] !== undefined) {
        contents.ResourceIdentifier = __expectString(output["ResourceIdentifier"]);
    }
    if (output.PendingMaintenanceActionDetails === "") {
        contents.PendingMaintenanceActionDetails = [];
    }
    else if (output["PendingMaintenanceActionDetails"] !== undefined &&
        output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"] !== undefined) {
        contents.PendingMaintenanceActionDetails = deserializeAws_queryPendingMaintenanceActionDetails(__getArrayIfSingleItem(output["PendingMaintenanceActionDetails"]["PendingMaintenanceAction"]), context);
    }
    return contents;
};
const deserializeAws_queryRestoreDBClusterFromS3Result = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryRestoreDBClusterFromSnapshotResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryRestoreDBClusterToPointInTimeResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryRestoreDBInstanceFromDBSnapshotResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryRestoreDBInstanceFromS3Result = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryRestoreDBInstanceToPointInTimeResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryRestoreWindow = (output, context) => {
    const contents = {
        EarliestTime: undefined,
        LatestTime: undefined,
    };
    if (output["EarliestTime"] !== undefined) {
        contents.EarliestTime = __expectNonNull(__parseRfc3339DateTime(output["EarliestTime"]));
    }
    if (output["LatestTime"] !== undefined) {
        contents.LatestTime = __expectNonNull(__parseRfc3339DateTime(output["LatestTime"]));
    }
    return contents;
};
const deserializeAws_queryRevokeDBSecurityGroupIngressResult = (output, context) => {
    const contents = {
        DBSecurityGroup: undefined,
    };
    if (output["DBSecurityGroup"] !== undefined) {
        contents.DBSecurityGroup = deserializeAws_queryDBSecurityGroup(output["DBSecurityGroup"], context);
    }
    return contents;
};
const deserializeAws_queryScalingConfigurationInfo = (output, context) => {
    const contents = {
        MinCapacity: undefined,
        MaxCapacity: undefined,
        AutoPause: undefined,
        SecondsUntilAutoPause: undefined,
        TimeoutAction: undefined,
        SecondsBeforeTimeout: undefined,
    };
    if (output["MinCapacity"] !== undefined) {
        contents.MinCapacity = __strictParseInt32(output["MinCapacity"]);
    }
    if (output["MaxCapacity"] !== undefined) {
        contents.MaxCapacity = __strictParseInt32(output["MaxCapacity"]);
    }
    if (output["AutoPause"] !== undefined) {
        contents.AutoPause = __parseBoolean(output["AutoPause"]);
    }
    if (output["SecondsUntilAutoPause"] !== undefined) {
        contents.SecondsUntilAutoPause = __strictParseInt32(output["SecondsUntilAutoPause"]);
    }
    if (output["TimeoutAction"] !== undefined) {
        contents.TimeoutAction = __expectString(output["TimeoutAction"]);
    }
    if (output["SecondsBeforeTimeout"] !== undefined) {
        contents.SecondsBeforeTimeout = __strictParseInt32(output["SecondsBeforeTimeout"]);
    }
    return contents;
};
const deserializeAws_queryServerlessV2ScalingConfigurationInfo = (output, context) => {
    const contents = {
        MinCapacity: undefined,
        MaxCapacity: undefined,
    };
    if (output["MinCapacity"] !== undefined) {
        contents.MinCapacity = __strictParseFloat(output["MinCapacity"]);
    }
    if (output["MaxCapacity"] !== undefined) {
        contents.MaxCapacity = __strictParseFloat(output["MaxCapacity"]);
    }
    return contents;
};
const deserializeAws_querySharedSnapshotQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySnapshotQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySNSInvalidTopicFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySNSNoAuthorizationFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySNSTopicArnNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySourceClusterNotSupportedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySourceDatabaseNotSupportedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySourceIdsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_querySourceNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySourceRegion = (output, context) => {
    const contents = {
        RegionName: undefined,
        Endpoint: undefined,
        Status: undefined,
        SupportsDBInstanceAutomatedBackupsReplication: undefined,
    };
    if (output["RegionName"] !== undefined) {
        contents.RegionName = __expectString(output["RegionName"]);
    }
    if (output["Endpoint"] !== undefined) {
        contents.Endpoint = __expectString(output["Endpoint"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["SupportsDBInstanceAutomatedBackupsReplication"] !== undefined) {
        contents.SupportsDBInstanceAutomatedBackupsReplication = __parseBoolean(output["SupportsDBInstanceAutomatedBackupsReplication"]);
    }
    return contents;
};
const deserializeAws_querySourceRegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySourceRegion(entry, context);
    });
};
const deserializeAws_querySourceRegionMessage = (output, context) => {
    const contents = {
        Marker: undefined,
        SourceRegions: undefined,
    };
    if (output["Marker"] !== undefined) {
        contents.Marker = __expectString(output["Marker"]);
    }
    if (output.SourceRegions === "") {
        contents.SourceRegions = [];
    }
    else if (output["SourceRegions"] !== undefined && output["SourceRegions"]["SourceRegion"] !== undefined) {
        contents.SourceRegions = deserializeAws_querySourceRegionList(__getArrayIfSingleItem(output["SourceRegions"]["SourceRegion"]), context);
    }
    return contents;
};
const deserializeAws_queryStartActivityStreamResponse = (output, context) => {
    const contents = {
        KmsKeyId: undefined,
        KinesisStreamName: undefined,
        Status: undefined,
        Mode: undefined,
        ApplyImmediately: undefined,
        EngineNativeAuditFieldsIncluded: undefined,
    };
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = __expectString(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Mode"] !== undefined) {
        contents.Mode = __expectString(output["Mode"]);
    }
    if (output["ApplyImmediately"] !== undefined) {
        contents.ApplyImmediately = __parseBoolean(output["ApplyImmediately"]);
    }
    if (output["EngineNativeAuditFieldsIncluded"] !== undefined) {
        contents.EngineNativeAuditFieldsIncluded = __parseBoolean(output["EngineNativeAuditFieldsIncluded"]);
    }
    return contents;
};
const deserializeAws_queryStartDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryStartDBInstanceAutomatedBackupsReplicationResult = (output, context) => {
    const contents = {
        DBInstanceAutomatedBackup: undefined,
    };
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
const deserializeAws_queryStartDBInstanceResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryStopActivityStreamResponse = (output, context) => {
    const contents = {
        KmsKeyId: undefined,
        KinesisStreamName: undefined,
        Status: undefined,
    };
    if (output["KmsKeyId"] !== undefined) {
        contents.KmsKeyId = __expectString(output["KmsKeyId"]);
    }
    if (output["KinesisStreamName"] !== undefined) {
        contents.KinesisStreamName = __expectString(output["KinesisStreamName"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryStopDBClusterResult = (output, context) => {
    const contents = {
        DBCluster: undefined,
    };
    if (output["DBCluster"] !== undefined) {
        contents.DBCluster = deserializeAws_queryDBCluster(output["DBCluster"], context);
    }
    return contents;
};
const deserializeAws_queryStopDBInstanceAutomatedBackupsReplicationResult = (output, context) => {
    const contents = {
        DBInstanceAutomatedBackup: undefined,
    };
    if (output["DBInstanceAutomatedBackup"] !== undefined) {
        contents.DBInstanceAutomatedBackup = deserializeAws_queryDBInstanceAutomatedBackup(output["DBInstanceAutomatedBackup"], context);
    }
    return contents;
};
const deserializeAws_queryStopDBInstanceResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryStorageQuotaExceededFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryStorageTypeNotSupportedFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_queryStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_querySubnet = (output, context) => {
    const contents = {
        SubnetIdentifier: undefined,
        SubnetAvailabilityZone: undefined,
        SubnetOutpost: undefined,
        SubnetStatus: undefined,
    };
    if (output["SubnetIdentifier"] !== undefined) {
        contents.SubnetIdentifier = __expectString(output["SubnetIdentifier"]);
    }
    if (output["SubnetAvailabilityZone"] !== undefined) {
        contents.SubnetAvailabilityZone = deserializeAws_queryAvailabilityZone(output["SubnetAvailabilityZone"], context);
    }
    if (output["SubnetOutpost"] !== undefined) {
        contents.SubnetOutpost = deserializeAws_queryOutpost(output["SubnetOutpost"], context);
    }
    if (output["SubnetStatus"] !== undefined) {
        contents.SubnetStatus = __expectString(output["SubnetStatus"]);
    }
    return contents;
};
const deserializeAws_querySubnetAlreadyInUse = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubnetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySubnet(entry, context);
    });
};
const deserializeAws_querySubscriptionAlreadyExistFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubscriptionCategoryNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySubscriptionNotFoundFault = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const deserializeAws_querySupportedCharacterSetsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryCharacterSet(entry, context);
    });
};
const deserializeAws_querySupportedTimezonesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTimezone(entry, context);
    });
};
const deserializeAws_querySwitchoverBlueGreenDeploymentResponse = (output, context) => {
    const contents = {
        BlueGreenDeployment: undefined,
    };
    if (output["BlueGreenDeployment"] !== undefined) {
        contents.BlueGreenDeployment = deserializeAws_queryBlueGreenDeployment(output["BlueGreenDeployment"], context);
    }
    return contents;
};
const deserializeAws_querySwitchoverDetail = (output, context) => {
    const contents = {
        SourceMember: undefined,
        TargetMember: undefined,
        Status: undefined,
    };
    if (output["SourceMember"] !== undefined) {
        contents.SourceMember = __expectString(output["SourceMember"]);
    }
    if (output["TargetMember"] !== undefined) {
        contents.TargetMember = __expectString(output["TargetMember"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_querySwitchoverDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySwitchoverDetail(entry, context);
    });
};
const deserializeAws_querySwitchoverReadReplicaResult = (output, context) => {
    const contents = {
        DBInstance: undefined,
    };
    if (output["DBInstance"] !== undefined) {
        contents.DBInstance = deserializeAws_queryDBInstance(output["DBInstance"], context);
    }
    return contents;
};
const deserializeAws_queryTag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = __expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTag(entry, context);
    });
};
const deserializeAws_queryTagListMessage = (output, context) => {
    const contents = {
        TagList: undefined,
    };
    if (output.TagList === "") {
        contents.TagList = [];
    }
    else if (output["TagList"] !== undefined && output["TagList"]["Tag"] !== undefined) {
        contents.TagList = deserializeAws_queryTagList(__getArrayIfSingleItem(output["TagList"]["Tag"]), context);
    }
    return contents;
};
const deserializeAws_queryTargetGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBProxyTargetGroup(entry, context);
    });
};
const deserializeAws_queryTargetHealth = (output, context) => {
    const contents = {
        State: undefined,
        Reason: undefined,
        Description: undefined,
    };
    if (output["State"] !== undefined) {
        contents.State = __expectString(output["State"]);
    }
    if (output["Reason"] !== undefined) {
        contents.Reason = __expectString(output["Reason"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    return contents;
};
const deserializeAws_queryTargetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryDBProxyTarget(entry, context);
    });
};
const deserializeAws_queryTimezone = (output, context) => {
    const contents = {
        TimezoneName: undefined,
    };
    if (output["TimezoneName"] !== undefined) {
        contents.TimezoneName = __expectString(output["TimezoneName"]);
    }
    return contents;
};
const deserializeAws_queryUpgradeTarget = (output, context) => {
    const contents = {
        Engine: undefined,
        EngineVersion: undefined,
        Description: undefined,
        AutoUpgrade: undefined,
        IsMajorVersionUpgrade: undefined,
        SupportedEngineModes: undefined,
        SupportsParallelQuery: undefined,
        SupportsGlobalDatabases: undefined,
        SupportsBabelfish: undefined,
    };
    if (output["Engine"] !== undefined) {
        contents.Engine = __expectString(output["Engine"]);
    }
    if (output["EngineVersion"] !== undefined) {
        contents.EngineVersion = __expectString(output["EngineVersion"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["AutoUpgrade"] !== undefined) {
        contents.AutoUpgrade = __parseBoolean(output["AutoUpgrade"]);
    }
    if (output["IsMajorVersionUpgrade"] !== undefined) {
        contents.IsMajorVersionUpgrade = __parseBoolean(output["IsMajorVersionUpgrade"]);
    }
    if (output.SupportedEngineModes === "") {
        contents.SupportedEngineModes = [];
    }
    else if (output["SupportedEngineModes"] !== undefined && output["SupportedEngineModes"]["member"] !== undefined) {
        contents.SupportedEngineModes = deserializeAws_queryEngineModeList(__getArrayIfSingleItem(output["SupportedEngineModes"]["member"]), context);
    }
    if (output["SupportsParallelQuery"] !== undefined) {
        contents.SupportsParallelQuery = __parseBoolean(output["SupportsParallelQuery"]);
    }
    if (output["SupportsGlobalDatabases"] !== undefined) {
        contents.SupportsGlobalDatabases = __parseBoolean(output["SupportsGlobalDatabases"]);
    }
    if (output["SupportsBabelfish"] !== undefined) {
        contents.SupportsBabelfish = __parseBoolean(output["SupportsBabelfish"]);
    }
    return contents;
};
const deserializeAws_queryUserAuthConfigInfo = (output, context) => {
    const contents = {
        Description: undefined,
        UserName: undefined,
        AuthScheme: undefined,
        SecretArn: undefined,
        IAMAuth: undefined,
        ClientPasswordAuthType: undefined,
    };
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["UserName"] !== undefined) {
        contents.UserName = __expectString(output["UserName"]);
    }
    if (output["AuthScheme"] !== undefined) {
        contents.AuthScheme = __expectString(output["AuthScheme"]);
    }
    if (output["SecretArn"] !== undefined) {
        contents.SecretArn = __expectString(output["SecretArn"]);
    }
    if (output["IAMAuth"] !== undefined) {
        contents.IAMAuth = __expectString(output["IAMAuth"]);
    }
    if (output["ClientPasswordAuthType"] !== undefined) {
        contents.ClientPasswordAuthType = __expectString(output["ClientPasswordAuthType"]);
    }
    return contents;
};
const deserializeAws_queryUserAuthConfigInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryUserAuthConfigInfo(entry, context);
    });
};
const deserializeAws_queryValidDBInstanceModificationsMessage = (output, context) => {
    const contents = {
        Storage: undefined,
        ValidProcessorFeatures: undefined,
    };
    if (output.Storage === "") {
        contents.Storage = [];
    }
    else if (output["Storage"] !== undefined && output["Storage"]["ValidStorageOptions"] !== undefined) {
        contents.Storage = deserializeAws_queryValidStorageOptionsList(__getArrayIfSingleItem(output["Storage"]["ValidStorageOptions"]), context);
    }
    if (output.ValidProcessorFeatures === "") {
        contents.ValidProcessorFeatures = [];
    }
    else if (output["ValidProcessorFeatures"] !== undefined &&
        output["ValidProcessorFeatures"]["AvailableProcessorFeature"] !== undefined) {
        contents.ValidProcessorFeatures = deserializeAws_queryAvailableProcessorFeatureList(__getArrayIfSingleItem(output["ValidProcessorFeatures"]["AvailableProcessorFeature"]), context);
    }
    return contents;
};
const deserializeAws_queryValidStorageOptions = (output, context) => {
    const contents = {
        StorageType: undefined,
        StorageSize: undefined,
        ProvisionedIops: undefined,
        IopsToStorageRatio: undefined,
        SupportsStorageAutoscaling: undefined,
        ProvisionedStorageThroughput: undefined,
        StorageThroughputToIopsRatio: undefined,
    };
    if (output["StorageType"] !== undefined) {
        contents.StorageType = __expectString(output["StorageType"]);
    }
    if (output.StorageSize === "") {
        contents.StorageSize = [];
    }
    else if (output["StorageSize"] !== undefined && output["StorageSize"]["Range"] !== undefined) {
        contents.StorageSize = deserializeAws_queryRangeList(__getArrayIfSingleItem(output["StorageSize"]["Range"]), context);
    }
    if (output.ProvisionedIops === "") {
        contents.ProvisionedIops = [];
    }
    else if (output["ProvisionedIops"] !== undefined && output["ProvisionedIops"]["Range"] !== undefined) {
        contents.ProvisionedIops = deserializeAws_queryRangeList(__getArrayIfSingleItem(output["ProvisionedIops"]["Range"]), context);
    }
    if (output.IopsToStorageRatio === "") {
        contents.IopsToStorageRatio = [];
    }
    else if (output["IopsToStorageRatio"] !== undefined && output["IopsToStorageRatio"]["DoubleRange"] !== undefined) {
        contents.IopsToStorageRatio = deserializeAws_queryDoubleRangeList(__getArrayIfSingleItem(output["IopsToStorageRatio"]["DoubleRange"]), context);
    }
    if (output["SupportsStorageAutoscaling"] !== undefined) {
        contents.SupportsStorageAutoscaling = __parseBoolean(output["SupportsStorageAutoscaling"]);
    }
    if (output.ProvisionedStorageThroughput === "") {
        contents.ProvisionedStorageThroughput = [];
    }
    else if (output["ProvisionedStorageThroughput"] !== undefined &&
        output["ProvisionedStorageThroughput"]["Range"] !== undefined) {
        contents.ProvisionedStorageThroughput = deserializeAws_queryRangeList(__getArrayIfSingleItem(output["ProvisionedStorageThroughput"]["Range"]), context);
    }
    if (output.StorageThroughputToIopsRatio === "") {
        contents.StorageThroughputToIopsRatio = [];
    }
    else if (output["StorageThroughputToIopsRatio"] !== undefined &&
        output["StorageThroughputToIopsRatio"]["DoubleRange"] !== undefined) {
        contents.StorageThroughputToIopsRatio = deserializeAws_queryDoubleRangeList(__getArrayIfSingleItem(output["StorageThroughputToIopsRatio"]["DoubleRange"]), context);
    }
    return contents;
};
const deserializeAws_queryValidStorageOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryValidStorageOptions(entry, context);
    });
};
const deserializeAws_queryValidUpgradeTargetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryUpgradeTarget(entry, context);
    });
};
const deserializeAws_queryVpcSecurityGroupMembership = (output, context) => {
    const contents = {
        VpcSecurityGroupId: undefined,
        Status: undefined,
    };
    if (output["VpcSecurityGroupId"] !== undefined) {
        contents.VpcSecurityGroupId = __expectString(output["VpcSecurityGroupId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryVpcSecurityGroupMembershipList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryVpcSecurityGroupMembership(entry, context);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};

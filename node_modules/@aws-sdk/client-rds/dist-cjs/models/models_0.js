"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DBSubnetGroupDoesNotCoverEnoughAZs = exports.DBClusterAlreadyExistsFault = exports.WriteForwardingStatus = exports.CustomDBEngineVersionQuotaExceededFault = exports.CustomDBEngineVersionAlreadyExistsFault = exports.SourceDatabaseNotSupportedFault = exports.SourceClusterNotSupportedFault = exports.InstanceQuotaExceededFault = exports.DBClusterQuotaExceededFault = exports.DBClusterParameterGroupNotFoundFault = exports.BlueGreenDeploymentAlreadyExistsFault = exports.OptionGroupQuotaExceededFault = exports.OptionGroupNotFoundFault = exports.OptionGroupAlreadyExistsFault = exports.InvalidDBSnapshotStateFault = exports.DBSnapshotAlreadyExistsFault = exports.CustomAvailabilityZoneNotFoundFault = exports.SnapshotQuotaExceededFault = exports.KMSKeyNotAccessibleFault = exports.InvalidDBClusterSnapshotStateFault = exports.DBClusterSnapshotNotFoundFault = exports.DBClusterSnapshotAlreadyExistsFault = exports.DBParameterGroupQuotaExceededFault = exports.DBParameterGroupNotFoundFault = exports.DBParameterGroupAlreadyExistsFault = exports.InvalidExportTaskStateFault = exports.ExportTaskNotFoundFault = exports.ExportSourceType = exports.InvalidDBSecurityGroupStateFault = exports.DBSecurityGroupNotFoundFault = exports.AuthorizationQuotaExceededFault = exports.AuthorizationAlreadyExistsFault = exports.ResourceNotFoundFault = exports.DBSnapshotNotFoundFault = exports.DBProxyTargetGroupNotFoundFault = exports.DBProxyNotFoundFault = exports.BlueGreenDeploymentNotFoundFault = exports.SubscriptionNotFoundFault = exports.SourceNotFoundFault = exports.InvalidDBInstanceStateFault = exports.DBInstanceRoleQuotaExceededFault = exports.DBInstanceRoleAlreadyExistsFault = exports.DBInstanceNotFoundFault = exports.InvalidDBClusterStateFault = exports.DBClusterRoleQuotaExceededFault = exports.DBClusterRoleAlreadyExistsFault = exports.DBClusterNotFoundFault = exports.ActivityStreamStatus = exports.ActivityStreamPolicyStatus = exports.ActivityStreamMode = void 0;
exports.InvalidBlueGreenDeploymentStateFault = exports.GlobalClusterQuotaExceededFault = exports.GlobalClusterAlreadyExistsFault = exports.FailoverStatus = exports.SubscriptionCategoryNotFoundFault = exports.SubscriptionAlreadyExistFault = exports.SNSTopicArnNotFoundFault = exports.SNSNoAuthorizationFault = exports.SNSInvalidTopicFault = exports.EventSubscriptionQuotaExceededFault = exports.DBSubnetQuotaExceededFault = exports.DBSubnetGroupQuotaExceededFault = exports.DBSubnetGroupAlreadyExistsFault = exports.DBSecurityGroupQuotaExceededFault = exports.DBSecurityGroupNotSupportedFault = exports.DBSecurityGroupAlreadyExistsFault = exports.InvalidDBProxyStateFault = exports.DBProxyEndpointQuotaExceededFault = exports.DBProxyEndpointAlreadyExistsFault = exports.DBProxyEndpointStatus = exports.DBProxyEndpointTargetRole = exports.DBProxyQuotaExceededFault = exports.DBProxyAlreadyExistsFault = exports.DBProxyStatus = exports.EngineFamily = exports.IAMAuthMode = exports.ClientPasswordAuthType = exports.AuthScheme = exports.InvalidDBSubnetGroupFault = exports.DBSubnetGroupNotAllowedFault = exports.StorageTypeNotSupportedFault = exports.ProvisionedIopsNotAvailableInAZFault = exports.NetworkTypeNotSupported = exports.InsufficientDBInstanceCapacityFault = exports.DBInstanceAlreadyExistsFault = exports.ReplicaMode = exports.AutomationMode = exports.BackupPolicyNotFoundFault = exports.AuthorizationNotFoundFault = exports.DBClusterEndpointQuotaExceededFault = exports.DBClusterEndpointAlreadyExistsFault = exports.StorageQuotaExceededFault = exports.InvalidVPCNetworkStateFault = exports.InvalidSubnet = exports.InvalidGlobalClusterStateFault = exports.InvalidDBSubnetGroupStateFault = exports.InsufficientStorageClusterCapacityFault = exports.GlobalClusterNotFoundFault = exports.DomainNotFoundFault = exports.DBSubnetGroupNotFoundFault = void 0;
exports.ProcessorFeatureFilterSensitiveLog = exports.CopyDBSnapshotMessageFilterSensitiveLog = exports.CopyDBParameterGroupResultFilterSensitiveLog = exports.DBParameterGroupFilterSensitiveLog = exports.CopyDBParameterGroupMessageFilterSensitiveLog = exports.CopyDBClusterSnapshotResultFilterSensitiveLog = exports.DBClusterSnapshotFilterSensitiveLog = exports.CopyDBClusterSnapshotMessageFilterSensitiveLog = exports.CopyDBClusterParameterGroupResultFilterSensitiveLog = exports.DBClusterParameterGroupFilterSensitiveLog = exports.CopyDBClusterParameterGroupMessageFilterSensitiveLog = exports.ExportTaskFilterSensitiveLog = exports.CancelExportTaskMessageFilterSensitiveLog = exports.DBClusterBacktrackFilterSensitiveLog = exports.BacktrackDBClusterMessageFilterSensitiveLog = exports.AuthorizeDBSecurityGroupIngressResultFilterSensitiveLog = exports.DBSecurityGroupFilterSensitiveLog = exports.IPRangeFilterSensitiveLog = exports.EC2SecurityGroupFilterSensitiveLog = exports.AuthorizeDBSecurityGroupIngressMessageFilterSensitiveLog = exports.ApplyPendingMaintenanceActionResultFilterSensitiveLog = exports.ResourcePendingMaintenanceActionsFilterSensitiveLog = exports.PendingMaintenanceActionFilterSensitiveLog = exports.ApplyPendingMaintenanceActionMessageFilterSensitiveLog = exports.AddTagsToResourceMessageFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.AddSourceIdentifierToSubscriptionResultFilterSensitiveLog = exports.EventSubscriptionFilterSensitiveLog = exports.AddSourceIdentifierToSubscriptionMessageFilterSensitiveLog = exports.AddRoleToDBInstanceMessageFilterSensitiveLog = exports.AddRoleToDBClusterMessageFilterSensitiveLog = exports.AccountAttributesMessageFilterSensitiveLog = exports.AccountQuotaFilterSensitiveLog = exports.ApplyMethod = exports.DBClusterBacktrackNotFoundFault = exports.CertificateNotFoundFault = exports.DBProxyTargetNotFoundFault = exports.InvalidOptionGroupStateFault = exports.InvalidEventSubscriptionStateFault = exports.InvalidDBSubnetStateFault = exports.InvalidDBProxyEndpointStateFault = exports.DBProxyEndpointNotFoundFault = exports.InvalidDBInstanceAutomatedBackupStateFault = exports.DBInstanceAutomatedBackupNotFoundFault = exports.DBInstanceAutomatedBackupQuotaExceededFault = exports.InvalidDBParameterGroupStateFault = exports.InvalidDBClusterEndpointStateFault = exports.DBClusterEndpointNotFoundFault = exports.InvalidCustomDBEngineVersionStateFault = exports.CustomDBEngineVersionNotFoundFault = void 0;
exports.PendingModifiedValuesFilterSensitiveLog = exports.OptionGroupMembershipFilterSensitiveLog = exports.EndpointFilterSensitiveLog = exports.DBSubnetGroupFilterSensitiveLog = exports.SubnetFilterSensitiveLog = exports.OutpostFilterSensitiveLog = exports.AvailabilityZoneFilterSensitiveLog = exports.DBParameterGroupStatusFilterSensitiveLog = exports.DBInstanceAutomatedBackupsReplicationFilterSensitiveLog = exports.DBInstanceRoleFilterSensitiveLog = exports.CreateDBInstanceMessageFilterSensitiveLog = exports.CreateDBClusterSnapshotResultFilterSensitiveLog = exports.CreateDBClusterSnapshotMessageFilterSensitiveLog = exports.CreateDBClusterParameterGroupResultFilterSensitiveLog = exports.CreateDBClusterParameterGroupMessageFilterSensitiveLog = exports.DBClusterEndpointFilterSensitiveLog = exports.CreateDBClusterEndpointMessageFilterSensitiveLog = exports.CreateDBClusterResultFilterSensitiveLog = exports.DBClusterFilterSensitiveLog = exports.ServerlessV2ScalingConfigurationInfoFilterSensitiveLog = exports.ScalingConfigurationInfoFilterSensitiveLog = exports.ClusterPendingModifiedValuesFilterSensitiveLog = exports.PendingCloudwatchLogsExportsFilterSensitiveLog = exports.MasterUserSecretFilterSensitiveLog = exports.DomainMembershipFilterSensitiveLog = exports.DBClusterOptionGroupStatusFilterSensitiveLog = exports.DBClusterMemberFilterSensitiveLog = exports.DBClusterRoleFilterSensitiveLog = exports.CreateDBClusterMessageFilterSensitiveLog = exports.ServerlessV2ScalingConfigurationFilterSensitiveLog = exports.ScalingConfigurationFilterSensitiveLog = exports.DBEngineVersionFilterSensitiveLog = exports.UpgradeTargetFilterSensitiveLog = exports.TimezoneFilterSensitiveLog = exports.CharacterSetFilterSensitiveLog = exports.CreateCustomDBEngineVersionMessageFilterSensitiveLog = exports.CreateBlueGreenDeploymentResponseFilterSensitiveLog = exports.BlueGreenDeploymentFilterSensitiveLog = exports.BlueGreenDeploymentTaskFilterSensitiveLog = exports.SwitchoverDetailFilterSensitiveLog = exports.CreateBlueGreenDeploymentRequestFilterSensitiveLog = exports.CopyOptionGroupResultFilterSensitiveLog = exports.OptionGroupFilterSensitiveLog = exports.OptionFilterSensitiveLog = exports.VpcSecurityGroupMembershipFilterSensitiveLog = exports.OptionSettingFilterSensitiveLog = exports.DBSecurityGroupMembershipFilterSensitiveLog = exports.CopyOptionGroupMessageFilterSensitiveLog = exports.CopyDBSnapshotResultFilterSensitiveLog = exports.DBSnapshotFilterSensitiveLog = void 0;
exports.DeleteDBProxyEndpointResponseFilterSensitiveLog = exports.DeleteDBProxyEndpointRequestFilterSensitiveLog = exports.DeleteDBProxyResponseFilterSensitiveLog = exports.DeleteDBProxyRequestFilterSensitiveLog = exports.DeleteDBParameterGroupMessageFilterSensitiveLog = exports.DeleteDBInstanceAutomatedBackupResultFilterSensitiveLog = exports.DBInstanceAutomatedBackupFilterSensitiveLog = exports.RestoreWindowFilterSensitiveLog = exports.DeleteDBInstanceAutomatedBackupMessageFilterSensitiveLog = exports.DeleteDBInstanceResultFilterSensitiveLog = exports.DeleteDBInstanceMessageFilterSensitiveLog = exports.DeleteDBClusterSnapshotResultFilterSensitiveLog = exports.DeleteDBClusterSnapshotMessageFilterSensitiveLog = exports.DeleteDBClusterParameterGroupMessageFilterSensitiveLog = exports.DeleteDBClusterEndpointMessageFilterSensitiveLog = exports.DeleteDBClusterResultFilterSensitiveLog = exports.DeleteDBClusterMessageFilterSensitiveLog = exports.DeleteCustomDBEngineVersionMessageFilterSensitiveLog = exports.DeleteBlueGreenDeploymentResponseFilterSensitiveLog = exports.DeleteBlueGreenDeploymentRequestFilterSensitiveLog = exports.CreateOptionGroupResultFilterSensitiveLog = exports.CreateOptionGroupMessageFilterSensitiveLog = exports.CreateGlobalClusterResultFilterSensitiveLog = exports.GlobalClusterFilterSensitiveLog = exports.GlobalClusterMemberFilterSensitiveLog = exports.FailoverStateFilterSensitiveLog = exports.CreateGlobalClusterMessageFilterSensitiveLog = exports.CreateEventSubscriptionResultFilterSensitiveLog = exports.CreateEventSubscriptionMessageFilterSensitiveLog = exports.CreateDBSubnetGroupResultFilterSensitiveLog = exports.CreateDBSubnetGroupMessageFilterSensitiveLog = exports.CreateDBSnapshotResultFilterSensitiveLog = exports.CreateDBSnapshotMessageFilterSensitiveLog = exports.CreateDBSecurityGroupResultFilterSensitiveLog = exports.CreateDBSecurityGroupMessageFilterSensitiveLog = exports.CreateDBProxyEndpointResponseFilterSensitiveLog = exports.DBProxyEndpointFilterSensitiveLog = exports.CreateDBProxyEndpointRequestFilterSensitiveLog = exports.CreateDBProxyResponseFilterSensitiveLog = exports.DBProxyFilterSensitiveLog = exports.UserAuthConfigInfoFilterSensitiveLog = exports.CreateDBProxyRequestFilterSensitiveLog = exports.UserAuthConfigFilterSensitiveLog = exports.CreateDBParameterGroupResultFilterSensitiveLog = exports.CreateDBParameterGroupMessageFilterSensitiveLog = exports.CreateDBInstanceReadReplicaResultFilterSensitiveLog = exports.CreateDBInstanceReadReplicaMessageFilterSensitiveLog = exports.CreateDBInstanceResultFilterSensitiveLog = exports.DBInstanceFilterSensitiveLog = exports.DBInstanceStatusInfoFilterSensitiveLog = void 0;
exports.DescribeDBProxiesResponseFilterSensitiveLog = exports.DescribeDBProxiesRequestFilterSensitiveLog = exports.DescribeDBParametersMessageFilterSensitiveLog = exports.DBParameterGroupDetailsFilterSensitiveLog = exports.DescribeDBParameterGroupsMessageFilterSensitiveLog = exports.DBParameterGroupsMessageFilterSensitiveLog = exports.DescribeDBLogFilesResponseFilterSensitiveLog = exports.DescribeDBLogFilesDetailsFilterSensitiveLog = exports.DescribeDBLogFilesMessageFilterSensitiveLog = exports.DescribeDBInstancesMessageFilterSensitiveLog = exports.DBInstanceMessageFilterSensitiveLog = exports.DescribeDBInstanceAutomatedBackupsMessageFilterSensitiveLog = exports.DBInstanceAutomatedBackupMessageFilterSensitiveLog = exports.DescribeDBEngineVersionsMessageFilterSensitiveLog = exports.DBEngineVersionMessageFilterSensitiveLog = exports.DescribeDBClusterSnapshotsMessageFilterSensitiveLog = exports.DBClusterSnapshotMessageFilterSensitiveLog = exports.DescribeDBClusterSnapshotAttributesResultFilterSensitiveLog = exports.DBClusterSnapshotAttributesResultFilterSensitiveLog = exports.DBClusterSnapshotAttributeFilterSensitiveLog = exports.DescribeDBClusterSnapshotAttributesMessageFilterSensitiveLog = exports.DescribeDBClustersMessageFilterSensitiveLog = exports.DBClusterMessageFilterSensitiveLog = exports.DescribeDBClusterParametersMessageFilterSensitiveLog = exports.DBClusterParameterGroupDetailsFilterSensitiveLog = exports.ParameterFilterSensitiveLog = exports.DescribeDBClusterParameterGroupsMessageFilterSensitiveLog = exports.DBClusterParameterGroupsMessageFilterSensitiveLog = exports.DescribeDBClusterEndpointsMessageFilterSensitiveLog = exports.DBClusterEndpointMessageFilterSensitiveLog = exports.DescribeDBClusterBacktracksMessageFilterSensitiveLog = exports.DBClusterBacktrackMessageFilterSensitiveLog = exports.DescribeCertificatesMessageFilterSensitiveLog = exports.CertificateMessageFilterSensitiveLog = exports.CertificateFilterSensitiveLog = exports.DescribeBlueGreenDeploymentsResponseFilterSensitiveLog = exports.DescribeBlueGreenDeploymentsRequestFilterSensitiveLog = exports.FilterFilterSensitiveLog = exports.DescribeAccountAttributesMessageFilterSensitiveLog = exports.DeregisterDBProxyTargetsResponseFilterSensitiveLog = exports.DeregisterDBProxyTargetsRequestFilterSensitiveLog = exports.DeleteOptionGroupMessageFilterSensitiveLog = exports.DeleteGlobalClusterResultFilterSensitiveLog = exports.DeleteGlobalClusterMessageFilterSensitiveLog = exports.DeleteEventSubscriptionResultFilterSensitiveLog = exports.DeleteEventSubscriptionMessageFilterSensitiveLog = exports.DeleteDBSubnetGroupMessageFilterSensitiveLog = exports.DeleteDBSnapshotResultFilterSensitiveLog = exports.DeleteDBSnapshotMessageFilterSensitiveLog = exports.DeleteDBSecurityGroupMessageFilterSensitiveLog = void 0;
const RDSServiceException_1 = require("./RDSServiceException");
var ActivityStreamMode;
(function (ActivityStreamMode) {
    ActivityStreamMode["async"] = "async";
    ActivityStreamMode["sync"] = "sync";
})(ActivityStreamMode = exports.ActivityStreamMode || (exports.ActivityStreamMode = {}));
var ActivityStreamPolicyStatus;
(function (ActivityStreamPolicyStatus) {
    ActivityStreamPolicyStatus["locked"] = "locked";
    ActivityStreamPolicyStatus["locking_policy"] = "locking-policy";
    ActivityStreamPolicyStatus["unlocked"] = "unlocked";
    ActivityStreamPolicyStatus["unlocking_policy"] = "unlocking-policy";
})(ActivityStreamPolicyStatus = exports.ActivityStreamPolicyStatus || (exports.ActivityStreamPolicyStatus = {}));
var ActivityStreamStatus;
(function (ActivityStreamStatus) {
    ActivityStreamStatus["started"] = "started";
    ActivityStreamStatus["starting"] = "starting";
    ActivityStreamStatus["stopped"] = "stopped";
    ActivityStreamStatus["stopping"] = "stopping";
})(ActivityStreamStatus = exports.ActivityStreamStatus || (exports.ActivityStreamStatus = {}));
class DBClusterNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterNotFoundFault.prototype);
    }
}
exports.DBClusterNotFoundFault = DBClusterNotFoundFault;
class DBClusterRoleAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterRoleAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterRoleAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleAlreadyExistsFault.prototype);
    }
}
exports.DBClusterRoleAlreadyExistsFault = DBClusterRoleAlreadyExistsFault;
class DBClusterRoleQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterRoleQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterRoleQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterRoleQuotaExceededFault.prototype);
    }
}
exports.DBClusterRoleQuotaExceededFault = DBClusterRoleQuotaExceededFault;
class InvalidDBClusterStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterStateFault.prototype);
    }
}
exports.InvalidDBClusterStateFault = InvalidDBClusterStateFault;
class DBInstanceNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceNotFoundFault.prototype);
    }
}
exports.DBInstanceNotFoundFault = DBInstanceNotFoundFault;
class DBInstanceRoleAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceRoleAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceRoleAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleAlreadyExistsFault.prototype);
    }
}
exports.DBInstanceRoleAlreadyExistsFault = DBInstanceRoleAlreadyExistsFault;
class DBInstanceRoleQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceRoleQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceRoleQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceRoleQuotaExceededFault.prototype);
    }
}
exports.DBInstanceRoleQuotaExceededFault = DBInstanceRoleQuotaExceededFault;
class InvalidDBInstanceStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBInstanceStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBInstanceStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBInstanceStateFault.prototype);
    }
}
exports.InvalidDBInstanceStateFault = InvalidDBInstanceStateFault;
class SourceNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SourceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceNotFoundFault.prototype);
    }
}
exports.SourceNotFoundFault = SourceNotFoundFault;
class SubscriptionNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SubscriptionNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SubscriptionNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionNotFoundFault.prototype);
    }
}
exports.SubscriptionNotFoundFault = SubscriptionNotFoundFault;
class BlueGreenDeploymentNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "BlueGreenDeploymentNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "BlueGreenDeploymentNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, BlueGreenDeploymentNotFoundFault.prototype);
    }
}
exports.BlueGreenDeploymentNotFoundFault = BlueGreenDeploymentNotFoundFault;
class DBProxyNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyNotFoundFault.prototype);
    }
}
exports.DBProxyNotFoundFault = DBProxyNotFoundFault;
class DBProxyTargetGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyTargetGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyTargetGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetGroupNotFoundFault.prototype);
    }
}
exports.DBProxyTargetGroupNotFoundFault = DBProxyTargetGroupNotFoundFault;
class DBSnapshotNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSnapshotNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSnapshotNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSnapshotNotFoundFault.prototype);
    }
}
exports.DBSnapshotNotFoundFault = DBSnapshotNotFoundFault;
class ResourceNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundFault.prototype);
    }
}
exports.ResourceNotFoundFault = ResourceNotFoundFault;
class AuthorizationAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "AuthorizationAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorizationAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationAlreadyExistsFault.prototype);
    }
}
exports.AuthorizationAlreadyExistsFault = AuthorizationAlreadyExistsFault;
class AuthorizationQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "AuthorizationQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorizationQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationQuotaExceededFault.prototype);
    }
}
exports.AuthorizationQuotaExceededFault = AuthorizationQuotaExceededFault;
class DBSecurityGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupNotFoundFault.prototype);
    }
}
exports.DBSecurityGroupNotFoundFault = DBSecurityGroupNotFoundFault;
class InvalidDBSecurityGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSecurityGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSecurityGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSecurityGroupStateFault.prototype);
    }
}
exports.InvalidDBSecurityGroupStateFault = InvalidDBSecurityGroupStateFault;
var ExportSourceType;
(function (ExportSourceType) {
    ExportSourceType["CLUSTER"] = "CLUSTER";
    ExportSourceType["SNAPSHOT"] = "SNAPSHOT";
})(ExportSourceType = exports.ExportSourceType || (exports.ExportSourceType = {}));
class ExportTaskNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ExportTaskNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ExportTaskNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportTaskNotFoundFault.prototype);
    }
}
exports.ExportTaskNotFoundFault = ExportTaskNotFoundFault;
class InvalidExportTaskStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidExportTaskStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportTaskStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportTaskStateFault.prototype);
    }
}
exports.InvalidExportTaskStateFault = InvalidExportTaskStateFault;
class DBParameterGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBParameterGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBParameterGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupAlreadyExistsFault.prototype);
    }
}
exports.DBParameterGroupAlreadyExistsFault = DBParameterGroupAlreadyExistsFault;
class DBParameterGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBParameterGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBParameterGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupNotFoundFault.prototype);
    }
}
exports.DBParameterGroupNotFoundFault = DBParameterGroupNotFoundFault;
class DBParameterGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBParameterGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBParameterGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBParameterGroupQuotaExceededFault.prototype);
    }
}
exports.DBParameterGroupQuotaExceededFault = DBParameterGroupQuotaExceededFault;
class DBClusterSnapshotAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterSnapshotAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterSnapshotAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterSnapshotAlreadyExistsFault.prototype);
    }
}
exports.DBClusterSnapshotAlreadyExistsFault = DBClusterSnapshotAlreadyExistsFault;
class DBClusterSnapshotNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterSnapshotNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterSnapshotNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterSnapshotNotFoundFault.prototype);
    }
}
exports.DBClusterSnapshotNotFoundFault = DBClusterSnapshotNotFoundFault;
class InvalidDBClusterSnapshotStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterSnapshotStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterSnapshotStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterSnapshotStateFault.prototype);
    }
}
exports.InvalidDBClusterSnapshotStateFault = InvalidDBClusterSnapshotStateFault;
class KMSKeyNotAccessibleFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "KMSKeyNotAccessibleFault",
            $fault: "client",
            ...opts,
        });
        this.name = "KMSKeyNotAccessibleFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, KMSKeyNotAccessibleFault.prototype);
    }
}
exports.KMSKeyNotAccessibleFault = KMSKeyNotAccessibleFault;
class SnapshotQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SnapshotQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SnapshotQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SnapshotQuotaExceededFault.prototype);
    }
}
exports.SnapshotQuotaExceededFault = SnapshotQuotaExceededFault;
class CustomAvailabilityZoneNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomAvailabilityZoneNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomAvailabilityZoneNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomAvailabilityZoneNotFoundFault.prototype);
    }
}
exports.CustomAvailabilityZoneNotFoundFault = CustomAvailabilityZoneNotFoundFault;
class DBSnapshotAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSnapshotAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSnapshotAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSnapshotAlreadyExistsFault.prototype);
    }
}
exports.DBSnapshotAlreadyExistsFault = DBSnapshotAlreadyExistsFault;
class InvalidDBSnapshotStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSnapshotStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSnapshotStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSnapshotStateFault.prototype);
    }
}
exports.InvalidDBSnapshotStateFault = InvalidDBSnapshotStateFault;
class OptionGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "OptionGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "OptionGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupAlreadyExistsFault.prototype);
    }
}
exports.OptionGroupAlreadyExistsFault = OptionGroupAlreadyExistsFault;
class OptionGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "OptionGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "OptionGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupNotFoundFault.prototype);
    }
}
exports.OptionGroupNotFoundFault = OptionGroupNotFoundFault;
class OptionGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "OptionGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "OptionGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, OptionGroupQuotaExceededFault.prototype);
    }
}
exports.OptionGroupQuotaExceededFault = OptionGroupQuotaExceededFault;
class BlueGreenDeploymentAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "BlueGreenDeploymentAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "BlueGreenDeploymentAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, BlueGreenDeploymentAlreadyExistsFault.prototype);
    }
}
exports.BlueGreenDeploymentAlreadyExistsFault = BlueGreenDeploymentAlreadyExistsFault;
class DBClusterParameterGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterParameterGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterParameterGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterParameterGroupNotFoundFault.prototype);
    }
}
exports.DBClusterParameterGroupNotFoundFault = DBClusterParameterGroupNotFoundFault;
class DBClusterQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterQuotaExceededFault.prototype);
    }
}
exports.DBClusterQuotaExceededFault = DBClusterQuotaExceededFault;
class InstanceQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InstanceQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceQuotaExceededFault.prototype);
    }
}
exports.InstanceQuotaExceededFault = InstanceQuotaExceededFault;
class SourceClusterNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SourceClusterNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceClusterNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceClusterNotSupportedFault.prototype);
    }
}
exports.SourceClusterNotSupportedFault = SourceClusterNotSupportedFault;
class SourceDatabaseNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SourceDatabaseNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceDatabaseNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceDatabaseNotSupportedFault.prototype);
    }
}
exports.SourceDatabaseNotSupportedFault = SourceDatabaseNotSupportedFault;
class CustomDBEngineVersionAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomDBEngineVersionAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomDBEngineVersionAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionAlreadyExistsFault.prototype);
    }
}
exports.CustomDBEngineVersionAlreadyExistsFault = CustomDBEngineVersionAlreadyExistsFault;
class CustomDBEngineVersionQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomDBEngineVersionQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomDBEngineVersionQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionQuotaExceededFault.prototype);
    }
}
exports.CustomDBEngineVersionQuotaExceededFault = CustomDBEngineVersionQuotaExceededFault;
var WriteForwardingStatus;
(function (WriteForwardingStatus) {
    WriteForwardingStatus["DISABLED"] = "disabled";
    WriteForwardingStatus["DISABLING"] = "disabling";
    WriteForwardingStatus["ENABLED"] = "enabled";
    WriteForwardingStatus["ENABLING"] = "enabling";
    WriteForwardingStatus["UNKNOWN"] = "unknown";
})(WriteForwardingStatus = exports.WriteForwardingStatus || (exports.WriteForwardingStatus = {}));
class DBClusterAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterAlreadyExistsFault.prototype);
    }
}
exports.DBClusterAlreadyExistsFault = DBClusterAlreadyExistsFault;
class DBSubnetGroupDoesNotCoverEnoughAZs extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupDoesNotCoverEnoughAZs",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupDoesNotCoverEnoughAZs";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupDoesNotCoverEnoughAZs.prototype);
    }
}
exports.DBSubnetGroupDoesNotCoverEnoughAZs = DBSubnetGroupDoesNotCoverEnoughAZs;
class DBSubnetGroupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupNotFoundFault.prototype);
    }
}
exports.DBSubnetGroupNotFoundFault = DBSubnetGroupNotFoundFault;
class DomainNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DomainNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DomainNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DomainNotFoundFault.prototype);
    }
}
exports.DomainNotFoundFault = DomainNotFoundFault;
class GlobalClusterNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "GlobalClusterNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalClusterNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterNotFoundFault.prototype);
    }
}
exports.GlobalClusterNotFoundFault = GlobalClusterNotFoundFault;
class InsufficientStorageClusterCapacityFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InsufficientStorageClusterCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientStorageClusterCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientStorageClusterCapacityFault.prototype);
    }
}
exports.InsufficientStorageClusterCapacityFault = InsufficientStorageClusterCapacityFault;
class InvalidDBSubnetGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSubnetGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSubnetGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetGroupStateFault.prototype);
    }
}
exports.InvalidDBSubnetGroupStateFault = InvalidDBSubnetGroupStateFault;
class InvalidGlobalClusterStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidGlobalClusterStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidGlobalClusterStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGlobalClusterStateFault.prototype);
    }
}
exports.InvalidGlobalClusterStateFault = InvalidGlobalClusterStateFault;
class InvalidSubnet extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidSubnet",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSubnet";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSubnet.prototype);
    }
}
exports.InvalidSubnet = InvalidSubnet;
class InvalidVPCNetworkStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidVPCNetworkStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidVPCNetworkStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidVPCNetworkStateFault.prototype);
    }
}
exports.InvalidVPCNetworkStateFault = InvalidVPCNetworkStateFault;
class StorageQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "StorageQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "StorageQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageQuotaExceededFault.prototype);
    }
}
exports.StorageQuotaExceededFault = StorageQuotaExceededFault;
class DBClusterEndpointAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterEndpointAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterEndpointAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointAlreadyExistsFault.prototype);
    }
}
exports.DBClusterEndpointAlreadyExistsFault = DBClusterEndpointAlreadyExistsFault;
class DBClusterEndpointQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterEndpointQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterEndpointQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointQuotaExceededFault.prototype);
    }
}
exports.DBClusterEndpointQuotaExceededFault = DBClusterEndpointQuotaExceededFault;
class AuthorizationNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "AuthorizationNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorizationNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationNotFoundFault.prototype);
    }
}
exports.AuthorizationNotFoundFault = AuthorizationNotFoundFault;
class BackupPolicyNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "BackupPolicyNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupPolicyNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupPolicyNotFoundFault.prototype);
    }
}
exports.BackupPolicyNotFoundFault = BackupPolicyNotFoundFault;
var AutomationMode;
(function (AutomationMode) {
    AutomationMode["ALL_PAUSED"] = "all-paused";
    AutomationMode["FULL"] = "full";
})(AutomationMode = exports.AutomationMode || (exports.AutomationMode = {}));
var ReplicaMode;
(function (ReplicaMode) {
    ReplicaMode["MOUNTED"] = "mounted";
    ReplicaMode["OPEN_READ_ONLY"] = "open-read-only";
})(ReplicaMode = exports.ReplicaMode || (exports.ReplicaMode = {}));
class DBInstanceAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAlreadyExistsFault.prototype);
    }
}
exports.DBInstanceAlreadyExistsFault = DBInstanceAlreadyExistsFault;
class InsufficientDBInstanceCapacityFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InsufficientDBInstanceCapacityFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientDBInstanceCapacityFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientDBInstanceCapacityFault.prototype);
    }
}
exports.InsufficientDBInstanceCapacityFault = InsufficientDBInstanceCapacityFault;
class NetworkTypeNotSupported extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "NetworkTypeNotSupported",
            $fault: "client",
            ...opts,
        });
        this.name = "NetworkTypeNotSupported";
        this.$fault = "client";
        Object.setPrototypeOf(this, NetworkTypeNotSupported.prototype);
    }
}
exports.NetworkTypeNotSupported = NetworkTypeNotSupported;
class ProvisionedIopsNotAvailableInAZFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "ProvisionedIopsNotAvailableInAZFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedIopsNotAvailableInAZFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedIopsNotAvailableInAZFault.prototype);
    }
}
exports.ProvisionedIopsNotAvailableInAZFault = ProvisionedIopsNotAvailableInAZFault;
class StorageTypeNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "StorageTypeNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "StorageTypeNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageTypeNotSupportedFault.prototype);
    }
}
exports.StorageTypeNotSupportedFault = StorageTypeNotSupportedFault;
class DBSubnetGroupNotAllowedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupNotAllowedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupNotAllowedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupNotAllowedFault.prototype);
    }
}
exports.DBSubnetGroupNotAllowedFault = DBSubnetGroupNotAllowedFault;
class InvalidDBSubnetGroupFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSubnetGroupFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSubnetGroupFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetGroupFault.prototype);
    }
}
exports.InvalidDBSubnetGroupFault = InvalidDBSubnetGroupFault;
var AuthScheme;
(function (AuthScheme) {
    AuthScheme["SECRETS"] = "SECRETS";
})(AuthScheme = exports.AuthScheme || (exports.AuthScheme = {}));
var ClientPasswordAuthType;
(function (ClientPasswordAuthType) {
    ClientPasswordAuthType["MYSQL_NATIVE_PASSWORD"] = "MYSQL_NATIVE_PASSWORD";
    ClientPasswordAuthType["POSTGRES_MD5"] = "POSTGRES_MD5";
    ClientPasswordAuthType["POSTGRES_SCRAM_SHA_256"] = "POSTGRES_SCRAM_SHA_256";
    ClientPasswordAuthType["SQL_SERVER_AUTHENTICATION"] = "SQL_SERVER_AUTHENTICATION";
})(ClientPasswordAuthType = exports.ClientPasswordAuthType || (exports.ClientPasswordAuthType = {}));
var IAMAuthMode;
(function (IAMAuthMode) {
    IAMAuthMode["DISABLED"] = "DISABLED";
    IAMAuthMode["ENABLED"] = "ENABLED";
    IAMAuthMode["REQUIRED"] = "REQUIRED";
})(IAMAuthMode = exports.IAMAuthMode || (exports.IAMAuthMode = {}));
var EngineFamily;
(function (EngineFamily) {
    EngineFamily["MYSQL"] = "MYSQL";
    EngineFamily["POSTGRESQL"] = "POSTGRESQL";
    EngineFamily["SQLSERVER"] = "SQLSERVER";
})(EngineFamily = exports.EngineFamily || (exports.EngineFamily = {}));
var DBProxyStatus;
(function (DBProxyStatus) {
    DBProxyStatus["AVAILABLE"] = "available";
    DBProxyStatus["CREATING"] = "creating";
    DBProxyStatus["DELETING"] = "deleting";
    DBProxyStatus["INCOMPATIBLE_NETWORK"] = "incompatible-network";
    DBProxyStatus["INSUFFICIENT_RESOURCE_LIMITS"] = "insufficient-resource-limits";
    DBProxyStatus["MODIFYING"] = "modifying";
    DBProxyStatus["REACTIVATING"] = "reactivating";
    DBProxyStatus["SUSPENDED"] = "suspended";
    DBProxyStatus["SUSPENDING"] = "suspending";
})(DBProxyStatus = exports.DBProxyStatus || (exports.DBProxyStatus = {}));
class DBProxyAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyAlreadyExistsFault.prototype);
    }
}
exports.DBProxyAlreadyExistsFault = DBProxyAlreadyExistsFault;
class DBProxyQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyQuotaExceededFault.prototype);
    }
}
exports.DBProxyQuotaExceededFault = DBProxyQuotaExceededFault;
var DBProxyEndpointTargetRole;
(function (DBProxyEndpointTargetRole) {
    DBProxyEndpointTargetRole["READ_ONLY"] = "READ_ONLY";
    DBProxyEndpointTargetRole["READ_WRITE"] = "READ_WRITE";
})(DBProxyEndpointTargetRole = exports.DBProxyEndpointTargetRole || (exports.DBProxyEndpointTargetRole = {}));
var DBProxyEndpointStatus;
(function (DBProxyEndpointStatus) {
    DBProxyEndpointStatus["AVAILABLE"] = "available";
    DBProxyEndpointStatus["CREATING"] = "creating";
    DBProxyEndpointStatus["DELETING"] = "deleting";
    DBProxyEndpointStatus["INCOMPATIBLE_NETWORK"] = "incompatible-network";
    DBProxyEndpointStatus["INSUFFICIENT_RESOURCE_LIMITS"] = "insufficient-resource-limits";
    DBProxyEndpointStatus["MODIFYING"] = "modifying";
})(DBProxyEndpointStatus = exports.DBProxyEndpointStatus || (exports.DBProxyEndpointStatus = {}));
class DBProxyEndpointAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyEndpointAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyEndpointAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointAlreadyExistsFault.prototype);
    }
}
exports.DBProxyEndpointAlreadyExistsFault = DBProxyEndpointAlreadyExistsFault;
class DBProxyEndpointQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyEndpointQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyEndpointQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointQuotaExceededFault.prototype);
    }
}
exports.DBProxyEndpointQuotaExceededFault = DBProxyEndpointQuotaExceededFault;
class InvalidDBProxyStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBProxyStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBProxyStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBProxyStateFault.prototype);
    }
}
exports.InvalidDBProxyStateFault = InvalidDBProxyStateFault;
class DBSecurityGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupAlreadyExistsFault.prototype);
    }
}
exports.DBSecurityGroupAlreadyExistsFault = DBSecurityGroupAlreadyExistsFault;
class DBSecurityGroupNotSupportedFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupNotSupportedFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupNotSupportedFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupNotSupportedFault.prototype);
    }
}
exports.DBSecurityGroupNotSupportedFault = DBSecurityGroupNotSupportedFault;
class DBSecurityGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSecurityGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSecurityGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSecurityGroupQuotaExceededFault.prototype);
    }
}
exports.DBSecurityGroupQuotaExceededFault = DBSecurityGroupQuotaExceededFault;
class DBSubnetGroupAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupAlreadyExistsFault.prototype);
    }
}
exports.DBSubnetGroupAlreadyExistsFault = DBSubnetGroupAlreadyExistsFault;
class DBSubnetGroupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetGroupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetGroupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetGroupQuotaExceededFault.prototype);
    }
}
exports.DBSubnetGroupQuotaExceededFault = DBSubnetGroupQuotaExceededFault;
class DBSubnetQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBSubnetQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBSubnetQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBSubnetQuotaExceededFault.prototype);
    }
}
exports.DBSubnetQuotaExceededFault = DBSubnetQuotaExceededFault;
class EventSubscriptionQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "EventSubscriptionQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "EventSubscriptionQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, EventSubscriptionQuotaExceededFault.prototype);
    }
}
exports.EventSubscriptionQuotaExceededFault = EventSubscriptionQuotaExceededFault;
class SNSInvalidTopicFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SNSInvalidTopicFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SNSInvalidTopicFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSInvalidTopicFault.prototype);
    }
}
exports.SNSInvalidTopicFault = SNSInvalidTopicFault;
class SNSNoAuthorizationFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SNSNoAuthorizationFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SNSNoAuthorizationFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSNoAuthorizationFault.prototype);
    }
}
exports.SNSNoAuthorizationFault = SNSNoAuthorizationFault;
class SNSTopicArnNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SNSTopicArnNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SNSTopicArnNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SNSTopicArnNotFoundFault.prototype);
    }
}
exports.SNSTopicArnNotFoundFault = SNSTopicArnNotFoundFault;
class SubscriptionAlreadyExistFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SubscriptionAlreadyExistFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SubscriptionAlreadyExistFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionAlreadyExistFault.prototype);
    }
}
exports.SubscriptionAlreadyExistFault = SubscriptionAlreadyExistFault;
class SubscriptionCategoryNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "SubscriptionCategoryNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "SubscriptionCategoryNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, SubscriptionCategoryNotFoundFault.prototype);
    }
}
exports.SubscriptionCategoryNotFoundFault = SubscriptionCategoryNotFoundFault;
var FailoverStatus;
(function (FailoverStatus) {
    FailoverStatus["CANCELLING"] = "cancelling";
    FailoverStatus["FAILING_OVER"] = "failing-over";
    FailoverStatus["PENDING"] = "pending";
})(FailoverStatus = exports.FailoverStatus || (exports.FailoverStatus = {}));
class GlobalClusterAlreadyExistsFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "GlobalClusterAlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalClusterAlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterAlreadyExistsFault.prototype);
    }
}
exports.GlobalClusterAlreadyExistsFault = GlobalClusterAlreadyExistsFault;
class GlobalClusterQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "GlobalClusterQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalClusterQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalClusterQuotaExceededFault.prototype);
    }
}
exports.GlobalClusterQuotaExceededFault = GlobalClusterQuotaExceededFault;
class InvalidBlueGreenDeploymentStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidBlueGreenDeploymentStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidBlueGreenDeploymentStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidBlueGreenDeploymentStateFault.prototype);
    }
}
exports.InvalidBlueGreenDeploymentStateFault = InvalidBlueGreenDeploymentStateFault;
class CustomDBEngineVersionNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CustomDBEngineVersionNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomDBEngineVersionNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomDBEngineVersionNotFoundFault.prototype);
    }
}
exports.CustomDBEngineVersionNotFoundFault = CustomDBEngineVersionNotFoundFault;
class InvalidCustomDBEngineVersionStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidCustomDBEngineVersionStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidCustomDBEngineVersionStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCustomDBEngineVersionStateFault.prototype);
    }
}
exports.InvalidCustomDBEngineVersionStateFault = InvalidCustomDBEngineVersionStateFault;
class DBClusterEndpointNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterEndpointNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterEndpointNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterEndpointNotFoundFault.prototype);
    }
}
exports.DBClusterEndpointNotFoundFault = DBClusterEndpointNotFoundFault;
class InvalidDBClusterEndpointStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBClusterEndpointStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBClusterEndpointStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBClusterEndpointStateFault.prototype);
    }
}
exports.InvalidDBClusterEndpointStateFault = InvalidDBClusterEndpointStateFault;
class InvalidDBParameterGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBParameterGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBParameterGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBParameterGroupStateFault.prototype);
    }
}
exports.InvalidDBParameterGroupStateFault = InvalidDBParameterGroupStateFault;
class DBInstanceAutomatedBackupQuotaExceededFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceAutomatedBackupQuotaExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceAutomatedBackupQuotaExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAutomatedBackupQuotaExceededFault.prototype);
    }
}
exports.DBInstanceAutomatedBackupQuotaExceededFault = DBInstanceAutomatedBackupQuotaExceededFault;
class DBInstanceAutomatedBackupNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBInstanceAutomatedBackupNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBInstanceAutomatedBackupNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBInstanceAutomatedBackupNotFoundFault.prototype);
    }
}
exports.DBInstanceAutomatedBackupNotFoundFault = DBInstanceAutomatedBackupNotFoundFault;
class InvalidDBInstanceAutomatedBackupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBInstanceAutomatedBackupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBInstanceAutomatedBackupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBInstanceAutomatedBackupStateFault.prototype);
    }
}
exports.InvalidDBInstanceAutomatedBackupStateFault = InvalidDBInstanceAutomatedBackupStateFault;
class DBProxyEndpointNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyEndpointNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyEndpointNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyEndpointNotFoundFault.prototype);
    }
}
exports.DBProxyEndpointNotFoundFault = DBProxyEndpointNotFoundFault;
class InvalidDBProxyEndpointStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBProxyEndpointStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBProxyEndpointStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBProxyEndpointStateFault.prototype);
    }
}
exports.InvalidDBProxyEndpointStateFault = InvalidDBProxyEndpointStateFault;
class InvalidDBSubnetStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidDBSubnetStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDBSubnetStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDBSubnetStateFault.prototype);
    }
}
exports.InvalidDBSubnetStateFault = InvalidDBSubnetStateFault;
class InvalidEventSubscriptionStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidEventSubscriptionStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEventSubscriptionStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEventSubscriptionStateFault.prototype);
    }
}
exports.InvalidEventSubscriptionStateFault = InvalidEventSubscriptionStateFault;
class InvalidOptionGroupStateFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "InvalidOptionGroupStateFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOptionGroupStateFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOptionGroupStateFault.prototype);
    }
}
exports.InvalidOptionGroupStateFault = InvalidOptionGroupStateFault;
class DBProxyTargetNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBProxyTargetNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBProxyTargetNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBProxyTargetNotFoundFault.prototype);
    }
}
exports.DBProxyTargetNotFoundFault = DBProxyTargetNotFoundFault;
class CertificateNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "CertificateNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "CertificateNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, CertificateNotFoundFault.prototype);
    }
}
exports.CertificateNotFoundFault = CertificateNotFoundFault;
class DBClusterBacktrackNotFoundFault extends RDSServiceException_1.RDSServiceException {
    constructor(opts) {
        super({
            name: "DBClusterBacktrackNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "DBClusterBacktrackNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, DBClusterBacktrackNotFoundFault.prototype);
    }
}
exports.DBClusterBacktrackNotFoundFault = DBClusterBacktrackNotFoundFault;
var ApplyMethod;
(function (ApplyMethod) {
    ApplyMethod["immediate"] = "immediate";
    ApplyMethod["pending_reboot"] = "pending-reboot";
})(ApplyMethod = exports.ApplyMethod || (exports.ApplyMethod = {}));
const AccountQuotaFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AccountQuotaFilterSensitiveLog = AccountQuotaFilterSensitiveLog;
const AccountAttributesMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AccountAttributesMessageFilterSensitiveLog = AccountAttributesMessageFilterSensitiveLog;
const AddRoleToDBClusterMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AddRoleToDBClusterMessageFilterSensitiveLog = AddRoleToDBClusterMessageFilterSensitiveLog;
const AddRoleToDBInstanceMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AddRoleToDBInstanceMessageFilterSensitiveLog = AddRoleToDBInstanceMessageFilterSensitiveLog;
const AddSourceIdentifierToSubscriptionMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AddSourceIdentifierToSubscriptionMessageFilterSensitiveLog = AddSourceIdentifierToSubscriptionMessageFilterSensitiveLog;
const EventSubscriptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EventSubscriptionFilterSensitiveLog = EventSubscriptionFilterSensitiveLog;
const AddSourceIdentifierToSubscriptionResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AddSourceIdentifierToSubscriptionResultFilterSensitiveLog = AddSourceIdentifierToSubscriptionResultFilterSensitiveLog;
const TagFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
const AddTagsToResourceMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AddTagsToResourceMessageFilterSensitiveLog = AddTagsToResourceMessageFilterSensitiveLog;
const ApplyPendingMaintenanceActionMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ApplyPendingMaintenanceActionMessageFilterSensitiveLog = ApplyPendingMaintenanceActionMessageFilterSensitiveLog;
const PendingMaintenanceActionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PendingMaintenanceActionFilterSensitiveLog = PendingMaintenanceActionFilterSensitiveLog;
const ResourcePendingMaintenanceActionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ResourcePendingMaintenanceActionsFilterSensitiveLog = ResourcePendingMaintenanceActionsFilterSensitiveLog;
const ApplyPendingMaintenanceActionResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ApplyPendingMaintenanceActionResultFilterSensitiveLog = ApplyPendingMaintenanceActionResultFilterSensitiveLog;
const AuthorizeDBSecurityGroupIngressMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AuthorizeDBSecurityGroupIngressMessageFilterSensitiveLog = AuthorizeDBSecurityGroupIngressMessageFilterSensitiveLog;
const EC2SecurityGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EC2SecurityGroupFilterSensitiveLog = EC2SecurityGroupFilterSensitiveLog;
const IPRangeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.IPRangeFilterSensitiveLog = IPRangeFilterSensitiveLog;
const DBSecurityGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBSecurityGroupFilterSensitiveLog = DBSecurityGroupFilterSensitiveLog;
const AuthorizeDBSecurityGroupIngressResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AuthorizeDBSecurityGroupIngressResultFilterSensitiveLog = AuthorizeDBSecurityGroupIngressResultFilterSensitiveLog;
const BacktrackDBClusterMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BacktrackDBClusterMessageFilterSensitiveLog = BacktrackDBClusterMessageFilterSensitiveLog;
const DBClusterBacktrackFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterBacktrackFilterSensitiveLog = DBClusterBacktrackFilterSensitiveLog;
const CancelExportTaskMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelExportTaskMessageFilterSensitiveLog = CancelExportTaskMessageFilterSensitiveLog;
const ExportTaskFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExportTaskFilterSensitiveLog = ExportTaskFilterSensitiveLog;
const CopyDBClusterParameterGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBClusterParameterGroupMessageFilterSensitiveLog = CopyDBClusterParameterGroupMessageFilterSensitiveLog;
const DBClusterParameterGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterParameterGroupFilterSensitiveLog = DBClusterParameterGroupFilterSensitiveLog;
const CopyDBClusterParameterGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBClusterParameterGroupResultFilterSensitiveLog = CopyDBClusterParameterGroupResultFilterSensitiveLog;
const CopyDBClusterSnapshotMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBClusterSnapshotMessageFilterSensitiveLog = CopyDBClusterSnapshotMessageFilterSensitiveLog;
const DBClusterSnapshotFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterSnapshotFilterSensitiveLog = DBClusterSnapshotFilterSensitiveLog;
const CopyDBClusterSnapshotResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBClusterSnapshotResultFilterSensitiveLog = CopyDBClusterSnapshotResultFilterSensitiveLog;
const CopyDBParameterGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBParameterGroupMessageFilterSensitiveLog = CopyDBParameterGroupMessageFilterSensitiveLog;
const DBParameterGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBParameterGroupFilterSensitiveLog = DBParameterGroupFilterSensitiveLog;
const CopyDBParameterGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBParameterGroupResultFilterSensitiveLog = CopyDBParameterGroupResultFilterSensitiveLog;
const CopyDBSnapshotMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBSnapshotMessageFilterSensitiveLog = CopyDBSnapshotMessageFilterSensitiveLog;
const ProcessorFeatureFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ProcessorFeatureFilterSensitiveLog = ProcessorFeatureFilterSensitiveLog;
const DBSnapshotFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBSnapshotFilterSensitiveLog = DBSnapshotFilterSensitiveLog;
const CopyDBSnapshotResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyDBSnapshotResultFilterSensitiveLog = CopyDBSnapshotResultFilterSensitiveLog;
const CopyOptionGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyOptionGroupMessageFilterSensitiveLog = CopyOptionGroupMessageFilterSensitiveLog;
const DBSecurityGroupMembershipFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBSecurityGroupMembershipFilterSensitiveLog = DBSecurityGroupMembershipFilterSensitiveLog;
const OptionSettingFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OptionSettingFilterSensitiveLog = OptionSettingFilterSensitiveLog;
const VpcSecurityGroupMembershipFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.VpcSecurityGroupMembershipFilterSensitiveLog = VpcSecurityGroupMembershipFilterSensitiveLog;
const OptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OptionFilterSensitiveLog = OptionFilterSensitiveLog;
const OptionGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OptionGroupFilterSensitiveLog = OptionGroupFilterSensitiveLog;
const CopyOptionGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CopyOptionGroupResultFilterSensitiveLog = CopyOptionGroupResultFilterSensitiveLog;
const CreateBlueGreenDeploymentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateBlueGreenDeploymentRequestFilterSensitiveLog = CreateBlueGreenDeploymentRequestFilterSensitiveLog;
const SwitchoverDetailFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SwitchoverDetailFilterSensitiveLog = SwitchoverDetailFilterSensitiveLog;
const BlueGreenDeploymentTaskFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BlueGreenDeploymentTaskFilterSensitiveLog = BlueGreenDeploymentTaskFilterSensitiveLog;
const BlueGreenDeploymentFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BlueGreenDeploymentFilterSensitiveLog = BlueGreenDeploymentFilterSensitiveLog;
const CreateBlueGreenDeploymentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateBlueGreenDeploymentResponseFilterSensitiveLog = CreateBlueGreenDeploymentResponseFilterSensitiveLog;
const CreateCustomDBEngineVersionMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCustomDBEngineVersionMessageFilterSensitiveLog = CreateCustomDBEngineVersionMessageFilterSensitiveLog;
const CharacterSetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CharacterSetFilterSensitiveLog = CharacterSetFilterSensitiveLog;
const TimezoneFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TimezoneFilterSensitiveLog = TimezoneFilterSensitiveLog;
const UpgradeTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpgradeTargetFilterSensitiveLog = UpgradeTargetFilterSensitiveLog;
const DBEngineVersionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBEngineVersionFilterSensitiveLog = DBEngineVersionFilterSensitiveLog;
const ScalingConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ScalingConfigurationFilterSensitiveLog = ScalingConfigurationFilterSensitiveLog;
const ServerlessV2ScalingConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ServerlessV2ScalingConfigurationFilterSensitiveLog = ServerlessV2ScalingConfigurationFilterSensitiveLog;
const CreateDBClusterMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBClusterMessageFilterSensitiveLog = CreateDBClusterMessageFilterSensitiveLog;
const DBClusterRoleFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterRoleFilterSensitiveLog = DBClusterRoleFilterSensitiveLog;
const DBClusterMemberFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterMemberFilterSensitiveLog = DBClusterMemberFilterSensitiveLog;
const DBClusterOptionGroupStatusFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterOptionGroupStatusFilterSensitiveLog = DBClusterOptionGroupStatusFilterSensitiveLog;
const DomainMembershipFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DomainMembershipFilterSensitiveLog = DomainMembershipFilterSensitiveLog;
const MasterUserSecretFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MasterUserSecretFilterSensitiveLog = MasterUserSecretFilterSensitiveLog;
const PendingCloudwatchLogsExportsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PendingCloudwatchLogsExportsFilterSensitiveLog = PendingCloudwatchLogsExportsFilterSensitiveLog;
const ClusterPendingModifiedValuesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ClusterPendingModifiedValuesFilterSensitiveLog = ClusterPendingModifiedValuesFilterSensitiveLog;
const ScalingConfigurationInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ScalingConfigurationInfoFilterSensitiveLog = ScalingConfigurationInfoFilterSensitiveLog;
const ServerlessV2ScalingConfigurationInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ServerlessV2ScalingConfigurationInfoFilterSensitiveLog = ServerlessV2ScalingConfigurationInfoFilterSensitiveLog;
const DBClusterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterFilterSensitiveLog = DBClusterFilterSensitiveLog;
const CreateDBClusterResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBClusterResultFilterSensitiveLog = CreateDBClusterResultFilterSensitiveLog;
const CreateDBClusterEndpointMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBClusterEndpointMessageFilterSensitiveLog = CreateDBClusterEndpointMessageFilterSensitiveLog;
const DBClusterEndpointFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterEndpointFilterSensitiveLog = DBClusterEndpointFilterSensitiveLog;
const CreateDBClusterParameterGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBClusterParameterGroupMessageFilterSensitiveLog = CreateDBClusterParameterGroupMessageFilterSensitiveLog;
const CreateDBClusterParameterGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBClusterParameterGroupResultFilterSensitiveLog = CreateDBClusterParameterGroupResultFilterSensitiveLog;
const CreateDBClusterSnapshotMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBClusterSnapshotMessageFilterSensitiveLog = CreateDBClusterSnapshotMessageFilterSensitiveLog;
const CreateDBClusterSnapshotResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBClusterSnapshotResultFilterSensitiveLog = CreateDBClusterSnapshotResultFilterSensitiveLog;
const CreateDBInstanceMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBInstanceMessageFilterSensitiveLog = CreateDBInstanceMessageFilterSensitiveLog;
const DBInstanceRoleFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBInstanceRoleFilterSensitiveLog = DBInstanceRoleFilterSensitiveLog;
const DBInstanceAutomatedBackupsReplicationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBInstanceAutomatedBackupsReplicationFilterSensitiveLog = DBInstanceAutomatedBackupsReplicationFilterSensitiveLog;
const DBParameterGroupStatusFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBParameterGroupStatusFilterSensitiveLog = DBParameterGroupStatusFilterSensitiveLog;
const AvailabilityZoneFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AvailabilityZoneFilterSensitiveLog = AvailabilityZoneFilterSensitiveLog;
const OutpostFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OutpostFilterSensitiveLog = OutpostFilterSensitiveLog;
const SubnetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubnetFilterSensitiveLog = SubnetFilterSensitiveLog;
const DBSubnetGroupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBSubnetGroupFilterSensitiveLog = DBSubnetGroupFilterSensitiveLog;
const EndpointFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EndpointFilterSensitiveLog = EndpointFilterSensitiveLog;
const OptionGroupMembershipFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OptionGroupMembershipFilterSensitiveLog = OptionGroupMembershipFilterSensitiveLog;
const PendingModifiedValuesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PendingModifiedValuesFilterSensitiveLog = PendingModifiedValuesFilterSensitiveLog;
const DBInstanceStatusInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBInstanceStatusInfoFilterSensitiveLog = DBInstanceStatusInfoFilterSensitiveLog;
const DBInstanceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBInstanceFilterSensitiveLog = DBInstanceFilterSensitiveLog;
const CreateDBInstanceResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBInstanceResultFilterSensitiveLog = CreateDBInstanceResultFilterSensitiveLog;
const CreateDBInstanceReadReplicaMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBInstanceReadReplicaMessageFilterSensitiveLog = CreateDBInstanceReadReplicaMessageFilterSensitiveLog;
const CreateDBInstanceReadReplicaResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBInstanceReadReplicaResultFilterSensitiveLog = CreateDBInstanceReadReplicaResultFilterSensitiveLog;
const CreateDBParameterGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBParameterGroupMessageFilterSensitiveLog = CreateDBParameterGroupMessageFilterSensitiveLog;
const CreateDBParameterGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBParameterGroupResultFilterSensitiveLog = CreateDBParameterGroupResultFilterSensitiveLog;
const UserAuthConfigFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UserAuthConfigFilterSensitiveLog = UserAuthConfigFilterSensitiveLog;
const CreateDBProxyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBProxyRequestFilterSensitiveLog = CreateDBProxyRequestFilterSensitiveLog;
const UserAuthConfigInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UserAuthConfigInfoFilterSensitiveLog = UserAuthConfigInfoFilterSensitiveLog;
const DBProxyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBProxyFilterSensitiveLog = DBProxyFilterSensitiveLog;
const CreateDBProxyResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBProxyResponseFilterSensitiveLog = CreateDBProxyResponseFilterSensitiveLog;
const CreateDBProxyEndpointRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBProxyEndpointRequestFilterSensitiveLog = CreateDBProxyEndpointRequestFilterSensitiveLog;
const DBProxyEndpointFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBProxyEndpointFilterSensitiveLog = DBProxyEndpointFilterSensitiveLog;
const CreateDBProxyEndpointResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBProxyEndpointResponseFilterSensitiveLog = CreateDBProxyEndpointResponseFilterSensitiveLog;
const CreateDBSecurityGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBSecurityGroupMessageFilterSensitiveLog = CreateDBSecurityGroupMessageFilterSensitiveLog;
const CreateDBSecurityGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBSecurityGroupResultFilterSensitiveLog = CreateDBSecurityGroupResultFilterSensitiveLog;
const CreateDBSnapshotMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBSnapshotMessageFilterSensitiveLog = CreateDBSnapshotMessageFilterSensitiveLog;
const CreateDBSnapshotResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBSnapshotResultFilterSensitiveLog = CreateDBSnapshotResultFilterSensitiveLog;
const CreateDBSubnetGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBSubnetGroupMessageFilterSensitiveLog = CreateDBSubnetGroupMessageFilterSensitiveLog;
const CreateDBSubnetGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDBSubnetGroupResultFilterSensitiveLog = CreateDBSubnetGroupResultFilterSensitiveLog;
const CreateEventSubscriptionMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateEventSubscriptionMessageFilterSensitiveLog = CreateEventSubscriptionMessageFilterSensitiveLog;
const CreateEventSubscriptionResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateEventSubscriptionResultFilterSensitiveLog = CreateEventSubscriptionResultFilterSensitiveLog;
const CreateGlobalClusterMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateGlobalClusterMessageFilterSensitiveLog = CreateGlobalClusterMessageFilterSensitiveLog;
const FailoverStateFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FailoverStateFilterSensitiveLog = FailoverStateFilterSensitiveLog;
const GlobalClusterMemberFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GlobalClusterMemberFilterSensitiveLog = GlobalClusterMemberFilterSensitiveLog;
const GlobalClusterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GlobalClusterFilterSensitiveLog = GlobalClusterFilterSensitiveLog;
const CreateGlobalClusterResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateGlobalClusterResultFilterSensitiveLog = CreateGlobalClusterResultFilterSensitiveLog;
const CreateOptionGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateOptionGroupMessageFilterSensitiveLog = CreateOptionGroupMessageFilterSensitiveLog;
const CreateOptionGroupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateOptionGroupResultFilterSensitiveLog = CreateOptionGroupResultFilterSensitiveLog;
const DeleteBlueGreenDeploymentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteBlueGreenDeploymentRequestFilterSensitiveLog = DeleteBlueGreenDeploymentRequestFilterSensitiveLog;
const DeleteBlueGreenDeploymentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteBlueGreenDeploymentResponseFilterSensitiveLog = DeleteBlueGreenDeploymentResponseFilterSensitiveLog;
const DeleteCustomDBEngineVersionMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteCustomDBEngineVersionMessageFilterSensitiveLog = DeleteCustomDBEngineVersionMessageFilterSensitiveLog;
const DeleteDBClusterMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBClusterMessageFilterSensitiveLog = DeleteDBClusterMessageFilterSensitiveLog;
const DeleteDBClusterResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBClusterResultFilterSensitiveLog = DeleteDBClusterResultFilterSensitiveLog;
const DeleteDBClusterEndpointMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBClusterEndpointMessageFilterSensitiveLog = DeleteDBClusterEndpointMessageFilterSensitiveLog;
const DeleteDBClusterParameterGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBClusterParameterGroupMessageFilterSensitiveLog = DeleteDBClusterParameterGroupMessageFilterSensitiveLog;
const DeleteDBClusterSnapshotMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBClusterSnapshotMessageFilterSensitiveLog = DeleteDBClusterSnapshotMessageFilterSensitiveLog;
const DeleteDBClusterSnapshotResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBClusterSnapshotResultFilterSensitiveLog = DeleteDBClusterSnapshotResultFilterSensitiveLog;
const DeleteDBInstanceMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBInstanceMessageFilterSensitiveLog = DeleteDBInstanceMessageFilterSensitiveLog;
const DeleteDBInstanceResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBInstanceResultFilterSensitiveLog = DeleteDBInstanceResultFilterSensitiveLog;
const DeleteDBInstanceAutomatedBackupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBInstanceAutomatedBackupMessageFilterSensitiveLog = DeleteDBInstanceAutomatedBackupMessageFilterSensitiveLog;
const RestoreWindowFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RestoreWindowFilterSensitiveLog = RestoreWindowFilterSensitiveLog;
const DBInstanceAutomatedBackupFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBInstanceAutomatedBackupFilterSensitiveLog = DBInstanceAutomatedBackupFilterSensitiveLog;
const DeleteDBInstanceAutomatedBackupResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBInstanceAutomatedBackupResultFilterSensitiveLog = DeleteDBInstanceAutomatedBackupResultFilterSensitiveLog;
const DeleteDBParameterGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBParameterGroupMessageFilterSensitiveLog = DeleteDBParameterGroupMessageFilterSensitiveLog;
const DeleteDBProxyRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBProxyRequestFilterSensitiveLog = DeleteDBProxyRequestFilterSensitiveLog;
const DeleteDBProxyResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBProxyResponseFilterSensitiveLog = DeleteDBProxyResponseFilterSensitiveLog;
const DeleteDBProxyEndpointRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBProxyEndpointRequestFilterSensitiveLog = DeleteDBProxyEndpointRequestFilterSensitiveLog;
const DeleteDBProxyEndpointResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBProxyEndpointResponseFilterSensitiveLog = DeleteDBProxyEndpointResponseFilterSensitiveLog;
const DeleteDBSecurityGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBSecurityGroupMessageFilterSensitiveLog = DeleteDBSecurityGroupMessageFilterSensitiveLog;
const DeleteDBSnapshotMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBSnapshotMessageFilterSensitiveLog = DeleteDBSnapshotMessageFilterSensitiveLog;
const DeleteDBSnapshotResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBSnapshotResultFilterSensitiveLog = DeleteDBSnapshotResultFilterSensitiveLog;
const DeleteDBSubnetGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDBSubnetGroupMessageFilterSensitiveLog = DeleteDBSubnetGroupMessageFilterSensitiveLog;
const DeleteEventSubscriptionMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteEventSubscriptionMessageFilterSensitiveLog = DeleteEventSubscriptionMessageFilterSensitiveLog;
const DeleteEventSubscriptionResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteEventSubscriptionResultFilterSensitiveLog = DeleteEventSubscriptionResultFilterSensitiveLog;
const DeleteGlobalClusterMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteGlobalClusterMessageFilterSensitiveLog = DeleteGlobalClusterMessageFilterSensitiveLog;
const DeleteGlobalClusterResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteGlobalClusterResultFilterSensitiveLog = DeleteGlobalClusterResultFilterSensitiveLog;
const DeleteOptionGroupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteOptionGroupMessageFilterSensitiveLog = DeleteOptionGroupMessageFilterSensitiveLog;
const DeregisterDBProxyTargetsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeregisterDBProxyTargetsRequestFilterSensitiveLog = DeregisterDBProxyTargetsRequestFilterSensitiveLog;
const DeregisterDBProxyTargetsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeregisterDBProxyTargetsResponseFilterSensitiveLog = DeregisterDBProxyTargetsResponseFilterSensitiveLog;
const DescribeAccountAttributesMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeAccountAttributesMessageFilterSensitiveLog = DescribeAccountAttributesMessageFilterSensitiveLog;
const FilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FilterFilterSensitiveLog = FilterFilterSensitiveLog;
const DescribeBlueGreenDeploymentsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeBlueGreenDeploymentsRequestFilterSensitiveLog = DescribeBlueGreenDeploymentsRequestFilterSensitiveLog;
const DescribeBlueGreenDeploymentsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeBlueGreenDeploymentsResponseFilterSensitiveLog = DescribeBlueGreenDeploymentsResponseFilterSensitiveLog;
const CertificateFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CertificateFilterSensitiveLog = CertificateFilterSensitiveLog;
const CertificateMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CertificateMessageFilterSensitiveLog = CertificateMessageFilterSensitiveLog;
const DescribeCertificatesMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeCertificatesMessageFilterSensitiveLog = DescribeCertificatesMessageFilterSensitiveLog;
const DBClusterBacktrackMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterBacktrackMessageFilterSensitiveLog = DBClusterBacktrackMessageFilterSensitiveLog;
const DescribeDBClusterBacktracksMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClusterBacktracksMessageFilterSensitiveLog = DescribeDBClusterBacktracksMessageFilterSensitiveLog;
const DBClusterEndpointMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterEndpointMessageFilterSensitiveLog = DBClusterEndpointMessageFilterSensitiveLog;
const DescribeDBClusterEndpointsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClusterEndpointsMessageFilterSensitiveLog = DescribeDBClusterEndpointsMessageFilterSensitiveLog;
const DBClusterParameterGroupsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterParameterGroupsMessageFilterSensitiveLog = DBClusterParameterGroupsMessageFilterSensitiveLog;
const DescribeDBClusterParameterGroupsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClusterParameterGroupsMessageFilterSensitiveLog = DescribeDBClusterParameterGroupsMessageFilterSensitiveLog;
const ParameterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ParameterFilterSensitiveLog = ParameterFilterSensitiveLog;
const DBClusterParameterGroupDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterParameterGroupDetailsFilterSensitiveLog = DBClusterParameterGroupDetailsFilterSensitiveLog;
const DescribeDBClusterParametersMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClusterParametersMessageFilterSensitiveLog = DescribeDBClusterParametersMessageFilterSensitiveLog;
const DBClusterMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterMessageFilterSensitiveLog = DBClusterMessageFilterSensitiveLog;
const DescribeDBClustersMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClustersMessageFilterSensitiveLog = DescribeDBClustersMessageFilterSensitiveLog;
const DescribeDBClusterSnapshotAttributesMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClusterSnapshotAttributesMessageFilterSensitiveLog = DescribeDBClusterSnapshotAttributesMessageFilterSensitiveLog;
const DBClusterSnapshotAttributeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterSnapshotAttributeFilterSensitiveLog = DBClusterSnapshotAttributeFilterSensitiveLog;
const DBClusterSnapshotAttributesResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterSnapshotAttributesResultFilterSensitiveLog = DBClusterSnapshotAttributesResultFilterSensitiveLog;
const DescribeDBClusterSnapshotAttributesResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClusterSnapshotAttributesResultFilterSensitiveLog = DescribeDBClusterSnapshotAttributesResultFilterSensitiveLog;
const DBClusterSnapshotMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBClusterSnapshotMessageFilterSensitiveLog = DBClusterSnapshotMessageFilterSensitiveLog;
const DescribeDBClusterSnapshotsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBClusterSnapshotsMessageFilterSensitiveLog = DescribeDBClusterSnapshotsMessageFilterSensitiveLog;
const DBEngineVersionMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBEngineVersionMessageFilterSensitiveLog = DBEngineVersionMessageFilterSensitiveLog;
const DescribeDBEngineVersionsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBEngineVersionsMessageFilterSensitiveLog = DescribeDBEngineVersionsMessageFilterSensitiveLog;
const DBInstanceAutomatedBackupMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBInstanceAutomatedBackupMessageFilterSensitiveLog = DBInstanceAutomatedBackupMessageFilterSensitiveLog;
const DescribeDBInstanceAutomatedBackupsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBInstanceAutomatedBackupsMessageFilterSensitiveLog = DescribeDBInstanceAutomatedBackupsMessageFilterSensitiveLog;
const DBInstanceMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBInstanceMessageFilterSensitiveLog = DBInstanceMessageFilterSensitiveLog;
const DescribeDBInstancesMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBInstancesMessageFilterSensitiveLog = DescribeDBInstancesMessageFilterSensitiveLog;
const DescribeDBLogFilesMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBLogFilesMessageFilterSensitiveLog = DescribeDBLogFilesMessageFilterSensitiveLog;
const DescribeDBLogFilesDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBLogFilesDetailsFilterSensitiveLog = DescribeDBLogFilesDetailsFilterSensitiveLog;
const DescribeDBLogFilesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBLogFilesResponseFilterSensitiveLog = DescribeDBLogFilesResponseFilterSensitiveLog;
const DBParameterGroupsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBParameterGroupsMessageFilterSensitiveLog = DBParameterGroupsMessageFilterSensitiveLog;
const DescribeDBParameterGroupsMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBParameterGroupsMessageFilterSensitiveLog = DescribeDBParameterGroupsMessageFilterSensitiveLog;
const DBParameterGroupDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DBParameterGroupDetailsFilterSensitiveLog = DBParameterGroupDetailsFilterSensitiveLog;
const DescribeDBParametersMessageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBParametersMessageFilterSensitiveLog = DescribeDBParametersMessageFilterSensitiveLog;
const DescribeDBProxiesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBProxiesRequestFilterSensitiveLog = DescribeDBProxiesRequestFilterSensitiveLog;
const DescribeDBProxiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDBProxiesResponseFilterSensitiveLog = DescribeDBProxiesResponseFilterSensitiveLog;

import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { RDSServiceException as __BaseException } from "./RDSServiceException";
export interface AccountQuota {
  AccountQuotaName?: string;
  Used?: number;
  Max?: number;
}
export interface AccountAttributesMessage {
  AccountQuotas?: AccountQuota[];
}
export declare enum ActivityStreamMode {
  async = "async",
  sync = "sync",
}
export declare enum ActivityStreamPolicyStatus {
  locked = "locked",
  locking_policy = "locking-policy",
  unlocked = "unlocked",
  unlocking_policy = "unlocking-policy",
}
export declare enum ActivityStreamStatus {
  started = "started",
  starting = "starting",
  stopped = "stopped",
  stopping = "stopping",
}
export interface AddRoleToDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  RoleArn: string | undefined;
  FeatureName?: string;
}
export declare class DBClusterNotFoundFault extends __BaseException {
  readonly name: "DBClusterNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterNotFoundFault, __BaseException>
  );
}
export declare class DBClusterRoleAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterRoleAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterRoleAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBClusterRoleQuotaExceededFault extends __BaseException {
  readonly name: "DBClusterRoleQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterRoleQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class InvalidDBClusterStateFault extends __BaseException {
  readonly name: "InvalidDBClusterStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBClusterStateFault, __BaseException>
  );
}
export interface AddRoleToDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  RoleArn: string | undefined;
  FeatureName: string | undefined;
}
export declare class DBInstanceNotFoundFault extends __BaseException {
  readonly name: "DBInstanceNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBInstanceNotFoundFault, __BaseException>
  );
}
export declare class DBInstanceRoleAlreadyExistsFault extends __BaseException {
  readonly name: "DBInstanceRoleAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceRoleAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBInstanceRoleQuotaExceededFault extends __BaseException {
  readonly name: "DBInstanceRoleQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceRoleQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class InvalidDBInstanceStateFault extends __BaseException {
  readonly name: "InvalidDBInstanceStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBInstanceStateFault, __BaseException>
  );
}
export interface AddSourceIdentifierToSubscriptionMessage {
  SubscriptionName: string | undefined;
  SourceIdentifier: string | undefined;
}
export interface EventSubscription {
  CustomerAwsId?: string;
  CustSubscriptionId?: string;
  SnsTopicArn?: string;
  Status?: string;
  SubscriptionCreationTime?: string;
  SourceType?: string;
  SourceIdsList?: string[];
  EventCategoriesList?: string[];
  Enabled?: boolean;
  EventSubscriptionArn?: string;
}
export interface AddSourceIdentifierToSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export declare class SourceNotFoundFault extends __BaseException {
  readonly name: "SourceNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SourceNotFoundFault, __BaseException>
  );
}
export declare class SubscriptionNotFoundFault extends __BaseException {
  readonly name: "SubscriptionNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SubscriptionNotFoundFault, __BaseException>
  );
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface AddTagsToResourceMessage {
  ResourceName: string | undefined;
  Tags: Tag[] | undefined;
}
export declare class BlueGreenDeploymentNotFoundFault extends __BaseException {
  readonly name: "BlueGreenDeploymentNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      BlueGreenDeploymentNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBProxyNotFoundFault extends __BaseException {
  readonly name: "DBProxyNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyNotFoundFault, __BaseException>
  );
}
export declare class DBProxyTargetGroupNotFoundFault extends __BaseException {
  readonly name: "DBProxyTargetGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBProxyTargetGroupNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBSnapshotNotFoundFault extends __BaseException {
  readonly name: "DBSnapshotNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSnapshotNotFoundFault, __BaseException>
  );
}
export interface ApplyPendingMaintenanceActionMessage {
  ResourceIdentifier: string | undefined;
  ApplyAction: string | undefined;
  OptInType: string | undefined;
}
export interface PendingMaintenanceAction {
  Action?: string;
  AutoAppliedAfterDate?: Date;
  ForcedApplyDate?: Date;
  OptInStatus?: string;
  CurrentApplyDate?: Date;
  Description?: string;
}
export interface ResourcePendingMaintenanceActions {
  ResourceIdentifier?: string;
  PendingMaintenanceActionDetails?: PendingMaintenanceAction[];
}
export interface ApplyPendingMaintenanceActionResult {
  ResourcePendingMaintenanceActions?: ResourcePendingMaintenanceActions;
}
export declare class ResourceNotFoundFault extends __BaseException {
  readonly name: "ResourceNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundFault, __BaseException>
  );
}
export declare class AuthorizationAlreadyExistsFault extends __BaseException {
  readonly name: "AuthorizationAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      AuthorizationAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class AuthorizationQuotaExceededFault extends __BaseException {
  readonly name: "AuthorizationQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      AuthorizationQuotaExceededFault,
      __BaseException
    >
  );
}
export interface AuthorizeDBSecurityGroupIngressMessage {
  DBSecurityGroupName: string | undefined;
  CIDRIP?: string;
  EC2SecurityGroupName?: string;
  EC2SecurityGroupId?: string;
  EC2SecurityGroupOwnerId?: string;
}
export interface EC2SecurityGroup {
  Status?: string;
  EC2SecurityGroupName?: string;
  EC2SecurityGroupId?: string;
  EC2SecurityGroupOwnerId?: string;
}
export interface IPRange {
  Status?: string;
  CIDRIP?: string;
}
export interface DBSecurityGroup {
  OwnerId?: string;
  DBSecurityGroupName?: string;
  DBSecurityGroupDescription?: string;
  VpcId?: string;
  EC2SecurityGroups?: EC2SecurityGroup[];
  IPRanges?: IPRange[];
  DBSecurityGroupArn?: string;
}
export interface AuthorizeDBSecurityGroupIngressResult {
  DBSecurityGroup?: DBSecurityGroup;
}
export declare class DBSecurityGroupNotFoundFault extends __BaseException {
  readonly name: "DBSecurityGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSecurityGroupNotFoundFault, __BaseException>
  );
}
export declare class InvalidDBSecurityGroupStateFault extends __BaseException {
  readonly name: "InvalidDBSecurityGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBSecurityGroupStateFault,
      __BaseException
    >
  );
}
export interface BacktrackDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  BacktrackTo: Date | undefined;
  Force?: boolean;
  UseEarliestTimeOnPointInTimeUnavailable?: boolean;
}
export interface DBClusterBacktrack {
  DBClusterIdentifier?: string;
  BacktrackIdentifier?: string;
  BacktrackTo?: Date;
  BacktrackedFrom?: Date;
  BacktrackRequestCreationTime?: Date;
  Status?: string;
}
export interface CancelExportTaskMessage {
  ExportTaskIdentifier: string | undefined;
}
export declare enum ExportSourceType {
  CLUSTER = "CLUSTER",
  SNAPSHOT = "SNAPSHOT",
}
export interface ExportTask {
  ExportTaskIdentifier?: string;
  SourceArn?: string;
  ExportOnly?: string[];
  SnapshotTime?: Date;
  TaskStartTime?: Date;
  TaskEndTime?: Date;
  S3Bucket?: string;
  S3Prefix?: string;
  IamRoleArn?: string;
  KmsKeyId?: string;
  Status?: string;
  PercentProgress?: number;
  TotalExtractedDataInGB?: number;
  FailureCause?: string;
  WarningMessage?: string;
  SourceType?: ExportSourceType | string;
}
export declare class ExportTaskNotFoundFault extends __BaseException {
  readonly name: "ExportTaskNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExportTaskNotFoundFault, __BaseException>
  );
}
export declare class InvalidExportTaskStateFault extends __BaseException {
  readonly name: "InvalidExportTaskStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidExportTaskStateFault, __BaseException>
  );
}
export interface CopyDBClusterParameterGroupMessage {
  SourceDBClusterParameterGroupIdentifier: string | undefined;
  TargetDBClusterParameterGroupIdentifier: string | undefined;
  TargetDBClusterParameterGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface DBClusterParameterGroup {
  DBClusterParameterGroupName?: string;
  DBParameterGroupFamily?: string;
  Description?: string;
  DBClusterParameterGroupArn?: string;
}
export interface CopyDBClusterParameterGroupResult {
  DBClusterParameterGroup?: DBClusterParameterGroup;
}
export declare class DBParameterGroupAlreadyExistsFault extends __BaseException {
  readonly name: "DBParameterGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBParameterGroupAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBParameterGroupNotFoundFault extends __BaseException {
  readonly name: "DBParameterGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBParameterGroupNotFoundFault, __BaseException>
  );
}
export declare class DBParameterGroupQuotaExceededFault extends __BaseException {
  readonly name: "DBParameterGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBParameterGroupQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CopyDBClusterSnapshotMessage {
  SourceDBClusterSnapshotIdentifier: string | undefined;
  TargetDBClusterSnapshotIdentifier: string | undefined;
  KmsKeyId?: string;
  PreSignedUrl?: string;
  CopyTags?: boolean;
  Tags?: Tag[];
}
export interface DBClusterSnapshot {
  AvailabilityZones?: string[];
  DBClusterSnapshotIdentifier?: string;
  DBClusterIdentifier?: string;
  SnapshotCreateTime?: Date;
  Engine?: string;
  EngineMode?: string;
  AllocatedStorage?: number;
  Status?: string;
  Port?: number;
  VpcId?: string;
  ClusterCreateTime?: Date;
  MasterUsername?: string;
  EngineVersion?: string;
  LicenseModel?: string;
  SnapshotType?: string;
  PercentProgress?: number;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  DBClusterSnapshotArn?: string;
  SourceDBClusterSnapshotArn?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  TagList?: Tag[];
  DBSystemId?: string;
}
export interface CopyDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot;
}
export declare class DBClusterSnapshotAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterSnapshotAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterSnapshotAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBClusterSnapshotNotFoundFault extends __BaseException {
  readonly name: "DBClusterSnapshotNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterSnapshotNotFoundFault, __BaseException>
  );
}
export declare class InvalidDBClusterSnapshotStateFault extends __BaseException {
  readonly name: "InvalidDBClusterSnapshotStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBClusterSnapshotStateFault,
      __BaseException
    >
  );
}
export declare class KMSKeyNotAccessibleFault extends __BaseException {
  readonly name: "KMSKeyNotAccessibleFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<KMSKeyNotAccessibleFault, __BaseException>
  );
}
export declare class SnapshotQuotaExceededFault extends __BaseException {
  readonly name: "SnapshotQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SnapshotQuotaExceededFault, __BaseException>
  );
}
export interface CopyDBParameterGroupMessage {
  SourceDBParameterGroupIdentifier: string | undefined;
  TargetDBParameterGroupIdentifier: string | undefined;
  TargetDBParameterGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface DBParameterGroup {
  DBParameterGroupName?: string;
  DBParameterGroupFamily?: string;
  Description?: string;
  DBParameterGroupArn?: string;
}
export interface CopyDBParameterGroupResult {
  DBParameterGroup?: DBParameterGroup;
}
export interface CopyDBSnapshotMessage {
  SourceDBSnapshotIdentifier: string | undefined;
  TargetDBSnapshotIdentifier: string | undefined;
  KmsKeyId?: string;
  Tags?: Tag[];
  CopyTags?: boolean;
  PreSignedUrl?: string;
  OptionGroupName?: string;
  TargetCustomAvailabilityZone?: string;
  CopyOptionGroup?: boolean;
}
export interface ProcessorFeature {
  Name?: string;
  Value?: string;
}
export interface DBSnapshot {
  DBSnapshotIdentifier?: string;
  DBInstanceIdentifier?: string;
  SnapshotCreateTime?: Date;
  Engine?: string;
  AllocatedStorage?: number;
  Status?: string;
  Port?: number;
  AvailabilityZone?: string;
  VpcId?: string;
  InstanceCreateTime?: Date;
  MasterUsername?: string;
  EngineVersion?: string;
  LicenseModel?: string;
  SnapshotType?: string;
  Iops?: number;
  OptionGroupName?: string;
  PercentProgress?: number;
  SourceRegion?: string;
  SourceDBSnapshotIdentifier?: string;
  StorageType?: string;
  TdeCredentialArn?: string;
  Encrypted?: boolean;
  KmsKeyId?: string;
  DBSnapshotArn?: string;
  Timezone?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  ProcessorFeatures?: ProcessorFeature[];
  DbiResourceId?: string;
  TagList?: Tag[];
  OriginalSnapshotCreateTime?: Date;
  SnapshotDatabaseTime?: Date;
  SnapshotTarget?: string;
  StorageThroughput?: number;
}
export interface CopyDBSnapshotResult {
  DBSnapshot?: DBSnapshot;
}
export declare class CustomAvailabilityZoneNotFoundFault extends __BaseException {
  readonly name: "CustomAvailabilityZoneNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomAvailabilityZoneNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBSnapshotAlreadyExistsFault extends __BaseException {
  readonly name: "DBSnapshotAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSnapshotAlreadyExistsFault, __BaseException>
  );
}
export declare class InvalidDBSnapshotStateFault extends __BaseException {
  readonly name: "InvalidDBSnapshotStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSnapshotStateFault, __BaseException>
  );
}
export interface CopyOptionGroupMessage {
  SourceOptionGroupIdentifier: string | undefined;
  TargetOptionGroupIdentifier: string | undefined;
  TargetOptionGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface DBSecurityGroupMembership {
  DBSecurityGroupName?: string;
  Status?: string;
}
export interface OptionSetting {
  Name?: string;
  Value?: string;
  DefaultValue?: string;
  Description?: string;
  ApplyType?: string;
  DataType?: string;
  AllowedValues?: string;
  IsModifiable?: boolean;
  IsCollection?: boolean;
}
export interface VpcSecurityGroupMembership {
  VpcSecurityGroupId?: string;
  Status?: string;
}
export interface Option {
  OptionName?: string;
  OptionDescription?: string;
  Persistent?: boolean;
  Permanent?: boolean;
  Port?: number;
  OptionVersion?: string;
  OptionSettings?: OptionSetting[];
  DBSecurityGroupMemberships?: DBSecurityGroupMembership[];
  VpcSecurityGroupMemberships?: VpcSecurityGroupMembership[];
}
export interface OptionGroup {
  OptionGroupName?: string;
  OptionGroupDescription?: string;
  EngineName?: string;
  MajorEngineVersion?: string;
  Options?: Option[];
  AllowsVpcAndNonVpcInstanceMemberships?: boolean;
  VpcId?: string;
  OptionGroupArn?: string;
  SourceOptionGroup?: string;
  SourceAccountId?: string;
  CopyTimestamp?: Date;
}
export interface CopyOptionGroupResult {
  OptionGroup?: OptionGroup;
}
export declare class OptionGroupAlreadyExistsFault extends __BaseException {
  readonly name: "OptionGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OptionGroupAlreadyExistsFault, __BaseException>
  );
}
export declare class OptionGroupNotFoundFault extends __BaseException {
  readonly name: "OptionGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OptionGroupNotFoundFault, __BaseException>
  );
}
export declare class OptionGroupQuotaExceededFault extends __BaseException {
  readonly name: "OptionGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OptionGroupQuotaExceededFault, __BaseException>
  );
}
export declare class BlueGreenDeploymentAlreadyExistsFault extends __BaseException {
  readonly name: "BlueGreenDeploymentAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      BlueGreenDeploymentAlreadyExistsFault,
      __BaseException
    >
  );
}
export interface CreateBlueGreenDeploymentRequest {
  BlueGreenDeploymentName: string | undefined;
  Source: string | undefined;
  TargetEngineVersion?: string;
  TargetDBParameterGroupName?: string;
  TargetDBClusterParameterGroupName?: string;
  Tags?: Tag[];
}
export interface SwitchoverDetail {
  SourceMember?: string;
  TargetMember?: string;
  Status?: string;
}
export interface BlueGreenDeploymentTask {
  Name?: string;
  Status?: string;
}
export interface BlueGreenDeployment {
  BlueGreenDeploymentIdentifier?: string;
  BlueGreenDeploymentName?: string;
  Source?: string;
  Target?: string;
  SwitchoverDetails?: SwitchoverDetail[];
  Tasks?: BlueGreenDeploymentTask[];
  Status?: string;
  StatusDetails?: string;
  CreateTime?: Date;
  DeleteTime?: Date;
  TagList?: Tag[];
}
export interface CreateBlueGreenDeploymentResponse {
  BlueGreenDeployment?: BlueGreenDeployment;
}
export declare class DBClusterParameterGroupNotFoundFault extends __BaseException {
  readonly name: "DBClusterParameterGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterParameterGroupNotFoundFault,
      __BaseException
    >
  );
}
export declare class DBClusterQuotaExceededFault extends __BaseException {
  readonly name: "DBClusterQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterQuotaExceededFault, __BaseException>
  );
}
export declare class InstanceQuotaExceededFault extends __BaseException {
  readonly name: "InstanceQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InstanceQuotaExceededFault, __BaseException>
  );
}
export declare class SourceClusterNotSupportedFault extends __BaseException {
  readonly name: "SourceClusterNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SourceClusterNotSupportedFault, __BaseException>
  );
}
export declare class SourceDatabaseNotSupportedFault extends __BaseException {
  readonly name: "SourceDatabaseNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      SourceDatabaseNotSupportedFault,
      __BaseException
    >
  );
}
export interface CreateCustomDBEngineVersionMessage {
  Engine: string | undefined;
  EngineVersion: string | undefined;
  DatabaseInstallationFilesS3BucketName: string | undefined;
  DatabaseInstallationFilesS3Prefix?: string;
  KMSKeyId: string | undefined;
  Description?: string;
  Manifest: string | undefined;
  Tags?: Tag[];
}
export declare class CustomDBEngineVersionAlreadyExistsFault extends __BaseException {
  readonly name: "CustomDBEngineVersionAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomDBEngineVersionAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class CustomDBEngineVersionQuotaExceededFault extends __BaseException {
  readonly name: "CustomDBEngineVersionQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomDBEngineVersionQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CharacterSet {
  CharacterSetName?: string;
  CharacterSetDescription?: string;
}
export interface Timezone {
  TimezoneName?: string;
}
export interface UpgradeTarget {
  Engine?: string;
  EngineVersion?: string;
  Description?: string;
  AutoUpgrade?: boolean;
  IsMajorVersionUpgrade?: boolean;
  SupportedEngineModes?: string[];
  SupportsParallelQuery?: boolean;
  SupportsGlobalDatabases?: boolean;
  SupportsBabelfish?: boolean;
}
export interface DBEngineVersion {
  Engine?: string;
  EngineVersion?: string;
  DBParameterGroupFamily?: string;
  DBEngineDescription?: string;
  DBEngineVersionDescription?: string;
  DefaultCharacterSet?: CharacterSet;
  SupportedCharacterSets?: CharacterSet[];
  SupportedNcharCharacterSets?: CharacterSet[];
  ValidUpgradeTarget?: UpgradeTarget[];
  SupportedTimezones?: Timezone[];
  ExportableLogTypes?: string[];
  SupportsLogExportsToCloudwatchLogs?: boolean;
  SupportsReadReplica?: boolean;
  SupportedEngineModes?: string[];
  SupportedFeatureNames?: string[];
  Status?: string;
  SupportsParallelQuery?: boolean;
  SupportsGlobalDatabases?: boolean;
  MajorEngineVersion?: string;
  DatabaseInstallationFilesS3BucketName?: string;
  DatabaseInstallationFilesS3Prefix?: string;
  DBEngineVersionArn?: string;
  KMSKeyId?: string;
  CreateTime?: Date;
  TagList?: Tag[];
  SupportsBabelfish?: boolean;
  CustomDBEngineVersionManifest?: string;
}
export interface ScalingConfiguration {
  MinCapacity?: number;
  MaxCapacity?: number;
  AutoPause?: boolean;
  SecondsUntilAutoPause?: number;
  TimeoutAction?: string;
  SecondsBeforeTimeout?: number;
}
export interface ServerlessV2ScalingConfiguration {
  MinCapacity?: number;
  MaxCapacity?: number;
}
export interface CreateDBClusterMessage {
  AvailabilityZones?: string[];
  BackupRetentionPeriod?: number;
  CharacterSetName?: string;
  DatabaseName?: string;
  DBClusterIdentifier: string | undefined;
  DBClusterParameterGroupName?: string;
  VpcSecurityGroupIds?: string[];
  DBSubnetGroupName?: string;
  Engine: string | undefined;
  EngineVersion?: string;
  Port?: number;
  MasterUsername?: string;
  MasterUserPassword?: string;
  OptionGroupName?: string;
  PreferredBackupWindow?: string;
  PreferredMaintenanceWindow?: string;
  ReplicationSourceIdentifier?: string;
  Tags?: Tag[];
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  PreSignedUrl?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  BacktrackWindow?: number;
  EnableCloudwatchLogsExports?: string[];
  EngineMode?: string;
  ScalingConfiguration?: ScalingConfiguration;
  DeletionProtection?: boolean;
  GlobalClusterIdentifier?: string;
  EnableHttpEndpoint?: boolean;
  CopyTagsToSnapshot?: boolean;
  Domain?: string;
  DomainIAMRoleName?: string;
  EnableGlobalWriteForwarding?: boolean;
  DBClusterInstanceClass?: string;
  AllocatedStorage?: number;
  StorageType?: string;
  Iops?: number;
  PubliclyAccessible?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
  NetworkType?: string;
  DBSystemId?: string;
  ManageMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
}
export interface DBClusterRole {
  RoleArn?: string;
  Status?: string;
  FeatureName?: string;
}
export interface DBClusterMember {
  DBInstanceIdentifier?: string;
  IsClusterWriter?: boolean;
  DBClusterParameterGroupStatus?: string;
  PromotionTier?: number;
}
export interface DBClusterOptionGroupStatus {
  DBClusterOptionGroupName?: string;
  Status?: string;
}
export interface DomainMembership {
  Domain?: string;
  Status?: string;
  FQDN?: string;
  IAMRoleName?: string;
}
export declare enum WriteForwardingStatus {
  DISABLED = "disabled",
  DISABLING = "disabling",
  ENABLED = "enabled",
  ENABLING = "enabling",
  UNKNOWN = "unknown",
}
export interface MasterUserSecret {
  SecretArn?: string;
  SecretStatus?: string;
  KmsKeyId?: string;
}
export interface PendingCloudwatchLogsExports {
  LogTypesToEnable?: string[];
  LogTypesToDisable?: string[];
}
export interface ClusterPendingModifiedValues {
  PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
  DBClusterIdentifier?: string;
  MasterUserPassword?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  EngineVersion?: string;
  BackupRetentionPeriod?: number;
  AllocatedStorage?: number;
  Iops?: number;
}
export interface ScalingConfigurationInfo {
  MinCapacity?: number;
  MaxCapacity?: number;
  AutoPause?: boolean;
  SecondsUntilAutoPause?: number;
  TimeoutAction?: string;
  SecondsBeforeTimeout?: number;
}
export interface ServerlessV2ScalingConfigurationInfo {
  MinCapacity?: number;
  MaxCapacity?: number;
}
export interface DBCluster {
  AllocatedStorage?: number;
  AvailabilityZones?: string[];
  BackupRetentionPeriod?: number;
  CharacterSetName?: string;
  DatabaseName?: string;
  DBClusterIdentifier?: string;
  DBClusterParameterGroup?: string;
  DBSubnetGroup?: string;
  Status?: string;
  AutomaticRestartTime?: Date;
  PercentProgress?: string;
  EarliestRestorableTime?: Date;
  Endpoint?: string;
  ReaderEndpoint?: string;
  CustomEndpoints?: string[];
  MultiAZ?: boolean;
  Engine?: string;
  EngineVersion?: string;
  LatestRestorableTime?: Date;
  Port?: number;
  MasterUsername?: string;
  DBClusterOptionGroupMemberships?: DBClusterOptionGroupStatus[];
  PreferredBackupWindow?: string;
  PreferredMaintenanceWindow?: string;
  ReplicationSourceIdentifier?: string;
  ReadReplicaIdentifiers?: string[];
  DBClusterMembers?: DBClusterMember[];
  VpcSecurityGroups?: VpcSecurityGroupMembership[];
  HostedZoneId?: string;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  DbClusterResourceId?: string;
  DBClusterArn?: string;
  AssociatedRoles?: DBClusterRole[];
  IAMDatabaseAuthenticationEnabled?: boolean;
  CloneGroupId?: string;
  ClusterCreateTime?: Date;
  EarliestBacktrackTime?: Date;
  BacktrackWindow?: number;
  BacktrackConsumedChangeRecords?: number;
  EnabledCloudwatchLogsExports?: string[];
  Capacity?: number;
  EngineMode?: string;
  ScalingConfigurationInfo?: ScalingConfigurationInfo;
  DeletionProtection?: boolean;
  HttpEndpointEnabled?: boolean;
  ActivityStreamMode?: ActivityStreamMode | string;
  ActivityStreamStatus?: ActivityStreamStatus | string;
  ActivityStreamKmsKeyId?: string;
  ActivityStreamKinesisStreamName?: string;
  CopyTagsToSnapshot?: boolean;
  CrossAccountClone?: boolean;
  DomainMemberships?: DomainMembership[];
  TagList?: Tag[];
  GlobalWriteForwardingStatus?: WriteForwardingStatus | string;
  GlobalWriteForwardingRequested?: boolean;
  PendingModifiedValues?: ClusterPendingModifiedValues;
  DBClusterInstanceClass?: string;
  StorageType?: string;
  Iops?: number;
  PubliclyAccessible?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  PerformanceInsightsEnabled?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfigurationInfo;
  NetworkType?: string;
  DBSystemId?: string;
  MasterUserSecret?: MasterUserSecret;
}
export interface CreateDBClusterResult {
  DBCluster?: DBCluster;
}
export declare class DBClusterAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterAlreadyExistsFault, __BaseException>
  );
}
export declare class DBSubnetGroupDoesNotCoverEnoughAZs extends __BaseException {
  readonly name: "DBSubnetGroupDoesNotCoverEnoughAZs";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSubnetGroupDoesNotCoverEnoughAZs,
      __BaseException
    >
  );
}
export declare class DBSubnetGroupNotFoundFault extends __BaseException {
  readonly name: "DBSubnetGroupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSubnetGroupNotFoundFault, __BaseException>
  );
}
export declare class DomainNotFoundFault extends __BaseException {
  readonly name: "DomainNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DomainNotFoundFault, __BaseException>
  );
}
export declare class GlobalClusterNotFoundFault extends __BaseException {
  readonly name: "GlobalClusterNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<GlobalClusterNotFoundFault, __BaseException>
  );
}
export declare class InsufficientStorageClusterCapacityFault extends __BaseException {
  readonly name: "InsufficientStorageClusterCapacityFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientStorageClusterCapacityFault,
      __BaseException
    >
  );
}
export declare class InvalidDBSubnetGroupStateFault extends __BaseException {
  readonly name: "InvalidDBSubnetGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSubnetGroupStateFault, __BaseException>
  );
}
export declare class InvalidGlobalClusterStateFault extends __BaseException {
  readonly name: "InvalidGlobalClusterStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidGlobalClusterStateFault, __BaseException>
  );
}
export declare class InvalidSubnet extends __BaseException {
  readonly name: "InvalidSubnet";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<InvalidSubnet, __BaseException>);
}
export declare class InvalidVPCNetworkStateFault extends __BaseException {
  readonly name: "InvalidVPCNetworkStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidVPCNetworkStateFault, __BaseException>
  );
}
export declare class StorageQuotaExceededFault extends __BaseException {
  readonly name: "StorageQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<StorageQuotaExceededFault, __BaseException>
  );
}
export interface CreateDBClusterEndpointMessage {
  DBClusterIdentifier: string | undefined;
  DBClusterEndpointIdentifier: string | undefined;
  EndpointType: string | undefined;
  StaticMembers?: string[];
  ExcludedMembers?: string[];
  Tags?: Tag[];
}
export interface DBClusterEndpoint {
  DBClusterEndpointIdentifier?: string;
  DBClusterIdentifier?: string;
  DBClusterEndpointResourceIdentifier?: string;
  Endpoint?: string;
  Status?: string;
  EndpointType?: string;
  CustomEndpointType?: string;
  StaticMembers?: string[];
  ExcludedMembers?: string[];
  DBClusterEndpointArn?: string;
}
export declare class DBClusterEndpointAlreadyExistsFault extends __BaseException {
  readonly name: "DBClusterEndpointAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterEndpointAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBClusterEndpointQuotaExceededFault extends __BaseException {
  readonly name: "DBClusterEndpointQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterEndpointQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CreateDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string | undefined;
  DBParameterGroupFamily: string | undefined;
  Description: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBClusterParameterGroupResult {
  DBClusterParameterGroup?: DBClusterParameterGroup;
}
export interface CreateDBClusterSnapshotMessage {
  DBClusterSnapshotIdentifier: string | undefined;
  DBClusterIdentifier: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot;
}
export declare class AuthorizationNotFoundFault extends __BaseException {
  readonly name: "AuthorizationNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AuthorizationNotFoundFault, __BaseException>
  );
}
export declare class BackupPolicyNotFoundFault extends __BaseException {
  readonly name: "BackupPolicyNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BackupPolicyNotFoundFault, __BaseException>
  );
}
export interface CreateDBInstanceMessage {
  DBName?: string;
  DBInstanceIdentifier: string | undefined;
  AllocatedStorage?: number;
  DBInstanceClass: string | undefined;
  Engine: string | undefined;
  MasterUsername?: string;
  MasterUserPassword?: string;
  DBSecurityGroups?: string[];
  VpcSecurityGroupIds?: string[];
  AvailabilityZone?: string;
  DBSubnetGroupName?: string;
  PreferredMaintenanceWindow?: string;
  DBParameterGroupName?: string;
  BackupRetentionPeriod?: number;
  PreferredBackupWindow?: string;
  Port?: number;
  MultiAZ?: boolean;
  EngineVersion?: string;
  AutoMinorVersionUpgrade?: boolean;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupName?: string;
  CharacterSetName?: string;
  NcharCharacterSetName?: string;
  PubliclyAccessible?: boolean;
  Tags?: Tag[];
  DBClusterIdentifier?: string;
  StorageType?: string;
  TdeCredentialArn?: string;
  TdeCredentialPassword?: string;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  Domain?: string;
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  DomainIAMRoleName?: string;
  PromotionTier?: number;
  Timezone?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnableCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  DeletionProtection?: boolean;
  MaxAllocatedStorage?: number;
  EnableCustomerOwnedIp?: boolean;
  CustomIamInstanceProfile?: string;
  BackupTarget?: string;
  NetworkType?: string;
  StorageThroughput?: number;
  ManageMasterUserPassword?: boolean;
  MasterUserSecretKmsKeyId?: string;
}
export interface DBInstanceRole {
  RoleArn?: string;
  FeatureName?: string;
  Status?: string;
}
export declare enum AutomationMode {
  ALL_PAUSED = "all-paused",
  FULL = "full",
}
export interface DBInstanceAutomatedBackupsReplication {
  DBInstanceAutomatedBackupsArn?: string;
}
export interface DBParameterGroupStatus {
  DBParameterGroupName?: string;
  ParameterApplyStatus?: string;
}
export interface AvailabilityZone {
  Name?: string;
}
export interface Outpost {
  Arn?: string;
}
export interface Subnet {
  SubnetIdentifier?: string;
  SubnetAvailabilityZone?: AvailabilityZone;
  SubnetOutpost?: Outpost;
  SubnetStatus?: string;
}
export interface DBSubnetGroup {
  DBSubnetGroupName?: string;
  DBSubnetGroupDescription?: string;
  VpcId?: string;
  SubnetGroupStatus?: string;
  Subnets?: Subnet[];
  DBSubnetGroupArn?: string;
  SupportedNetworkTypes?: string[];
}
export interface Endpoint {
  Address?: string;
  Port?: number;
  HostedZoneId?: string;
}
export interface OptionGroupMembership {
  OptionGroupName?: string;
  Status?: string;
}
export interface PendingModifiedValues {
  DBInstanceClass?: string;
  AllocatedStorage?: number;
  MasterUserPassword?: string;
  Port?: number;
  BackupRetentionPeriod?: number;
  MultiAZ?: boolean;
  EngineVersion?: string;
  LicenseModel?: string;
  Iops?: number;
  DBInstanceIdentifier?: string;
  StorageType?: string;
  CACertificateIdentifier?: string;
  DBSubnetGroupName?: string;
  PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
  ProcessorFeatures?: ProcessorFeature[];
  IAMDatabaseAuthenticationEnabled?: boolean;
  AutomationMode?: AutomationMode | string;
  ResumeFullAutomationModeTime?: Date;
  StorageThroughput?: number;
}
export declare enum ReplicaMode {
  MOUNTED = "mounted",
  OPEN_READ_ONLY = "open-read-only",
}
export interface DBInstanceStatusInfo {
  StatusType?: string;
  Normal?: boolean;
  Status?: string;
  Message?: string;
}
export interface DBInstance {
  DBInstanceIdentifier?: string;
  DBInstanceClass?: string;
  Engine?: string;
  DBInstanceStatus?: string;
  AutomaticRestartTime?: Date;
  MasterUsername?: string;
  DBName?: string;
  Endpoint?: Endpoint;
  AllocatedStorage?: number;
  InstanceCreateTime?: Date;
  PreferredBackupWindow?: string;
  BackupRetentionPeriod?: number;
  DBSecurityGroups?: DBSecurityGroupMembership[];
  VpcSecurityGroups?: VpcSecurityGroupMembership[];
  DBParameterGroups?: DBParameterGroupStatus[];
  AvailabilityZone?: string;
  DBSubnetGroup?: DBSubnetGroup;
  PreferredMaintenanceWindow?: string;
  PendingModifiedValues?: PendingModifiedValues;
  LatestRestorableTime?: Date;
  MultiAZ?: boolean;
  EngineVersion?: string;
  AutoMinorVersionUpgrade?: boolean;
  ReadReplicaSourceDBInstanceIdentifier?: string;
  ReadReplicaDBInstanceIdentifiers?: string[];
  ReadReplicaDBClusterIdentifiers?: string[];
  ReplicaMode?: ReplicaMode | string;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupMemberships?: OptionGroupMembership[];
  CharacterSetName?: string;
  NcharCharacterSetName?: string;
  SecondaryAvailabilityZone?: string;
  PubliclyAccessible?: boolean;
  StatusInfos?: DBInstanceStatusInfo[];
  StorageType?: string;
  TdeCredentialArn?: string;
  DbInstancePort?: number;
  DBClusterIdentifier?: string;
  StorageEncrypted?: boolean;
  KmsKeyId?: string;
  DbiResourceId?: string;
  CACertificateIdentifier?: string;
  DomainMemberships?: DomainMembership[];
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  EnhancedMonitoringResourceArn?: string;
  MonitoringRoleArn?: string;
  PromotionTier?: number;
  DBInstanceArn?: string;
  Timezone?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  PerformanceInsightsEnabled?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnabledCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  DeletionProtection?: boolean;
  AssociatedRoles?: DBInstanceRole[];
  ListenerEndpoint?: Endpoint;
  MaxAllocatedStorage?: number;
  TagList?: Tag[];
  DBInstanceAutomatedBackupsReplications?: DBInstanceAutomatedBackupsReplication[];
  CustomerOwnedIpEnabled?: boolean;
  AwsBackupRecoveryPointArn?: string;
  ActivityStreamStatus?: ActivityStreamStatus | string;
  ActivityStreamKmsKeyId?: string;
  ActivityStreamKinesisStreamName?: string;
  ActivityStreamMode?: ActivityStreamMode | string;
  ActivityStreamEngineNativeAuditFieldsIncluded?: boolean;
  AutomationMode?: AutomationMode | string;
  ResumeFullAutomationModeTime?: Date;
  CustomIamInstanceProfile?: string;
  BackupTarget?: string;
  NetworkType?: string;
  ActivityStreamPolicyStatus?: ActivityStreamPolicyStatus | string;
  StorageThroughput?: number;
  DBSystemId?: string;
  MasterUserSecret?: MasterUserSecret;
}
export interface CreateDBInstanceResult {
  DBInstance?: DBInstance;
}
export declare class DBInstanceAlreadyExistsFault extends __BaseException {
  readonly name: "DBInstanceAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBInstanceAlreadyExistsFault, __BaseException>
  );
}
export declare class InsufficientDBInstanceCapacityFault extends __BaseException {
  readonly name: "InsufficientDBInstanceCapacityFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InsufficientDBInstanceCapacityFault,
      __BaseException
    >
  );
}
export declare class NetworkTypeNotSupported extends __BaseException {
  readonly name: "NetworkTypeNotSupported";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NetworkTypeNotSupported, __BaseException>
  );
}
export declare class ProvisionedIopsNotAvailableInAZFault extends __BaseException {
  readonly name: "ProvisionedIopsNotAvailableInAZFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ProvisionedIopsNotAvailableInAZFault,
      __BaseException
    >
  );
}
export declare class StorageTypeNotSupportedFault extends __BaseException {
  readonly name: "StorageTypeNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<StorageTypeNotSupportedFault, __BaseException>
  );
}
export interface CreateDBInstanceReadReplicaMessage {
  DBInstanceIdentifier: string | undefined;
  SourceDBInstanceIdentifier: string | undefined;
  DBInstanceClass?: string;
  AvailabilityZone?: string;
  Port?: number;
  MultiAZ?: boolean;
  AutoMinorVersionUpgrade?: boolean;
  Iops?: number;
  OptionGroupName?: string;
  DBParameterGroupName?: string;
  PubliclyAccessible?: boolean;
  Tags?: Tag[];
  DBSubnetGroupName?: string;
  VpcSecurityGroupIds?: string[];
  StorageType?: string;
  CopyTagsToSnapshot?: boolean;
  MonitoringInterval?: number;
  MonitoringRoleArn?: string;
  KmsKeyId?: string;
  PreSignedUrl?: string;
  EnableIAMDatabaseAuthentication?: boolean;
  EnablePerformanceInsights?: boolean;
  PerformanceInsightsKMSKeyId?: string;
  PerformanceInsightsRetentionPeriod?: number;
  EnableCloudwatchLogsExports?: string[];
  ProcessorFeatures?: ProcessorFeature[];
  UseDefaultProcessorFeatures?: boolean;
  DeletionProtection?: boolean;
  Domain?: string;
  DomainIAMRoleName?: string;
  ReplicaMode?: ReplicaMode | string;
  MaxAllocatedStorage?: number;
  CustomIamInstanceProfile?: string;
  NetworkType?: string;
  StorageThroughput?: number;
  EnableCustomerOwnedIp?: boolean;
}
export interface CreateDBInstanceReadReplicaResult {
  DBInstance?: DBInstance;
}
export declare class DBSubnetGroupNotAllowedFault extends __BaseException {
  readonly name: "DBSubnetGroupNotAllowedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSubnetGroupNotAllowedFault, __BaseException>
  );
}
export declare class InvalidDBSubnetGroupFault extends __BaseException {
  readonly name: "InvalidDBSubnetGroupFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSubnetGroupFault, __BaseException>
  );
}
export interface CreateDBParameterGroupMessage {
  DBParameterGroupName: string | undefined;
  DBParameterGroupFamily: string | undefined;
  Description: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBParameterGroupResult {
  DBParameterGroup?: DBParameterGroup;
}
export declare enum AuthScheme {
  SECRETS = "SECRETS",
}
export declare enum ClientPasswordAuthType {
  MYSQL_NATIVE_PASSWORD = "MYSQL_NATIVE_PASSWORD",
  POSTGRES_MD5 = "POSTGRES_MD5",
  POSTGRES_SCRAM_SHA_256 = "POSTGRES_SCRAM_SHA_256",
  SQL_SERVER_AUTHENTICATION = "SQL_SERVER_AUTHENTICATION",
}
export declare enum IAMAuthMode {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
  REQUIRED = "REQUIRED",
}
export interface UserAuthConfig {
  Description?: string;
  UserName?: string;
  AuthScheme?: AuthScheme | string;
  SecretArn?: string;
  IAMAuth?: IAMAuthMode | string;
  ClientPasswordAuthType?: ClientPasswordAuthType | string;
}
export declare enum EngineFamily {
  MYSQL = "MYSQL",
  POSTGRESQL = "POSTGRESQL",
  SQLSERVER = "SQLSERVER",
}
export interface CreateDBProxyRequest {
  DBProxyName: string | undefined;
  EngineFamily: EngineFamily | string | undefined;
  Auth: UserAuthConfig[] | undefined;
  RoleArn: string | undefined;
  VpcSubnetIds: string[] | undefined;
  VpcSecurityGroupIds?: string[];
  RequireTLS?: boolean;
  IdleClientTimeout?: number;
  DebugLogging?: boolean;
  Tags?: Tag[];
}
export interface UserAuthConfigInfo {
  Description?: string;
  UserName?: string;
  AuthScheme?: AuthScheme | string;
  SecretArn?: string;
  IAMAuth?: IAMAuthMode | string;
  ClientPasswordAuthType?: ClientPasswordAuthType | string;
}
export declare enum DBProxyStatus {
  AVAILABLE = "available",
  CREATING = "creating",
  DELETING = "deleting",
  INCOMPATIBLE_NETWORK = "incompatible-network",
  INSUFFICIENT_RESOURCE_LIMITS = "insufficient-resource-limits",
  MODIFYING = "modifying",
  REACTIVATING = "reactivating",
  SUSPENDED = "suspended",
  SUSPENDING = "suspending",
}
export interface DBProxy {
  DBProxyName?: string;
  DBProxyArn?: string;
  Status?: DBProxyStatus | string;
  EngineFamily?: string;
  VpcId?: string;
  VpcSecurityGroupIds?: string[];
  VpcSubnetIds?: string[];
  Auth?: UserAuthConfigInfo[];
  RoleArn?: string;
  Endpoint?: string;
  RequireTLS?: boolean;
  IdleClientTimeout?: number;
  DebugLogging?: boolean;
  CreatedDate?: Date;
  UpdatedDate?: Date;
}
export interface CreateDBProxyResponse {
  DBProxy?: DBProxy;
}
export declare class DBProxyAlreadyExistsFault extends __BaseException {
  readonly name: "DBProxyAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyAlreadyExistsFault, __BaseException>
  );
}
export declare class DBProxyQuotaExceededFault extends __BaseException {
  readonly name: "DBProxyQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyQuotaExceededFault, __BaseException>
  );
}
export declare enum DBProxyEndpointTargetRole {
  READ_ONLY = "READ_ONLY",
  READ_WRITE = "READ_WRITE",
}
export interface CreateDBProxyEndpointRequest {
  DBProxyName: string | undefined;
  DBProxyEndpointName: string | undefined;
  VpcSubnetIds: string[] | undefined;
  VpcSecurityGroupIds?: string[];
  TargetRole?: DBProxyEndpointTargetRole | string;
  Tags?: Tag[];
}
export declare enum DBProxyEndpointStatus {
  AVAILABLE = "available",
  CREATING = "creating",
  DELETING = "deleting",
  INCOMPATIBLE_NETWORK = "incompatible-network",
  INSUFFICIENT_RESOURCE_LIMITS = "insufficient-resource-limits",
  MODIFYING = "modifying",
}
export interface DBProxyEndpoint {
  DBProxyEndpointName?: string;
  DBProxyEndpointArn?: string;
  DBProxyName?: string;
  Status?: DBProxyEndpointStatus | string;
  VpcId?: string;
  VpcSecurityGroupIds?: string[];
  VpcSubnetIds?: string[];
  Endpoint?: string;
  CreatedDate?: Date;
  TargetRole?: DBProxyEndpointTargetRole | string;
  IsDefault?: boolean;
}
export interface CreateDBProxyEndpointResponse {
  DBProxyEndpoint?: DBProxyEndpoint;
}
export declare class DBProxyEndpointAlreadyExistsFault extends __BaseException {
  readonly name: "DBProxyEndpointAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBProxyEndpointAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBProxyEndpointQuotaExceededFault extends __BaseException {
  readonly name: "DBProxyEndpointQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBProxyEndpointQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class InvalidDBProxyStateFault extends __BaseException {
  readonly name: "InvalidDBProxyStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBProxyStateFault, __BaseException>
  );
}
export interface CreateDBSecurityGroupMessage {
  DBSecurityGroupName: string | undefined;
  DBSecurityGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBSecurityGroupResult {
  DBSecurityGroup?: DBSecurityGroup;
}
export declare class DBSecurityGroupAlreadyExistsFault extends __BaseException {
  readonly name: "DBSecurityGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSecurityGroupAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBSecurityGroupNotSupportedFault extends __BaseException {
  readonly name: "DBSecurityGroupNotSupportedFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSecurityGroupNotSupportedFault,
      __BaseException
    >
  );
}
export declare class DBSecurityGroupQuotaExceededFault extends __BaseException {
  readonly name: "DBSecurityGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSecurityGroupQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CreateDBSnapshotMessage {
  DBSnapshotIdentifier: string | undefined;
  DBInstanceIdentifier: string | undefined;
  Tags?: Tag[];
}
export interface CreateDBSnapshotResult {
  DBSnapshot?: DBSnapshot;
}
export interface CreateDBSubnetGroupMessage {
  DBSubnetGroupName: string | undefined;
  DBSubnetGroupDescription: string | undefined;
  SubnetIds: string[] | undefined;
  Tags?: Tag[];
}
export interface CreateDBSubnetGroupResult {
  DBSubnetGroup?: DBSubnetGroup;
}
export declare class DBSubnetGroupAlreadyExistsFault extends __BaseException {
  readonly name: "DBSubnetGroupAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSubnetGroupAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class DBSubnetGroupQuotaExceededFault extends __BaseException {
  readonly name: "DBSubnetGroupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBSubnetGroupQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class DBSubnetQuotaExceededFault extends __BaseException {
  readonly name: "DBSubnetQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBSubnetQuotaExceededFault, __BaseException>
  );
}
export interface CreateEventSubscriptionMessage {
  SubscriptionName: string | undefined;
  SnsTopicArn: string | undefined;
  SourceType?: string;
  EventCategories?: string[];
  SourceIds?: string[];
  Enabled?: boolean;
  Tags?: Tag[];
}
export interface CreateEventSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export declare class EventSubscriptionQuotaExceededFault extends __BaseException {
  readonly name: "EventSubscriptionQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      EventSubscriptionQuotaExceededFault,
      __BaseException
    >
  );
}
export declare class SNSInvalidTopicFault extends __BaseException {
  readonly name: "SNSInvalidTopicFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SNSInvalidTopicFault, __BaseException>
  );
}
export declare class SNSNoAuthorizationFault extends __BaseException {
  readonly name: "SNSNoAuthorizationFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SNSNoAuthorizationFault, __BaseException>
  );
}
export declare class SNSTopicArnNotFoundFault extends __BaseException {
  readonly name: "SNSTopicArnNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SNSTopicArnNotFoundFault, __BaseException>
  );
}
export declare class SubscriptionAlreadyExistFault extends __BaseException {
  readonly name: "SubscriptionAlreadyExistFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<SubscriptionAlreadyExistFault, __BaseException>
  );
}
export declare class SubscriptionCategoryNotFoundFault extends __BaseException {
  readonly name: "SubscriptionCategoryNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      SubscriptionCategoryNotFoundFault,
      __BaseException
    >
  );
}
export interface CreateGlobalClusterMessage {
  GlobalClusterIdentifier?: string;
  SourceDBClusterIdentifier?: string;
  Engine?: string;
  EngineVersion?: string;
  DeletionProtection?: boolean;
  DatabaseName?: string;
  StorageEncrypted?: boolean;
}
export declare enum FailoverStatus {
  CANCELLING = "cancelling",
  FAILING_OVER = "failing-over",
  PENDING = "pending",
}
export interface FailoverState {
  Status?: FailoverStatus | string;
  FromDbClusterArn?: string;
  ToDbClusterArn?: string;
}
export interface GlobalClusterMember {
  DBClusterArn?: string;
  Readers?: string[];
  IsWriter?: boolean;
  GlobalWriteForwardingStatus?: WriteForwardingStatus | string;
}
export interface GlobalCluster {
  GlobalClusterIdentifier?: string;
  GlobalClusterResourceId?: string;
  GlobalClusterArn?: string;
  Status?: string;
  Engine?: string;
  EngineVersion?: string;
  DatabaseName?: string;
  StorageEncrypted?: boolean;
  DeletionProtection?: boolean;
  GlobalClusterMembers?: GlobalClusterMember[];
  FailoverState?: FailoverState;
}
export interface CreateGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export declare class GlobalClusterAlreadyExistsFault extends __BaseException {
  readonly name: "GlobalClusterAlreadyExistsFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      GlobalClusterAlreadyExistsFault,
      __BaseException
    >
  );
}
export declare class GlobalClusterQuotaExceededFault extends __BaseException {
  readonly name: "GlobalClusterQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      GlobalClusterQuotaExceededFault,
      __BaseException
    >
  );
}
export interface CreateOptionGroupMessage {
  OptionGroupName: string | undefined;
  EngineName: string | undefined;
  MajorEngineVersion: string | undefined;
  OptionGroupDescription: string | undefined;
  Tags?: Tag[];
}
export interface CreateOptionGroupResult {
  OptionGroup?: OptionGroup;
}
export interface DeleteBlueGreenDeploymentRequest {
  BlueGreenDeploymentIdentifier: string | undefined;
  DeleteTarget?: boolean;
}
export interface DeleteBlueGreenDeploymentResponse {
  BlueGreenDeployment?: BlueGreenDeployment;
}
export declare class InvalidBlueGreenDeploymentStateFault extends __BaseException {
  readonly name: "InvalidBlueGreenDeploymentStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidBlueGreenDeploymentStateFault,
      __BaseException
    >
  );
}
export declare class CustomDBEngineVersionNotFoundFault extends __BaseException {
  readonly name: "CustomDBEngineVersionNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      CustomDBEngineVersionNotFoundFault,
      __BaseException
    >
  );
}
export interface DeleteCustomDBEngineVersionMessage {
  Engine: string | undefined;
  EngineVersion: string | undefined;
}
export declare class InvalidCustomDBEngineVersionStateFault extends __BaseException {
  readonly name: "InvalidCustomDBEngineVersionStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidCustomDBEngineVersionStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBClusterMessage {
  DBClusterIdentifier: string | undefined;
  SkipFinalSnapshot?: boolean;
  FinalDBSnapshotIdentifier?: string;
}
export interface DeleteDBClusterResult {
  DBCluster?: DBCluster;
}
export declare class DBClusterEndpointNotFoundFault extends __BaseException {
  readonly name: "DBClusterEndpointNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBClusterEndpointNotFoundFault, __BaseException>
  );
}
export interface DeleteDBClusterEndpointMessage {
  DBClusterEndpointIdentifier: string | undefined;
}
export declare class InvalidDBClusterEndpointStateFault extends __BaseException {
  readonly name: "InvalidDBClusterEndpointStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBClusterEndpointStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBClusterParameterGroupMessage {
  DBClusterParameterGroupName: string | undefined;
}
export declare class InvalidDBParameterGroupStateFault extends __BaseException {
  readonly name: "InvalidDBParameterGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBParameterGroupStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBClusterSnapshotMessage {
  DBClusterSnapshotIdentifier: string | undefined;
}
export interface DeleteDBClusterSnapshotResult {
  DBClusterSnapshot?: DBClusterSnapshot;
}
export declare class DBInstanceAutomatedBackupQuotaExceededFault extends __BaseException {
  readonly name: "DBInstanceAutomatedBackupQuotaExceededFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceAutomatedBackupQuotaExceededFault,
      __BaseException
    >
  );
}
export interface DeleteDBInstanceMessage {
  DBInstanceIdentifier: string | undefined;
  SkipFinalSnapshot?: boolean;
  FinalDBSnapshotIdentifier?: string;
  DeleteAutomatedBackups?: boolean;
}
export interface DeleteDBInstanceResult {
  DBInstance?: DBInstance;
}
export declare class DBInstanceAutomatedBackupNotFoundFault extends __BaseException {
  readonly name: "DBInstanceAutomatedBackupNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBInstanceAutomatedBackupNotFoundFault,
      __BaseException
    >
  );
}
export interface DeleteDBInstanceAutomatedBackupMessage {
  DbiResourceId?: string;
  DBInstanceAutomatedBackupsArn?: string;
}
export interface RestoreWindow {
  EarliestTime?: Date;
  LatestTime?: Date;
}
export interface DBInstanceAutomatedBackup {
  DBInstanceArn?: string;
  DbiResourceId?: string;
  Region?: string;
  DBInstanceIdentifier?: string;
  RestoreWindow?: RestoreWindow;
  AllocatedStorage?: number;
  Status?: string;
  Port?: number;
  AvailabilityZone?: string;
  VpcId?: string;
  InstanceCreateTime?: Date;
  MasterUsername?: string;
  Engine?: string;
  EngineVersion?: string;
  LicenseModel?: string;
  Iops?: number;
  OptionGroupName?: string;
  TdeCredentialArn?: string;
  Encrypted?: boolean;
  StorageType?: string;
  KmsKeyId?: string;
  Timezone?: string;
  IAMDatabaseAuthenticationEnabled?: boolean;
  BackupRetentionPeriod?: number;
  DBInstanceAutomatedBackupsArn?: string;
  DBInstanceAutomatedBackupsReplications?: DBInstanceAutomatedBackupsReplication[];
  BackupTarget?: string;
  StorageThroughput?: number;
}
export interface DeleteDBInstanceAutomatedBackupResult {
  DBInstanceAutomatedBackup?: DBInstanceAutomatedBackup;
}
export declare class InvalidDBInstanceAutomatedBackupStateFault extends __BaseException {
  readonly name: "InvalidDBInstanceAutomatedBackupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBInstanceAutomatedBackupStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBParameterGroupMessage {
  DBParameterGroupName: string | undefined;
}
export interface DeleteDBProxyRequest {
  DBProxyName: string | undefined;
}
export interface DeleteDBProxyResponse {
  DBProxy?: DBProxy;
}
export declare class DBProxyEndpointNotFoundFault extends __BaseException {
  readonly name: "DBProxyEndpointNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyEndpointNotFoundFault, __BaseException>
  );
}
export interface DeleteDBProxyEndpointRequest {
  DBProxyEndpointName: string | undefined;
}
export interface DeleteDBProxyEndpointResponse {
  DBProxyEndpoint?: DBProxyEndpoint;
}
export declare class InvalidDBProxyEndpointStateFault extends __BaseException {
  readonly name: "InvalidDBProxyEndpointStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidDBProxyEndpointStateFault,
      __BaseException
    >
  );
}
export interface DeleteDBSecurityGroupMessage {
  DBSecurityGroupName: string | undefined;
}
export interface DeleteDBSnapshotMessage {
  DBSnapshotIdentifier: string | undefined;
}
export interface DeleteDBSnapshotResult {
  DBSnapshot?: DBSnapshot;
}
export interface DeleteDBSubnetGroupMessage {
  DBSubnetGroupName: string | undefined;
}
export declare class InvalidDBSubnetStateFault extends __BaseException {
  readonly name: "InvalidDBSubnetStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidDBSubnetStateFault, __BaseException>
  );
}
export interface DeleteEventSubscriptionMessage {
  SubscriptionName: string | undefined;
}
export interface DeleteEventSubscriptionResult {
  EventSubscription?: EventSubscription;
}
export declare class InvalidEventSubscriptionStateFault extends __BaseException {
  readonly name: "InvalidEventSubscriptionStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidEventSubscriptionStateFault,
      __BaseException
    >
  );
}
export interface DeleteGlobalClusterMessage {
  GlobalClusterIdentifier: string | undefined;
}
export interface DeleteGlobalClusterResult {
  GlobalCluster?: GlobalCluster;
}
export interface DeleteOptionGroupMessage {
  OptionGroupName: string | undefined;
}
export declare class InvalidOptionGroupStateFault extends __BaseException {
  readonly name: "InvalidOptionGroupStateFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidOptionGroupStateFault, __BaseException>
  );
}
export declare class DBProxyTargetNotFoundFault extends __BaseException {
  readonly name: "DBProxyTargetNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DBProxyTargetNotFoundFault, __BaseException>
  );
}
export interface DeregisterDBProxyTargetsRequest {
  DBProxyName: string | undefined;
  TargetGroupName?: string;
  DBInstanceIdentifiers?: string[];
  DBClusterIdentifiers?: string[];
}
export interface DeregisterDBProxyTargetsResponse {}
export interface DescribeAccountAttributesMessage {}
export interface Filter {
  Name: string | undefined;
  Values: string[] | undefined;
}
export interface DescribeBlueGreenDeploymentsRequest {
  BlueGreenDeploymentIdentifier?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface DescribeBlueGreenDeploymentsResponse {
  BlueGreenDeployments?: BlueGreenDeployment[];
  Marker?: string;
}
export interface Certificate {
  CertificateIdentifier?: string;
  CertificateType?: string;
  Thumbprint?: string;
  ValidFrom?: Date;
  ValidTill?: Date;
  CertificateArn?: string;
  CustomerOverride?: boolean;
  CustomerOverrideValidTill?: Date;
}
export interface CertificateMessage {
  Certificates?: Certificate[];
  Marker?: string;
}
export declare class CertificateNotFoundFault extends __BaseException {
  readonly name: "CertificateNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<CertificateNotFoundFault, __BaseException>
  );
}
export interface DescribeCertificatesMessage {
  CertificateIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterBacktrackMessage {
  Marker?: string;
  DBClusterBacktracks?: DBClusterBacktrack[];
}
export declare class DBClusterBacktrackNotFoundFault extends __BaseException {
  readonly name: "DBClusterBacktrackNotFoundFault";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      DBClusterBacktrackNotFoundFault,
      __BaseException
    >
  );
}
export interface DescribeDBClusterBacktracksMessage {
  DBClusterIdentifier: string | undefined;
  BacktrackIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterEndpointMessage {
  Marker?: string;
  DBClusterEndpoints?: DBClusterEndpoint[];
}
export interface DescribeDBClusterEndpointsMessage {
  DBClusterIdentifier?: string;
  DBClusterEndpointIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterParameterGroupsMessage {
  Marker?: string;
  DBClusterParameterGroups?: DBClusterParameterGroup[];
}
export interface DescribeDBClusterParameterGroupsMessage {
  DBClusterParameterGroupName?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export declare enum ApplyMethod {
  immediate = "immediate",
  pending_reboot = "pending-reboot",
}
export interface Parameter {
  ParameterName?: string;
  ParameterValue?: string;
  Description?: string;
  Source?: string;
  ApplyType?: string;
  DataType?: string;
  AllowedValues?: string;
  IsModifiable?: boolean;
  MinimumEngineVersion?: string;
  ApplyMethod?: ApplyMethod | string;
  SupportedEngineModes?: string[];
}
export interface DBClusterParameterGroupDetails {
  Parameters?: Parameter[];
  Marker?: string;
}
export interface DescribeDBClusterParametersMessage {
  DBClusterParameterGroupName: string | undefined;
  Source?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBClusterMessage {
  Marker?: string;
  DBClusters?: DBCluster[];
}
export interface DescribeDBClustersMessage {
  DBClusterIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  IncludeShared?: boolean;
}
export interface DescribeDBClusterSnapshotAttributesMessage {
  DBClusterSnapshotIdentifier: string | undefined;
}
export interface DBClusterSnapshotAttribute {
  AttributeName?: string;
  AttributeValues?: string[];
}
export interface DBClusterSnapshotAttributesResult {
  DBClusterSnapshotIdentifier?: string;
  DBClusterSnapshotAttributes?: DBClusterSnapshotAttribute[];
}
export interface DescribeDBClusterSnapshotAttributesResult {
  DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
}
export interface DBClusterSnapshotMessage {
  Marker?: string;
  DBClusterSnapshots?: DBClusterSnapshot[];
}
export interface DescribeDBClusterSnapshotsMessage {
  DBClusterIdentifier?: string;
  DBClusterSnapshotIdentifier?: string;
  SnapshotType?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  IncludeShared?: boolean;
  IncludePublic?: boolean;
}
export interface DBEngineVersionMessage {
  Marker?: string;
  DBEngineVersions?: DBEngineVersion[];
}
export interface DescribeDBEngineVersionsMessage {
  Engine?: string;
  EngineVersion?: string;
  DBParameterGroupFamily?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  DefaultOnly?: boolean;
  ListSupportedCharacterSets?: boolean;
  ListSupportedTimezones?: boolean;
  IncludeAll?: boolean;
}
export interface DBInstanceAutomatedBackupMessage {
  Marker?: string;
  DBInstanceAutomatedBackups?: DBInstanceAutomatedBackup[];
}
export interface DescribeDBInstanceAutomatedBackupsMessage {
  DbiResourceId?: string;
  DBInstanceIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
  DBInstanceAutomatedBackupsArn?: string;
}
export interface DBInstanceMessage {
  Marker?: string;
  DBInstances?: DBInstance[];
}
export interface DescribeDBInstancesMessage {
  DBInstanceIdentifier?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeDBLogFilesMessage {
  DBInstanceIdentifier: string | undefined;
  FilenameContains?: string;
  FileLastWritten?: number;
  FileSize?: number;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeDBLogFilesDetails {
  LogFileName?: string;
  LastWritten?: number;
  Size?: number;
}
export interface DescribeDBLogFilesResponse {
  DescribeDBLogFiles?: DescribeDBLogFilesDetails[];
  Marker?: string;
}
export interface DBParameterGroupsMessage {
  Marker?: string;
  DBParameterGroups?: DBParameterGroup[];
}
export interface DescribeDBParameterGroupsMessage {
  DBParameterGroupName?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DBParameterGroupDetails {
  Parameters?: Parameter[];
  Marker?: string;
}
export interface DescribeDBParametersMessage {
  DBParameterGroupName: string | undefined;
  Source?: string;
  Filters?: Filter[];
  MaxRecords?: number;
  Marker?: string;
}
export interface DescribeDBProxiesRequest {
  DBProxyName?: string;
  Filters?: Filter[];
  Marker?: string;
  MaxRecords?: number;
}
export interface DescribeDBProxiesResponse {
  DBProxies?: DBProxy[];
  Marker?: string;
}
export declare const AccountQuotaFilterSensitiveLog: (obj: AccountQuota) => any;
export declare const AccountAttributesMessageFilterSensitiveLog: (
  obj: AccountAttributesMessage
) => any;
export declare const AddRoleToDBClusterMessageFilterSensitiveLog: (
  obj: AddRoleToDBClusterMessage
) => any;
export declare const AddRoleToDBInstanceMessageFilterSensitiveLog: (
  obj: AddRoleToDBInstanceMessage
) => any;
export declare const AddSourceIdentifierToSubscriptionMessageFilterSensitiveLog: (
  obj: AddSourceIdentifierToSubscriptionMessage
) => any;
export declare const EventSubscriptionFilterSensitiveLog: (
  obj: EventSubscription
) => any;
export declare const AddSourceIdentifierToSubscriptionResultFilterSensitiveLog: (
  obj: AddSourceIdentifierToSubscriptionResult
) => any;
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const AddTagsToResourceMessageFilterSensitiveLog: (
  obj: AddTagsToResourceMessage
) => any;
export declare const ApplyPendingMaintenanceActionMessageFilterSensitiveLog: (
  obj: ApplyPendingMaintenanceActionMessage
) => any;
export declare const PendingMaintenanceActionFilterSensitiveLog: (
  obj: PendingMaintenanceAction
) => any;
export declare const ResourcePendingMaintenanceActionsFilterSensitiveLog: (
  obj: ResourcePendingMaintenanceActions
) => any;
export declare const ApplyPendingMaintenanceActionResultFilterSensitiveLog: (
  obj: ApplyPendingMaintenanceActionResult
) => any;
export declare const AuthorizeDBSecurityGroupIngressMessageFilterSensitiveLog: (
  obj: AuthorizeDBSecurityGroupIngressMessage
) => any;
export declare const EC2SecurityGroupFilterSensitiveLog: (
  obj: EC2SecurityGroup
) => any;
export declare const IPRangeFilterSensitiveLog: (obj: IPRange) => any;
export declare const DBSecurityGroupFilterSensitiveLog: (
  obj: DBSecurityGroup
) => any;
export declare const AuthorizeDBSecurityGroupIngressResultFilterSensitiveLog: (
  obj: AuthorizeDBSecurityGroupIngressResult
) => any;
export declare const BacktrackDBClusterMessageFilterSensitiveLog: (
  obj: BacktrackDBClusterMessage
) => any;
export declare const DBClusterBacktrackFilterSensitiveLog: (
  obj: DBClusterBacktrack
) => any;
export declare const CancelExportTaskMessageFilterSensitiveLog: (
  obj: CancelExportTaskMessage
) => any;
export declare const ExportTaskFilterSensitiveLog: (obj: ExportTask) => any;
export declare const CopyDBClusterParameterGroupMessageFilterSensitiveLog: (
  obj: CopyDBClusterParameterGroupMessage
) => any;
export declare const DBClusterParameterGroupFilterSensitiveLog: (
  obj: DBClusterParameterGroup
) => any;
export declare const CopyDBClusterParameterGroupResultFilterSensitiveLog: (
  obj: CopyDBClusterParameterGroupResult
) => any;
export declare const CopyDBClusterSnapshotMessageFilterSensitiveLog: (
  obj: CopyDBClusterSnapshotMessage
) => any;
export declare const DBClusterSnapshotFilterSensitiveLog: (
  obj: DBClusterSnapshot
) => any;
export declare const CopyDBClusterSnapshotResultFilterSensitiveLog: (
  obj: CopyDBClusterSnapshotResult
) => any;
export declare const CopyDBParameterGroupMessageFilterSensitiveLog: (
  obj: CopyDBParameterGroupMessage
) => any;
export declare const DBParameterGroupFilterSensitiveLog: (
  obj: DBParameterGroup
) => any;
export declare const CopyDBParameterGroupResultFilterSensitiveLog: (
  obj: CopyDBParameterGroupResult
) => any;
export declare const CopyDBSnapshotMessageFilterSensitiveLog: (
  obj: CopyDBSnapshotMessage
) => any;
export declare const ProcessorFeatureFilterSensitiveLog: (
  obj: ProcessorFeature
) => any;
export declare const DBSnapshotFilterSensitiveLog: (obj: DBSnapshot) => any;
export declare const CopyDBSnapshotResultFilterSensitiveLog: (
  obj: CopyDBSnapshotResult
) => any;
export declare const CopyOptionGroupMessageFilterSensitiveLog: (
  obj: CopyOptionGroupMessage
) => any;
export declare const DBSecurityGroupMembershipFilterSensitiveLog: (
  obj: DBSecurityGroupMembership
) => any;
export declare const OptionSettingFilterSensitiveLog: (
  obj: OptionSetting
) => any;
export declare const VpcSecurityGroupMembershipFilterSensitiveLog: (
  obj: VpcSecurityGroupMembership
) => any;
export declare const OptionFilterSensitiveLog: (obj: Option) => any;
export declare const OptionGroupFilterSensitiveLog: (obj: OptionGroup) => any;
export declare const CopyOptionGroupResultFilterSensitiveLog: (
  obj: CopyOptionGroupResult
) => any;
export declare const CreateBlueGreenDeploymentRequestFilterSensitiveLog: (
  obj: CreateBlueGreenDeploymentRequest
) => any;
export declare const SwitchoverDetailFilterSensitiveLog: (
  obj: SwitchoverDetail
) => any;
export declare const BlueGreenDeploymentTaskFilterSensitiveLog: (
  obj: BlueGreenDeploymentTask
) => any;
export declare const BlueGreenDeploymentFilterSensitiveLog: (
  obj: BlueGreenDeployment
) => any;
export declare const CreateBlueGreenDeploymentResponseFilterSensitiveLog: (
  obj: CreateBlueGreenDeploymentResponse
) => any;
export declare const CreateCustomDBEngineVersionMessageFilterSensitiveLog: (
  obj: CreateCustomDBEngineVersionMessage
) => any;
export declare const CharacterSetFilterSensitiveLog: (obj: CharacterSet) => any;
export declare const TimezoneFilterSensitiveLog: (obj: Timezone) => any;
export declare const UpgradeTargetFilterSensitiveLog: (
  obj: UpgradeTarget
) => any;
export declare const DBEngineVersionFilterSensitiveLog: (
  obj: DBEngineVersion
) => any;
export declare const ScalingConfigurationFilterSensitiveLog: (
  obj: ScalingConfiguration
) => any;
export declare const ServerlessV2ScalingConfigurationFilterSensitiveLog: (
  obj: ServerlessV2ScalingConfiguration
) => any;
export declare const CreateDBClusterMessageFilterSensitiveLog: (
  obj: CreateDBClusterMessage
) => any;
export declare const DBClusterRoleFilterSensitiveLog: (
  obj: DBClusterRole
) => any;
export declare const DBClusterMemberFilterSensitiveLog: (
  obj: DBClusterMember
) => any;
export declare const DBClusterOptionGroupStatusFilterSensitiveLog: (
  obj: DBClusterOptionGroupStatus
) => any;
export declare const DomainMembershipFilterSensitiveLog: (
  obj: DomainMembership
) => any;
export declare const MasterUserSecretFilterSensitiveLog: (
  obj: MasterUserSecret
) => any;
export declare const PendingCloudwatchLogsExportsFilterSensitiveLog: (
  obj: PendingCloudwatchLogsExports
) => any;
export declare const ClusterPendingModifiedValuesFilterSensitiveLog: (
  obj: ClusterPendingModifiedValues
) => any;
export declare const ScalingConfigurationInfoFilterSensitiveLog: (
  obj: ScalingConfigurationInfo
) => any;
export declare const ServerlessV2ScalingConfigurationInfoFilterSensitiveLog: (
  obj: ServerlessV2ScalingConfigurationInfo
) => any;
export declare const DBClusterFilterSensitiveLog: (obj: DBCluster) => any;
export declare const CreateDBClusterResultFilterSensitiveLog: (
  obj: CreateDBClusterResult
) => any;
export declare const CreateDBClusterEndpointMessageFilterSensitiveLog: (
  obj: CreateDBClusterEndpointMessage
) => any;
export declare const DBClusterEndpointFilterSensitiveLog: (
  obj: DBClusterEndpoint
) => any;
export declare const CreateDBClusterParameterGroupMessageFilterSensitiveLog: (
  obj: CreateDBClusterParameterGroupMessage
) => any;
export declare const CreateDBClusterParameterGroupResultFilterSensitiveLog: (
  obj: CreateDBClusterParameterGroupResult
) => any;
export declare const CreateDBClusterSnapshotMessageFilterSensitiveLog: (
  obj: CreateDBClusterSnapshotMessage
) => any;
export declare const CreateDBClusterSnapshotResultFilterSensitiveLog: (
  obj: CreateDBClusterSnapshotResult
) => any;
export declare const CreateDBInstanceMessageFilterSensitiveLog: (
  obj: CreateDBInstanceMessage
) => any;
export declare const DBInstanceRoleFilterSensitiveLog: (
  obj: DBInstanceRole
) => any;
export declare const DBInstanceAutomatedBackupsReplicationFilterSensitiveLog: (
  obj: DBInstanceAutomatedBackupsReplication
) => any;
export declare const DBParameterGroupStatusFilterSensitiveLog: (
  obj: DBParameterGroupStatus
) => any;
export declare const AvailabilityZoneFilterSensitiveLog: (
  obj: AvailabilityZone
) => any;
export declare const OutpostFilterSensitiveLog: (obj: Outpost) => any;
export declare const SubnetFilterSensitiveLog: (obj: Subnet) => any;
export declare const DBSubnetGroupFilterSensitiveLog: (
  obj: DBSubnetGroup
) => any;
export declare const EndpointFilterSensitiveLog: (obj: Endpoint) => any;
export declare const OptionGroupMembershipFilterSensitiveLog: (
  obj: OptionGroupMembership
) => any;
export declare const PendingModifiedValuesFilterSensitiveLog: (
  obj: PendingModifiedValues
) => any;
export declare const DBInstanceStatusInfoFilterSensitiveLog: (
  obj: DBInstanceStatusInfo
) => any;
export declare const DBInstanceFilterSensitiveLog: (obj: DBInstance) => any;
export declare const CreateDBInstanceResultFilterSensitiveLog: (
  obj: CreateDBInstanceResult
) => any;
export declare const CreateDBInstanceReadReplicaMessageFilterSensitiveLog: (
  obj: CreateDBInstanceReadReplicaMessage
) => any;
export declare const CreateDBInstanceReadReplicaResultFilterSensitiveLog: (
  obj: CreateDBInstanceReadReplicaResult
) => any;
export declare const CreateDBParameterGroupMessageFilterSensitiveLog: (
  obj: CreateDBParameterGroupMessage
) => any;
export declare const CreateDBParameterGroupResultFilterSensitiveLog: (
  obj: CreateDBParameterGroupResult
) => any;
export declare const UserAuthConfigFilterSensitiveLog: (
  obj: UserAuthConfig
) => any;
export declare const CreateDBProxyRequestFilterSensitiveLog: (
  obj: CreateDBProxyRequest
) => any;
export declare const UserAuthConfigInfoFilterSensitiveLog: (
  obj: UserAuthConfigInfo
) => any;
export declare const DBProxyFilterSensitiveLog: (obj: DBProxy) => any;
export declare const CreateDBProxyResponseFilterSensitiveLog: (
  obj: CreateDBProxyResponse
) => any;
export declare const CreateDBProxyEndpointRequestFilterSensitiveLog: (
  obj: CreateDBProxyEndpointRequest
) => any;
export declare const DBProxyEndpointFilterSensitiveLog: (
  obj: DBProxyEndpoint
) => any;
export declare const CreateDBProxyEndpointResponseFilterSensitiveLog: (
  obj: CreateDBProxyEndpointResponse
) => any;
export declare const CreateDBSecurityGroupMessageFilterSensitiveLog: (
  obj: CreateDBSecurityGroupMessage
) => any;
export declare const CreateDBSecurityGroupResultFilterSensitiveLog: (
  obj: CreateDBSecurityGroupResult
) => any;
export declare const CreateDBSnapshotMessageFilterSensitiveLog: (
  obj: CreateDBSnapshotMessage
) => any;
export declare const CreateDBSnapshotResultFilterSensitiveLog: (
  obj: CreateDBSnapshotResult
) => any;
export declare const CreateDBSubnetGroupMessageFilterSensitiveLog: (
  obj: CreateDBSubnetGroupMessage
) => any;
export declare const CreateDBSubnetGroupResultFilterSensitiveLog: (
  obj: CreateDBSubnetGroupResult
) => any;
export declare const CreateEventSubscriptionMessageFilterSensitiveLog: (
  obj: CreateEventSubscriptionMessage
) => any;
export declare const CreateEventSubscriptionResultFilterSensitiveLog: (
  obj: CreateEventSubscriptionResult
) => any;
export declare const CreateGlobalClusterMessageFilterSensitiveLog: (
  obj: CreateGlobalClusterMessage
) => any;
export declare const FailoverStateFilterSensitiveLog: (
  obj: FailoverState
) => any;
export declare const GlobalClusterMemberFilterSensitiveLog: (
  obj: GlobalClusterMember
) => any;
export declare const GlobalClusterFilterSensitiveLog: (
  obj: GlobalCluster
) => any;
export declare const CreateGlobalClusterResultFilterSensitiveLog: (
  obj: CreateGlobalClusterResult
) => any;
export declare const CreateOptionGroupMessageFilterSensitiveLog: (
  obj: CreateOptionGroupMessage
) => any;
export declare const CreateOptionGroupResultFilterSensitiveLog: (
  obj: CreateOptionGroupResult
) => any;
export declare const DeleteBlueGreenDeploymentRequestFilterSensitiveLog: (
  obj: DeleteBlueGreenDeploymentRequest
) => any;
export declare const DeleteBlueGreenDeploymentResponseFilterSensitiveLog: (
  obj: DeleteBlueGreenDeploymentResponse
) => any;
export declare const DeleteCustomDBEngineVersionMessageFilterSensitiveLog: (
  obj: DeleteCustomDBEngineVersionMessage
) => any;
export declare const DeleteDBClusterMessageFilterSensitiveLog: (
  obj: DeleteDBClusterMessage
) => any;
export declare const DeleteDBClusterResultFilterSensitiveLog: (
  obj: DeleteDBClusterResult
) => any;
export declare const DeleteDBClusterEndpointMessageFilterSensitiveLog: (
  obj: DeleteDBClusterEndpointMessage
) => any;
export declare const DeleteDBClusterParameterGroupMessageFilterSensitiveLog: (
  obj: DeleteDBClusterParameterGroupMessage
) => any;
export declare const DeleteDBClusterSnapshotMessageFilterSensitiveLog: (
  obj: DeleteDBClusterSnapshotMessage
) => any;
export declare const DeleteDBClusterSnapshotResultFilterSensitiveLog: (
  obj: DeleteDBClusterSnapshotResult
) => any;
export declare const DeleteDBInstanceMessageFilterSensitiveLog: (
  obj: DeleteDBInstanceMessage
) => any;
export declare const DeleteDBInstanceResultFilterSensitiveLog: (
  obj: DeleteDBInstanceResult
) => any;
export declare const DeleteDBInstanceAutomatedBackupMessageFilterSensitiveLog: (
  obj: DeleteDBInstanceAutomatedBackupMessage
) => any;
export declare const RestoreWindowFilterSensitiveLog: (
  obj: RestoreWindow
) => any;
export declare const DBInstanceAutomatedBackupFilterSensitiveLog: (
  obj: DBInstanceAutomatedBackup
) => any;
export declare const DeleteDBInstanceAutomatedBackupResultFilterSensitiveLog: (
  obj: DeleteDBInstanceAutomatedBackupResult
) => any;
export declare const DeleteDBParameterGroupMessageFilterSensitiveLog: (
  obj: DeleteDBParameterGroupMessage
) => any;
export declare const DeleteDBProxyRequestFilterSensitiveLog: (
  obj: DeleteDBProxyRequest
) => any;
export declare const DeleteDBProxyResponseFilterSensitiveLog: (
  obj: DeleteDBProxyResponse
) => any;
export declare const DeleteDBProxyEndpointRequestFilterSensitiveLog: (
  obj: DeleteDBProxyEndpointRequest
) => any;
export declare const DeleteDBProxyEndpointResponseFilterSensitiveLog: (
  obj: DeleteDBProxyEndpointResponse
) => any;
export declare const DeleteDBSecurityGroupMessageFilterSensitiveLog: (
  obj: DeleteDBSecurityGroupMessage
) => any;
export declare const DeleteDBSnapshotMessageFilterSensitiveLog: (
  obj: DeleteDBSnapshotMessage
) => any;
export declare const DeleteDBSnapshotResultFilterSensitiveLog: (
  obj: DeleteDBSnapshotResult
) => any;
export declare const DeleteDBSubnetGroupMessageFilterSensitiveLog: (
  obj: DeleteDBSubnetGroupMessage
) => any;
export declare const DeleteEventSubscriptionMessageFilterSensitiveLog: (
  obj: DeleteEventSubscriptionMessage
) => any;
export declare const DeleteEventSubscriptionResultFilterSensitiveLog: (
  obj: DeleteEventSubscriptionResult
) => any;
export declare const DeleteGlobalClusterMessageFilterSensitiveLog: (
  obj: DeleteGlobalClusterMessage
) => any;
export declare const DeleteGlobalClusterResultFilterSensitiveLog: (
  obj: DeleteGlobalClusterResult
) => any;
export declare const DeleteOptionGroupMessageFilterSensitiveLog: (
  obj: DeleteOptionGroupMessage
) => any;
export declare const DeregisterDBProxyTargetsRequestFilterSensitiveLog: (
  obj: DeregisterDBProxyTargetsRequest
) => any;
export declare const DeregisterDBProxyTargetsResponseFilterSensitiveLog: (
  obj: DeregisterDBProxyTargetsResponse
) => any;
export declare const DescribeAccountAttributesMessageFilterSensitiveLog: (
  obj: DescribeAccountAttributesMessage
) => any;
export declare const FilterFilterSensitiveLog: (obj: Filter) => any;
export declare const DescribeBlueGreenDeploymentsRequestFilterSensitiveLog: (
  obj: DescribeBlueGreenDeploymentsRequest
) => any;
export declare const DescribeBlueGreenDeploymentsResponseFilterSensitiveLog: (
  obj: DescribeBlueGreenDeploymentsResponse
) => any;
export declare const CertificateFilterSensitiveLog: (obj: Certificate) => any;
export declare const CertificateMessageFilterSensitiveLog: (
  obj: CertificateMessage
) => any;
export declare const DescribeCertificatesMessageFilterSensitiveLog: (
  obj: DescribeCertificatesMessage
) => any;
export declare const DBClusterBacktrackMessageFilterSensitiveLog: (
  obj: DBClusterBacktrackMessage
) => any;
export declare const DescribeDBClusterBacktracksMessageFilterSensitiveLog: (
  obj: DescribeDBClusterBacktracksMessage
) => any;
export declare const DBClusterEndpointMessageFilterSensitiveLog: (
  obj: DBClusterEndpointMessage
) => any;
export declare const DescribeDBClusterEndpointsMessageFilterSensitiveLog: (
  obj: DescribeDBClusterEndpointsMessage
) => any;
export declare const DBClusterParameterGroupsMessageFilterSensitiveLog: (
  obj: DBClusterParameterGroupsMessage
) => any;
export declare const DescribeDBClusterParameterGroupsMessageFilterSensitiveLog: (
  obj: DescribeDBClusterParameterGroupsMessage
) => any;
export declare const ParameterFilterSensitiveLog: (obj: Parameter) => any;
export declare const DBClusterParameterGroupDetailsFilterSensitiveLog: (
  obj: DBClusterParameterGroupDetails
) => any;
export declare const DescribeDBClusterParametersMessageFilterSensitiveLog: (
  obj: DescribeDBClusterParametersMessage
) => any;
export declare const DBClusterMessageFilterSensitiveLog: (
  obj: DBClusterMessage
) => any;
export declare const DescribeDBClustersMessageFilterSensitiveLog: (
  obj: DescribeDBClustersMessage
) => any;
export declare const DescribeDBClusterSnapshotAttributesMessageFilterSensitiveLog: (
  obj: DescribeDBClusterSnapshotAttributesMessage
) => any;
export declare const DBClusterSnapshotAttributeFilterSensitiveLog: (
  obj: DBClusterSnapshotAttribute
) => any;
export declare const DBClusterSnapshotAttributesResultFilterSensitiveLog: (
  obj: DBClusterSnapshotAttributesResult
) => any;
export declare const DescribeDBClusterSnapshotAttributesResultFilterSensitiveLog: (
  obj: DescribeDBClusterSnapshotAttributesResult
) => any;
export declare const DBClusterSnapshotMessageFilterSensitiveLog: (
  obj: DBClusterSnapshotMessage
) => any;
export declare const DescribeDBClusterSnapshotsMessageFilterSensitiveLog: (
  obj: DescribeDBClusterSnapshotsMessage
) => any;
export declare const DBEngineVersionMessageFilterSensitiveLog: (
  obj: DBEngineVersionMessage
) => any;
export declare const DescribeDBEngineVersionsMessageFilterSensitiveLog: (
  obj: DescribeDBEngineVersionsMessage
) => any;
export declare const DBInstanceAutomatedBackupMessageFilterSensitiveLog: (
  obj: DBInstanceAutomatedBackupMessage
) => any;
export declare const DescribeDBInstanceAutomatedBackupsMessageFilterSensitiveLog: (
  obj: DescribeDBInstanceAutomatedBackupsMessage
) => any;
export declare const DBInstanceMessageFilterSensitiveLog: (
  obj: DBInstanceMessage
) => any;
export declare const DescribeDBInstancesMessageFilterSensitiveLog: (
  obj: DescribeDBInstancesMessage
) => any;
export declare const DescribeDBLogFilesMessageFilterSensitiveLog: (
  obj: DescribeDBLogFilesMessage
) => any;
export declare const DescribeDBLogFilesDetailsFilterSensitiveLog: (
  obj: DescribeDBLogFilesDetails
) => any;
export declare const DescribeDBLogFilesResponseFilterSensitiveLog: (
  obj: DescribeDBLogFilesResponse
) => any;
export declare const DBParameterGroupsMessageFilterSensitiveLog: (
  obj: DBParameterGroupsMessage
) => any;
export declare const DescribeDBParameterGroupsMessageFilterSensitiveLog: (
  obj: DescribeDBParameterGroupsMessage
) => any;
export declare const DBParameterGroupDetailsFilterSensitiveLog: (
  obj: DBParameterGroupDetails
) => any;
export declare const DescribeDBParametersMessageFilterSensitiveLog: (
  obj: DescribeDBParametersMessage
) => any;
export declare const DescribeDBProxiesRequestFilterSensitiveLog: (
  obj: DescribeDBProxiesRequest
) => any;
export declare const DescribeDBProxiesResponseFilterSensitiveLog: (
  obj: DescribeDBProxiesResponse
) => any;

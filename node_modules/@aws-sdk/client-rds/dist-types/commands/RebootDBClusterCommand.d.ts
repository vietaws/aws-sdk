import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { RebootDBClusterMessage, RebootDBClusterResult } from "../models/models_1";
import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../RDSClient";
export interface RebootDBClusterCommandInput extends RebootDBClusterMessage {
}
export interface RebootDBClusterCommandOutput extends RebootDBClusterResult, __MetadataBearer {
}
/**
 * <p>You might need to reboot your DB cluster, usually for maintenance reasons.
 *           For example, if you make certain modifications,
 *           or if you change the DB cluster parameter group associated with the DB cluster,
 *           reboot the DB cluster for the changes to take effect.</p>
 *          <p>Rebooting a DB cluster restarts the database engine service. Rebooting a DB
 *           cluster results in a momentary outage, during which the DB cluster status is set to rebooting.</p>
 *          <p>Use this operation only for a non-Aurora Multi-AZ DB cluster.</p>
 *          <p>For more information on Multi-AZ DB clusters, see
 *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
 *               Multi-AZ deployments with two readable standby DB instances</a> in the
 *           <i>Amazon RDS User Guide.</i>
 *          </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { RDSClient, RebootDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
 * // const { RDSClient, RebootDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
 * const client = new RDSClient(config);
 * const command = new RebootDBClusterCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link RebootDBClusterCommandInput} for command's `input` shape.
 * @see {@link RebootDBClusterCommandOutput} for command's `response` shape.
 * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
 *
 */
export declare class RebootDBClusterCommand extends $Command<RebootDBClusterCommandInput, RebootDBClusterCommandOutput, RDSClientResolvedConfig> {
    readonly input: RebootDBClusterCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: RebootDBClusterCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootDBClusterCommandInput, RebootDBClusterCommandOutput>;
    private serialize;
    private deserialize;
}
